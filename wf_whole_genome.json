{
  "sbg:batchBy": {
    "type": "criteria",
    "criteria": [
      "metadata.sample_id"
    ]
  },
  "label": "Whole Genome Analysis - BWA + GATK 2.3.9-Lite (with Metrics)",
  "sbg:validationErrors": [],
  "outputs": [
    {
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#SBG_Html2b64.b64html"
      ],
      "required": false,
      "label": "FastQC report",
      "sbg:includeInPorts": true,
      "sbg:x": 518.3334852059734,
      "sbg:fileTypes": "HTML, B64HTML",
      "id": "#b64html",
      "sbg:y": 444.0000584655357
    },
    {
      "type": [
        "File"
      ],
      "source": [
        "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
      ],
      "required": true,
      "label": "Picard Alignment Metrics",
      "sbg:includeInPorts": true,
      "sbg:x": 2745.0003536145005,
      "sbg:fileTypes": "TXT",
      "id": "#summary_metrics",
      "sbg:y": -523.3333742088753
    },
    {
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#GATK_BaseRecalibrator.plot_pdf"
      ],
      "required": false,
      "label": "BaseRecalibrator Plot",
      "sbg:includeInPorts": true,
      "sbg:x": 1800.0004876984663,
      "sbg:fileTypes": "PDF",
      "id": "#plot_pdf",
      "sbg:y": 615.0001635419057
    },
    {
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#SnpEff.summary_text"
      ],
      "required": false,
      "label": "SnpEff Summary text",
      "sbg:includeInPorts": true,
      "sbg:x": 3690.0001456340174,
      "sbg:fileTypes": "TXT",
      "id": "#summary_text",
      "sbg:y": 59.99999346997966
    },
    {
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#SnpEff.annotated"
      ],
      "required": false,
      "label": "Annotated VCF",
      "sbg:includeInPorts": true,
      "sbg:x": 3673.333559420379,
      "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
      "id": "#annotated",
      "sbg:y": 371.66670515802275
    },
    {
      "type": [
        "File"
      ],
      "source": [
        "#GATK_CombineVariants.combined_vcf"
      ],
      "required": true,
      "label": "Raw VCF",
      "sbg:includeInPorts": true,
      "sbg:x": 2531.6667673985175,
      "sbg:fileTypes": "VCF",
      "id": "#combined_vcf",
      "sbg:y": 648.3333466317924
    },
    {
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#SnpEff.summary"
      ],
      "required": false,
      "label": "SnpEff summary HTML",
      "sbg:includeInPorts": true,
      "sbg:x": 3710.000015523695,
      "sbg:fileTypes": "HTML, CSV",
      "id": "#summary",
      "sbg:y": 219.99421000457625
    },
    {
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#SBG_Genome_Coverage.summary"
      ],
      "required": false,
      "label": "Genome Coverage",
      "sbg:x": 3229.9999191098727,
      "sbg:y": -750.0057737959752,
      "id": "#summary_1",
      "sbg:includeInPorts": true
    },
    {
      "type": [
        "null",
        "File"
      ],
      "source": [
        "#SBG_Genome_Coverage.per_interval"
      ],
      "required": false,
      "label": "Coverage Per Interval",
      "sbg:x": 3226.6665857765397,
      "sbg:y": -583.3391089969207,
      "id": "#per_interval",
      "sbg:includeInPorts": true
    }
  ],
  "sbg:canvas_y": 191,
  "sbg:batchInput": "#fastq",
  "cwlVersion": "sbg:draft-2",
  "sbg:project": "admin/sbg-public-data",
  "sbg:contributors": [
    "admin"
  ],
  "sbg:projectName": "SBG Public Data",
  "id": "http://brood-import-fix-vayu.sbgenomics.com:27444/v2/apps/admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/0/raw/",
  "sbg:sbgMaintained": false,
  "requirements": [],
  "sbg:toolkitVersion": "1.0",
  "steps": [
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "CombineVariants"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "File to which variants should be written.",
            "type": [
              "File"
            ],
            "label": "Output Combined VCF",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "secondaryFiles": [
                ".idx"
              ],
              "glob": "*.vcf"
            },
            "sbg:fileTypes": "VCF",
            "id": "#combined_vcf"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type CombineVariants --variant variant.vcf --out Sample_XY.Library_Unknown.Platform_Unit_Unknown.combined.vcf",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911447,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  var input_file = [].concat($job.inputs.variants)[0]\n  var meta = input_file.metadata\n  if(meta){\n  \tvar sample = meta.sample_id ? meta.sample_id : 'Unknown'\n  \tvar library = meta.library_id ? meta.library_id  : 'Unknown'\n  \tvar platform_unit = meta.platform_unit_id  ? meta.platform_unit_id : 'Unknown'\n    if(sample !== 'Unknown' || library !== 'Unknown' || platform_unit !== 'Unknown'){\n    \treturn ['Sample_' + sample, 'Library_' + library, 'Platform_Unit_' + platform_unit, 'combined', 'vcf'].join('.')\n  \t}\n  }\n  var variant_name = input_file.path.replace(/^.*[\\\\\\/]/, '').split('.')\n  var variant_namebase = variant_name.slice(0, -1).join('.')\n  return variant_namebase + '.combined.vcf'\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 2171.078624463554,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "memory_overhead_per_job": 0,
            "variants": [
              {
                "metadata": {
                  "sample_id": "XY"
                },
                "path": "variant.vcf",
                "secondaryFiles": []
              }
            ]
          }
        },
        "description": "Overview\n\nCombineVariants reads in variants records from separate ROD (Reference-Ordered Data) sources and combines them into a single VCF. Any (unique) name can be used to bind your ROD and any number of sources can be input. This tool aims to fulfill two main possible use cases, reflected by the two combination options (MERGE and UNION), for merging records at the variant level (the first 8 fields of the VCF) or at the genotype level (the rest).\n\nMERGE: combines multiple variant records present at the same site in the different input sources into a single variant record in the output. If sample names overlap, then they are \"uniquified\" by default, which means a suffix is appended to make them unique. Note that in version 3.3, the automatic uniquifying was disabled (unintentionally), and required setting `-genotypeMergeOptions UNIQUIFY` manually.\nUNION: assumes that each ROD source represents the same set of samples (although this is not enforced). It uses the priority list (if provided) to emit a single record instance at every position represented in the input RODs.\nCombineVariants will emit a record for every site that was present in any of your input VCF files, and will annotate (in the set attribute in the INFO field) whether the record had a PASS or FILTER status in each input ROD . In effect, CombineVariants always produces a union of the input VCFs. However, any part of the Venn of the merged VCFs can be extracted using JEXL expressions on the set attribute using SelectVariants. If you want to extract just the records in common between two VCFs, you would first run CombineVariants on the two files to generate a single VCF and then run SelectVariants to extract the common records with `-select 'set == \"Intersection\"'`, as worked out in the detailed example in the documentation guide.\n\nInput\nTwo or more variant sets to combine.\n\nOutput\nA combined VCF.\n\nUsage examples\n\nMerge two separate callsets\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant input1.vcf \\\n   --variant input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions UNIQUIFY\n \nGet the union of calls made on the same samples\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant:foo input1.vcf \\\n   --variant:bar input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions PRIORITIZE \\\n   -priority foo,bar\n \nCaveats\n\nThis tool is not intended to manipulate GVCFS! To combine GVCF files output by HaplotypeCaller, use CombineGVCFs.\nTo join intermediate VCFs produced by running jobs in parallel by interval (e.g. by chromosome), use CatVariants.\n\nAdditional notes\n\nUsing this tool's multi-threaded parallelism capability is particularly useful when converting from VCF to BCF2, which can be time-consuming. In this case each thread spends CPU time doing the conversion, and the GATK engine is smart enough to merge the partial BCF2 blocks together efficiently. However, since this merge runs in only one thread, you can quickly reach diminishing returns with the number of parallel threads. In our hands, `-nt 4` works well but `-nt 8` tends to be be too much.\nSince GATK 2.1, when merging multiple VCF records at a site, the combined VCF record has the QUAL of the first VCF record with a non-MISSING QUAL value. The previous behavior was to take the max QUAL, which could result in strange downstream confusion.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 435.23531175594775,
        "sbg:modifiedOn": 1458841427,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "GATK CombineVariants",
        "sbg:toolAuthor": "Broad Institute",
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-combinevariants/9",
        "sbg:modifiedBy": "bix-demo",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source Code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantutils_CombineVariants.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 9,
        "successCodes": [],
        "sbg:latestRevision": 9,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911447,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911448,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911449,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911450,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911451,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911452,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1450911453,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1450911455,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1450911456,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1458841427,
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "Input VCF file.",
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Variants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--variant",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-V",
            "sbg:fileTypes": "VCF",
            "id": "#variants"
          },
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "If true, do not output the header containing the command line used.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Suppress Command Line Header",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--suppressCommandLineHeader",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-suppressCommandLineHeader",
            "id": "#suppress_command_line_header"
          },
          {
            "description": "Key used in the INFO key=value tag emitted describing which set the combined VCF record came from.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "set",
            "label": "Set Key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--setKey",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-setKey",
            "id": "#set_key"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Print out interesting sites requiring complex compatibility merging.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Print Complex Merges",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--printComplexMerges",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-printComplexMerges",
            "id": "#print_complex_merges"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Combine variants and output site only if the variant is present in at least N input files.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Minimum N",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--minimumN",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-minN",
            "id": "#minimum_n"
          },
          {
            "description": "If true, then the output VCF will contain no INFO or genotype FORMAT fields.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Minimal Vcf",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--minimalVCF",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-minimalVCF",
            "id": "#minimal_vcf"
          },
          {
            "description": "If true, when VCF records overlap the info field is taken from the one with the max AC instead of only taking the fields which are identical across the overlapping records.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Merge Info With Max Ac",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mergeInfoWithMaxAC",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-mergeInfoWithMaxAC",
            "id": "#merge_info_with_max_ac"
          },
          {
            "description": "Amount of RAM memory to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:fileTypes": "VCF, BED, TXT",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--intervals",
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "Determines how we should merge genotype records for samples shared across the ROD files.",
            "type": [
              "null",
              {
                "name": "genotypemergeoption",
                "type": "enum",
                "symbols": [
                  "UNIQUIFY",
                  "UNSORTED",
                  "REQUIRE_UNIQUE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Genotypemergeoption",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--genotypemergeoption",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-genotypeMergeOptions",
            "id": "#genotypemergeoption"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "Determines how we should handle records seen at the same site in the VCF, but with different FILTER fields.",
            "type": [
              "null",
              {
                "name": "filteredrecordsmergetype",
                "type": "enum",
                "symbols": [
                  "KEEP_IF_ANY_UNFILTERED",
                  "KEEP_IF_ALL_UNFILTERED",
                  "KEEP_UNCONDITIONAL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "KEEP_IF_ANY_UNFILTERED",
            "label": "Filteredrecordsmergetype",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--filteredrecordsmergetype",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-filteredRecordsMergeType",
            "id": "#filteredrecordsmergetype"
          },
          {
            "description": "If true, then filtered VCFs are treated as uncalled, so that filtered set annotations don't appear in the combined VCF.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Filtered Are Uncalled",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--filteredAreUncalled",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-filteredAreUncalled",
            "id": "#filtered_are_uncalled"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "If true, assume input VCFs have identical sample sets and disjoint calls.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Assume Identical Samples",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--assumeIdenticalSamples",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Combine Variants",
            "sbg:altPrefix": "-assumeIdenticalSamples",
            "id": "#assume_identical_samples"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-combinevariants/0"
      },
      "outputs": [
        {
          "id": "#GATK_CombineVariants.combined_vcf"
        }
      ],
      "sbg:x": 2171.078624463554,
      "inputs": [
        {
          "source": [
            "#GATK_UnifiedGenotyper.raw_vcf"
          ],
          "id": "#GATK_CombineVariants.variants"
        },
        {
          "id": "#GATK_CombineVariants.validation_strictness"
        },
        {
          "id": "#GATK_CombineVariants.use_original_qualities"
        },
        {
          "id": "#GATK_CombineVariants.use_legacy_downsampler"
        },
        {
          "id": "#GATK_CombineVariants.unsafe"
        },
        {
          "id": "#GATK_CombineVariants.tag"
        },
        {
          "id": "#GATK_CombineVariants.suppress_command_line_header"
        },
        {
          "id": "#GATK_CombineVariants.set_key"
        },
        {
          "id": "#GATK_CombineVariants.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_CombineVariants.reference"
        },
        {
          "id": "#GATK_CombineVariants.read_group_black_list"
        },
        {
          "id": "#GATK_CombineVariants.read_filter"
        },
        {
          "id": "#GATK_CombineVariants.print_complex_merges"
        },
        {
          "id": "#GATK_CombineVariants.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_CombineVariants.phone_home"
        },
        {
          "id": "#GATK_CombineVariants.pedigree_validation_type"
        },
        {
          "id": "#GATK_CombineVariants.pedigree_string"
        },
        {
          "id": "#GATK_CombineVariants.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_CombineVariants.minimum_n"
        },
        {
          "id": "#GATK_CombineVariants.minimal_vcf"
        },
        {
          "id": "#GATK_CombineVariants.merge_info_with_max_ac"
        },
        {
          "id": "#GATK_CombineVariants.memory_per_job"
        },
        {
          "id": "#GATK_CombineVariants.memory_overhead_per_job"
        },
        {
          "id": "#GATK_CombineVariants.max_runtime_units"
        },
        {
          "id": "#GATK_CombineVariants.max_runtime"
        },
        {
          "id": "#GATK_CombineVariants.keep_program_records"
        },
        {
          "id": "#GATK_CombineVariants.intervals_file"
        },
        {
          "id": "#GATK_CombineVariants.intervals"
        },
        {
          "id": "#GATK_CombineVariants.interval_set_rule"
        },
        {
          "id": "#GATK_CombineVariants.interval_padding"
        },
        {
          "id": "#GATK_CombineVariants.interval_merging"
        },
        {
          "id": "#GATK_CombineVariants.genotypemergeoption"
        },
        {
          "id": "#GATK_CombineVariants.gatk_key"
        },
        {
          "id": "#GATK_CombineVariants.fix_misencoded_quals"
        },
        {
          "id": "#GATK_CombineVariants.filteredrecordsmergetype"
        },
        {
          "id": "#GATK_CombineVariants.filtered_are_uncalled"
        },
        {
          "id": "#GATK_CombineVariants.exclude_intervals"
        },
        {
          "id": "#GATK_CombineVariants.emit_original_quals"
        },
        {
          "id": "#GATK_CombineVariants.downsampling_type"
        },
        {
          "id": "#GATK_CombineVariants.downsample_to_fraction"
        },
        {
          "id": "#GATK_CombineVariants.downsample_to_coverage"
        },
        {
          "id": "#GATK_CombineVariants.disable_radnomization"
        },
        {
          "id": "#GATK_CombineVariants.disable_indel_quals"
        },
        {
          "id": "#GATK_CombineVariants.default_base_qualities"
        },
        {
          "id": "#GATK_CombineVariants.cpu_per_job"
        },
        {
          "id": "#GATK_CombineVariants.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_CombineVariants.baq"
        },
        {
          "id": "#GATK_CombineVariants.assume_identical_samples"
        },
        {
          "id": "#GATK_CombineVariants.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": 435.23531175594775,
      "id": "#GATK_CombineVariants"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M');\n  }\n  else{\n  \treturn '-Xmx2048M';\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "VariantRecalibrator",
          {
            "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "PDF file containing tranches plot generated by VariantRecalibrator.",
            "type": [
              "null",
              "File"
            ],
            "label": "Tranches Plot",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.tranches.pdf"
            },
            "sbg:fileTypes": "PDF",
            "id": "#tranches_plot"
          },
          {
            "description": "The output tranches file used by ApplyRecalibration.",
            "type": [
              "null",
              "File"
            ],
            "label": "Tranches File",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.tranches"
            },
            "sbg:fileTypes": "TRANCHES",
            "id": "#tranches_file"
          },
          {
            "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
            "type": [
              "null",
              "File"
            ],
            "label": "Rscript File",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.recal.R"
            },
            "sbg:fileTypes": "R",
            "id": "#rscript_file"
          },
          {
            "description": "The output recal file used by ApplyRecalibration.",
            "type": [
              "File"
            ],
            "label": "Recal File",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "secondaryFiles": [],
              "glob": "*.recal"
            },
            "sbg:fileTypes": "RECAL",
            "id": "#recal_file"
          },
          {
            "description": "PDF file containing plots generated by VariantRecalibrator.",
            "type": [
              "null",
              "File"
            ],
            "label": "R Plots",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.recal.R.pdf"
            },
            "sbg:fileTypes": "PDF",
            "id": "#R_plots"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantRecalibrator -nt 8 --reference_sequence /folder/reference.fasta --input /f/some.vcf --input /f/some_other.vcf --use_annotation QD,MQRankSum,FS,DP,ReadPosRankSum,HaplotypeScore --recal_file some.recal --rscript_file some.recal.R --tranches_file some.tranches  -resource:dbsnp,known=false,training=true,truth=false,prior=10.2 /dbsnp.vcf -resource:omni,known=false,training=true,truth=false,prior=10.2 /known.vcf",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911440,
        "arguments": [
          {
            "prefix": "--recal_file",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal')\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "prefix": "--rscript_file",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal.R')\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "prefix": "--tranches_file",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.tranches')\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  res = []\n  for(i=0; i<$job.inputs.resources_files.length; i++){\n   \tres.push($job.inputs.resources_files[i].metadata.resources, $job.inputs.resources_files[i].path);\n  }\n  return res.join(' ');\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 1,
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 2796.76532909997,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "memory_overhead_per_job": 0,
            "reference": {
              "path": "/folder/reference.fasta"
            },
            "resources_files": [
              {
                "metadata": {
                  "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2",
                  "some": "value"
                },
                "path": "/dbsnp.vcf",
                "secondaryFiles": []
              },
              {
                "metadata": {
                  "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                },
                "path": "/known.vcf",
                "secondaryFiles": []
              }
            ],
            "use_annotation": [],
            "variants": [
              {
                "path": "/f/some.vcf"
              },
              {
                "path": "/f/some_other.vcf"
              }
            ]
          }
        },
        "description": "Overview\n\nThis tool performs the first pass in a two-stage process called VQSR; the second pass is performed by the ApplyRecalibration tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nThe purpose of the variant recalibrator is to assign a well-calibrated probability to each variant call in a call set. You can then create highly accurate call sets by filtering based on this single estimate for the accuracy of each call. The approach taken by variant quality score recalibration is to develop a continuous, covarying estimate of the relationship between SNP call annotations (such as QD, MQ, and ReadPosRankSum, for example) and the probability that a SNP is a true genetic variant versus a sequencing or data processing artifact. This model is determined adaptively based on \"true sites\" provided as input, typically HapMap 3 sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The score that gets added to the INFO field of each variant is called the VQSLOD. It is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInputs\nThe input raw variants to be recalibrated.\nKnown, truth, and training sets to be used by the algorithm. See the method documentation for more details.\n\nOutputs\nA recalibration table file that will be used by the ApplyRecalibration tool.\nA tranches file which shows various metrics of the recalibration callset for slices of the data.\n\nUsage example\n\nRecalibrating SNPs in exome data\n java -Xmx4g -jar GenomeAnalysisTK.jar \\\n   -T VariantRecalibrator \\\n   -R reference.fasta \\\n   -input raw_variants.vcf \\\n   -resource:hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n   -resource:omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n   -resource:1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf\n   -resource:dbsnp,known=true,training=false,truth=false,prior=6.0 dbsnp_135.b37.vcf \\\n   -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n   -mode SNP \\\n   -recalFile output.recal \\\n   -tranchesFile output.tranches \\\n   -rscriptFile output.plots.R\n \nCaveats\n\nThe values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for you own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\nWhole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\nIf you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\nIn order to create the model reporting plots Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": -117.15687204030633,
        "sbg:modifiedOn": 1450911446,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job;\n  }\n  else{\n  \treturn 1;\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "SNP GATK VariantRecalibrator",
        "sbg:toolAuthor": "Bread Institute",
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantrecalibrator/5",
        "sbg:modifiedBy": "bix-demo",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_VariantRecalibrator.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 5,
        "successCodes": [],
        "sbg:latestRevision": 5,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911440,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911441,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911442,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911443,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911444,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911446,
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "The raw input variants to be recalibrated.",
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Variants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-input",
            "sbg:fileTypes": "VCF",
            "id": "#variants"
          },
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "The names of the annotations which should used for calculations (from input VCF INFO fields).",
            "type": [
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Use Annotation",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_annotation",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.use_annotation.length == 0){\n  \treturn ['QD', 'MQRankSum', 'FS', 'DP', 'ReadPosRankSum', 'HaplotypeScore']\n  }\n  else\n    return $job.inputs.use_annotation\n\n\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-an",
            "id": "#use_annotation"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "The truth sensitivity level at which to start filtering, used here to indicate filtered variants in the model reporting plots.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "99.0",
            "label": "Ts Filter Level",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ts_filter_level",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-ts_filter_level",
            "id": "#ts_filter_level"
          },
          {
            "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Trust All Polymorphic",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--trustAllPolymorphic",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-allPoly",
            "id": "#trust_all_polymorphic"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "8",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "2.15",
            "label": "Target Titv",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--target_titv",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-titv",
            "id": "#target_titv"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent).",
            "type": [
              "null",
              {
                "type": "array",
                "items": "float"
              }
            ],
            "sbg:toolDefaultValue": "[100.0, 99.9, 99.0, 90.0]",
            "label": "T Stranche",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--TStranche",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-tranche",
            "id": "#t_stranche"
          },
          {
            "description": "If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "14.0",
            "label": "Std Threshold",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--stdThreshold",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-std",
            "id": "#std_threshold"
          },
          {
            "description": "The shrinkage parameter in the variational Bayes algorithm.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "1.0",
            "label": "Shrinkage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--shrinkage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-shrinkage",
            "id": "#shrinkage"
          },
          {
            "description": "Resources.",
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Resources",
            "sbg:category": "Input Files",
            "sbg:altPrefix": null,
            "sbg:fileTypes": "VCF",
            "id": "#resources_files"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "80.0",
            "label": "Qual Threshold",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--qualThreshold",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-qual",
            "id": "#qual_threshold"
          },
          {
            "description": "The number of prior counts to use in the variational Bayes algorithm.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "20.0",
            "label": "Prior Counts",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--priorCounts",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-priorCounts",
            "id": "#prior_counts"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.03",
            "label": "Percent Bad Variants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--percentBadVariants",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-percentBad",
            "id": "#percent_bad_variants"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "30",
            "label": "Num K Means",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--numKMeans",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-nKM",
            "id": "#num_k_means"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously.",
            "type": [
              "null",
              {
                "name": "mode",
                "type": "enum",
                "symbols": [
                  "SNP",
                  "INDEL",
                  "BOTH"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SNP",
            "label": "Mode",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mode",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-mode",
            "id": "#mode"
          },
          {
            "description": "The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad argument if necessary.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2500",
            "label": "Min Num Bad Variants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--minNumBadVariants",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-minNumBad",
            "id": "#min_num_bad_variants"
          },
          {
            "description": "Amount of RAM memory to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "100",
            "label": "Max Iterations",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxIterations",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-mI",
            "id": "#max_iterations"
          },
          {
            "description": "The maximum number of Gaussians to try during variational Bayes algorithm.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "10",
            "label": "Max Gaussians",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxGaussians",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-mG",
            "id": "#max_gaussians"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--intervals",
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Ignore Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ignore_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-ignoreFilter",
            "id": "#ignore_filter"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "The dirichlet parameter in the variational Bayes algorithm.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.001",
            "label": "Dirichlet",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--dirichlet",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-dirichlet",
            "id": "#dirichlet"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-variantrecalibrator/0"
      },
      "outputs": [
        {
          "id": "#GATK_VariantRecalibrator.tranches_plot"
        },
        {
          "id": "#GATK_VariantRecalibrator.tranches_file"
        },
        {
          "id": "#GATK_VariantRecalibrator.rscript_file"
        },
        {
          "id": "#GATK_VariantRecalibrator.recal_file"
        },
        {
          "id": "#GATK_VariantRecalibrator.R_plots"
        }
      ],
      "sbg:x": 2796.76532909997,
      "inputs": [
        {
          "source": [
            "#GATK_CombineVariants.combined_vcf"
          ],
          "id": "#GATK_VariantRecalibrator.variants"
        },
        {
          "id": "#GATK_VariantRecalibrator.validation_strictness"
        },
        {
          "id": "#GATK_VariantRecalibrator.use_original_qualities"
        },
        {
          "id": "#GATK_VariantRecalibrator.use_legacy_downsampler"
        },
        {
          "default": [
            "QD",
            "MQRankSum",
            "FS",
            "DP",
            "ReadPosRankSum",
            "HaplotypeScore"
          ],
          "id": "#GATK_VariantRecalibrator.use_annotation"
        },
        {
          "id": "#GATK_VariantRecalibrator.unsafe"
        },
        {
          "id": "#GATK_VariantRecalibrator.ts_filter_level"
        },
        {
          "id": "#GATK_VariantRecalibrator.trust_all_polymorphic"
        },
        {
          "default": 32,
          "id": "#GATK_VariantRecalibrator.threads_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator.target_titv"
        },
        {
          "id": "#GATK_VariantRecalibrator.tag"
        },
        {
          "id": "#GATK_VariantRecalibrator.t_stranche"
        },
        {
          "id": "#GATK_VariantRecalibrator.std_threshold"
        },
        {
          "id": "#GATK_VariantRecalibrator.shrinkage"
        },
        {
          "source": [
            "#SBG_Prepare_VQSR_Omni.output_vcf",
            "#SBG_Prepare_VQSR_dbSNP.output_vcf",
            "#SBG_Prepare_VQSR_1000G.output_vcf",
            "#SBG_Prepare_VQSR_HapMap.output_vcf"
          ],
          "id": "#GATK_VariantRecalibrator.resources_files"
        },
        {
          "id": "#GATK_VariantRecalibrator.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_VariantRecalibrator.reference"
        },
        {
          "id": "#GATK_VariantRecalibrator.read_group_black_list"
        },
        {
          "id": "#GATK_VariantRecalibrator.read_filter"
        },
        {
          "id": "#GATK_VariantRecalibrator.qual_threshold"
        },
        {
          "id": "#GATK_VariantRecalibrator.prior_counts"
        },
        {
          "id": "#GATK_VariantRecalibrator.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_VariantRecalibrator.phone_home"
        },
        {
          "id": "#GATK_VariantRecalibrator.percent_bad_variants"
        },
        {
          "id": "#GATK_VariantRecalibrator.pedigree_validation_type"
        },
        {
          "id": "#GATK_VariantRecalibrator.pedigree_string"
        },
        {
          "id": "#GATK_VariantRecalibrator.num_k_means"
        },
        {
          "id": "#GATK_VariantRecalibrator.non_deterministic_random_seed"
        },
        {
          "default": "SNP",
          "id": "#GATK_VariantRecalibrator.mode"
        },
        {
          "id": "#GATK_VariantRecalibrator.min_num_bad_variants"
        },
        {
          "default": 20000,
          "id": "#GATK_VariantRecalibrator.memory_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator.memory_overhead_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator.max_runtime_units"
        },
        {
          "id": "#GATK_VariantRecalibrator.max_runtime"
        },
        {
          "id": "#GATK_VariantRecalibrator.max_iterations"
        },
        {
          "id": "#GATK_VariantRecalibrator.max_gaussians"
        },
        {
          "id": "#GATK_VariantRecalibrator.keep_program_records"
        },
        {
          "id": "#GATK_VariantRecalibrator.intervals_file"
        },
        {
          "id": "#GATK_VariantRecalibrator.intervals"
        },
        {
          "id": "#GATK_VariantRecalibrator.interval_set_rule"
        },
        {
          "id": "#GATK_VariantRecalibrator.interval_padding"
        },
        {
          "id": "#GATK_VariantRecalibrator.interval_merging"
        },
        {
          "id": "#GATK_VariantRecalibrator.ignore_filter"
        },
        {
          "id": "#GATK_VariantRecalibrator.gatk_key"
        },
        {
          "id": "#GATK_VariantRecalibrator.fix_misencoded_quals"
        },
        {
          "id": "#GATK_VariantRecalibrator.exclude_intervals"
        },
        {
          "id": "#GATK_VariantRecalibrator.emit_original_quals"
        },
        {
          "id": "#GATK_VariantRecalibrator.downsampling_type"
        },
        {
          "id": "#GATK_VariantRecalibrator.downsample_to_fraction"
        },
        {
          "id": "#GATK_VariantRecalibrator.downsample_to_coverage"
        },
        {
          "id": "#GATK_VariantRecalibrator.disable_radnomization"
        },
        {
          "id": "#GATK_VariantRecalibrator.disable_indel_quals"
        },
        {
          "id": "#GATK_VariantRecalibrator.dirichlet"
        },
        {
          "id": "#GATK_VariantRecalibrator.default_base_qualities"
        },
        {
          "default": 1,
          "id": "#GATK_VariantRecalibrator.cpu_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_VariantRecalibrator.baq"
        },
        {
          "id": "#GATK_VariantRecalibrator.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": -117.15687204030633,
      "id": "#GATK_VariantRecalibrator"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M');\n  }\n  else{\n  \treturn '-Xmx2048M';\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "VariantRecalibrator",
          {
            "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "PDF file containing tranches plot generated by VariantRecalibrator.",
            "type": [
              "null",
              "File"
            ],
            "label": "Tranches Plot",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.tranches.pdf"
            },
            "sbg:fileTypes": "PDF",
            "id": "#tranches_plot"
          },
          {
            "description": "The output tranches file used by ApplyRecalibration.",
            "type": [
              "null",
              "File"
            ],
            "label": "Tranches File",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.tranches"
            },
            "sbg:fileTypes": "TRANCHES",
            "id": "#tranches_file"
          },
          {
            "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
            "type": [
              "null",
              "File"
            ],
            "label": "Rscript File",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.recal.R"
            },
            "sbg:fileTypes": "R",
            "id": "#rscript_file"
          },
          {
            "description": "The output recal file used by ApplyRecalibration.",
            "type": [
              "File"
            ],
            "label": "Recal File",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "secondaryFiles": [],
              "glob": "*.recal"
            },
            "sbg:fileTypes": "RECAL",
            "id": "#recal_file"
          },
          {
            "description": "PDF file containing plots generated by VariantRecalibrator.",
            "type": [
              "null",
              "File"
            ],
            "label": "R Plots",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.recal.R.pdf"
            },
            "sbg:fileTypes": "PDF",
            "id": "#R_plots"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantRecalibrator -nt 8 --reference_sequence /folder/reference.fasta --input /f/some.vcf --input /f/some_other.vcf --use_annotation QD,MQRankSum,FS,DP,ReadPosRankSum,HaplotypeScore --recal_file some.recal --rscript_file some.recal.R --tranches_file some.tranches  -resource:dbsnp,known=false,training=true,truth=false,prior=10.2 /dbsnp.vcf -resource:omni,known=false,training=true,truth=false,prior=10.2 /known.vcf",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911440,
        "arguments": [
          {
            "prefix": "--recal_file",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal')\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "prefix": "--rscript_file",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal.R')\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "prefix": "--tranches_file",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.tranches')\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  res = []\n  for(i=0; i<$job.inputs.resources_files.length; i++){\n   \tres.push($job.inputs.resources_files[i].metadata.resources, $job.inputs.resources_files[i].path);\n  }\n  return res.join(' ');\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 1,
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 2816.3733208857607,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "memory_overhead_per_job": 0,
            "reference": {
              "path": "/folder/reference.fasta"
            },
            "resources_files": [
              {
                "metadata": {
                  "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2",
                  "some": "value"
                },
                "path": "/dbsnp.vcf",
                "secondaryFiles": []
              },
              {
                "metadata": {
                  "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                },
                "path": "/known.vcf",
                "secondaryFiles": []
              }
            ],
            "use_annotation": [],
            "variants": [
              {
                "path": "/f/some.vcf"
              },
              {
                "path": "/f/some_other.vcf"
              }
            ]
          }
        },
        "description": "Overview\n\nThis tool performs the first pass in a two-stage process called VQSR; the second pass is performed by the ApplyRecalibration tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nThe purpose of the variant recalibrator is to assign a well-calibrated probability to each variant call in a call set. You can then create highly accurate call sets by filtering based on this single estimate for the accuracy of each call. The approach taken by variant quality score recalibration is to develop a continuous, covarying estimate of the relationship between SNP call annotations (such as QD, MQ, and ReadPosRankSum, for example) and the probability that a SNP is a true genetic variant versus a sequencing or data processing artifact. This model is determined adaptively based on \"true sites\" provided as input, typically HapMap 3 sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The score that gets added to the INFO field of each variant is called the VQSLOD. It is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInputs\nThe input raw variants to be recalibrated.\nKnown, truth, and training sets to be used by the algorithm. See the method documentation for more details.\n\nOutputs\nA recalibration table file that will be used by the ApplyRecalibration tool.\nA tranches file which shows various metrics of the recalibration callset for slices of the data.\n\nUsage example\n\nRecalibrating SNPs in exome data\n java -Xmx4g -jar GenomeAnalysisTK.jar \\\n   -T VariantRecalibrator \\\n   -R reference.fasta \\\n   -input raw_variants.vcf \\\n   -resource:hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n   -resource:omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n   -resource:1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf\n   -resource:dbsnp,known=true,training=false,truth=false,prior=6.0 dbsnp_135.b37.vcf \\\n   -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n   -mode SNP \\\n   -recalFile output.recal \\\n   -tranchesFile output.tranches \\\n   -rscriptFile output.plots.R\n \nCaveats\n\nThe values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for you own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\nWhole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\nIf you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\nIn order to create the model reporting plots Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 135.19613669433062,
        "sbg:modifiedOn": 1450911446,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job;\n  }\n  else{\n  \treturn 1;\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "INDEL GATK VariantRecalibrator",
        "sbg:toolAuthor": "Bread Institute",
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantrecalibrator/5",
        "sbg:modifiedBy": "bix-demo",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_VariantRecalibrator.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 5,
        "successCodes": [],
        "sbg:latestRevision": 5,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911440,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911441,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911442,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911443,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911444,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911446,
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "The raw input variants to be recalibrated.",
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Variants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-input",
            "sbg:fileTypes": "VCF",
            "id": "#variants"
          },
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "The names of the annotations which should used for calculations (from input VCF INFO fields).",
            "type": [
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Use Annotation",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_annotation",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.use_annotation.length == 0){\n  \treturn ['QD', 'MQRankSum', 'FS', 'DP', 'ReadPosRankSum', 'HaplotypeScore']\n  }\n  else\n    return $job.inputs.use_annotation\n\n\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-an",
            "id": "#use_annotation"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "The truth sensitivity level at which to start filtering, used here to indicate filtered variants in the model reporting plots.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "99.0",
            "label": "Ts Filter Level",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ts_filter_level",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-ts_filter_level",
            "id": "#ts_filter_level"
          },
          {
            "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Trust All Polymorphic",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--trustAllPolymorphic",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-allPoly",
            "id": "#trust_all_polymorphic"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "8",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "2.15",
            "label": "Target Titv",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--target_titv",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-titv",
            "id": "#target_titv"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent).",
            "type": [
              "null",
              {
                "type": "array",
                "items": "float"
              }
            ],
            "sbg:toolDefaultValue": "[100.0, 99.9, 99.0, 90.0]",
            "label": "T Stranche",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--TStranche",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-tranche",
            "id": "#t_stranche"
          },
          {
            "description": "If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "14.0",
            "label": "Std Threshold",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--stdThreshold",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-std",
            "id": "#std_threshold"
          },
          {
            "description": "The shrinkage parameter in the variational Bayes algorithm.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "1.0",
            "label": "Shrinkage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--shrinkage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-shrinkage",
            "id": "#shrinkage"
          },
          {
            "description": "Resources.",
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Resources",
            "sbg:category": "Input Files",
            "sbg:altPrefix": null,
            "sbg:fileTypes": "VCF",
            "id": "#resources_files"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "80.0",
            "label": "Qual Threshold",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--qualThreshold",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-qual",
            "id": "#qual_threshold"
          },
          {
            "description": "The number of prior counts to use in the variational Bayes algorithm.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "20.0",
            "label": "Prior Counts",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--priorCounts",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-priorCounts",
            "id": "#prior_counts"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.03",
            "label": "Percent Bad Variants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--percentBadVariants",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-percentBad",
            "id": "#percent_bad_variants"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "30",
            "label": "Num K Means",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--numKMeans",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-nKM",
            "id": "#num_k_means"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously.",
            "type": [
              "null",
              {
                "name": "mode",
                "type": "enum",
                "symbols": [
                  "SNP",
                  "INDEL",
                  "BOTH"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SNP",
            "label": "Mode",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mode",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-mode",
            "id": "#mode"
          },
          {
            "description": "The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad argument if necessary.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2500",
            "label": "Min Num Bad Variants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--minNumBadVariants",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-minNumBad",
            "id": "#min_num_bad_variants"
          },
          {
            "description": "Amount of RAM memory to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "100",
            "label": "Max Iterations",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxIterations",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-mI",
            "id": "#max_iterations"
          },
          {
            "description": "The maximum number of Gaussians to try during variational Bayes algorithm.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "10",
            "label": "Max Gaussians",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxGaussians",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-mG",
            "id": "#max_gaussians"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--intervals",
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Ignore Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ignore_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-ignoreFilter",
            "id": "#ignore_filter"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "The dirichlet parameter in the variational Bayes algorithm.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.001",
            "label": "Dirichlet",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--dirichlet",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Variant Recalibrator",
            "sbg:altPrefix": "-dirichlet",
            "id": "#dirichlet"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-variantrecalibrator/0"
      },
      "outputs": [
        {
          "id": "#GATK_VariantRecalibrator_1.tranches_plot"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.tranches_file"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.rscript_file"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.recal_file"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.R_plots"
        }
      ],
      "sbg:x": 2816.3733208857607,
      "inputs": [
        {
          "source": [
            "#GATK_CombineVariants.combined_vcf"
          ],
          "id": "#GATK_VariantRecalibrator_1.variants"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.validation_strictness"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.use_original_qualities"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.use_legacy_downsampler"
        },
        {
          "default": [
            "QD",
            "DP",
            "FS",
            "ReadPosRankSum",
            "MQRankSum"
          ],
          "id": "#GATK_VariantRecalibrator_1.use_annotation"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.unsafe"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.ts_filter_level"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.trust_all_polymorphic"
        },
        {
          "default": 32,
          "id": "#GATK_VariantRecalibrator_1.threads_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.target_titv"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.tag"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.t_stranche"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.std_threshold"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.shrinkage"
        },
        {
          "source": [
            "#SBG_Prepare_VQSR_Mills.output_vcf",
            "#SBG_Prepare_VQSR_1000G.output_vcf"
          ],
          "id": "#GATK_VariantRecalibrator_1.resources_files"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_VariantRecalibrator_1.reference"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.read_group_black_list"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.read_filter"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.qual_threshold"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.prior_counts"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.phone_home"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.percent_bad_variants"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.pedigree_validation_type"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.pedigree_string"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.num_k_means"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.non_deterministic_random_seed"
        },
        {
          "default": "INDEL",
          "id": "#GATK_VariantRecalibrator_1.mode"
        },
        {
          "default": 1000,
          "id": "#GATK_VariantRecalibrator_1.min_num_bad_variants"
        },
        {
          "default": 20000,
          "id": "#GATK_VariantRecalibrator_1.memory_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.memory_overhead_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.max_runtime_units"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.max_runtime"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.max_iterations"
        },
        {
          "default": 4,
          "id": "#GATK_VariantRecalibrator_1.max_gaussians"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.keep_program_records"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.intervals_file"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.intervals"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.interval_set_rule"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.interval_padding"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.interval_merging"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.ignore_filter"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.gatk_key"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.fix_misencoded_quals"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.exclude_intervals"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.emit_original_quals"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.downsampling_type"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.downsample_to_fraction"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.downsample_to_coverage"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.disable_radnomization"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.disable_indel_quals"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.dirichlet"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.default_base_qualities"
        },
        {
          "default": 1,
          "id": "#GATK_VariantRecalibrator_1.cpu_per_job"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.baq"
        },
        {
          "id": "#GATK_VariantRecalibrator_1.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": 135.19613669433062,
      "id": "#GATK_VariantRecalibrator_1"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "ApplyRecalibration",
          {
            "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "File to which variants should be written.",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.vcf"
            },
            "type": [
              "File"
            ],
            "id": "#vcf",
            "label": "VCF"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type ApplyRecalibration -nt 8 --reference_sequence . --input variants.ext --recal_file recal_file.ext --tranches_file tranches_file.ext --out variants.recalibrated.vcf",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911340,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 3041.569298872784,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "memory_overhead_per_job": 0,
            "reference": {
              "path": "."
            },
            "tranches_file": {
              "size": 0,
              "class": "File",
              "path": "tranches_file.ext",
              "secondaryFiles": []
            },
            "recal_file": {
              "size": 0,
              "class": "File",
              "path": "recal_file.ext",
              "secondaryFiles": []
            },
            "variants": {
              "size": 0,
              "class": "File",
              "path": "variants.ext",
              "secondaryFiles": []
            }
          }
        },
        "description": "Overview\n\nThis tool performs the second pass in a two-stage process called VQSR; the first pass is performed by the VariantRecalibrator tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nUsing the tranche file and recalibration table generated by the previous step, the ApplyRecalibration tool looks at each variant's VQSLOD value and decides which tranche it falls in. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This will result in a call set that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInput\nThe raw input variants to be filtered.\nThe recalibration table file that was generated by the VariantRecalibrator tool.\nThe tranches file that was generated by the VariantRecalibrator tool.\n\nOutput\nA recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level.\n\nUsage example for filtering SNPs\n\n java -Xmx3g -jar GenomeAnalysisTK.jar \\\n   -T ApplyRecalibration \\\n   -R reference.fasta \\\n   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \\\n   --ts_filter_level 99.0 \\\n   -tranchesFile path/to/output.tranches \\\n   -recalFile path/to/output.recal \\\n   -mode SNP \\\n   -o path/to/output.recalibrated.filtered.vcf\n \nCaveats\n\nThe tranche values used in the example above is only a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\nIn order to create the tranche reporting plots (which are only generated for SNPs, not indels!) Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": -5.784310809147737,
        "sbg:modifiedOn": 1450911345,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "SNP GATK ApplyRecalibration",
        "sbg:toolAuthor": "Broad Institute",
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-applyrecalibration/6",
        "sbg:modifiedBy": "bix-demo",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source Code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_ApplyRecalibration.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 6,
        "successCodes": [],
        "sbg:latestRevision": 6,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911340,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911341,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911342,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911342,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911344,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911344,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1450911345,
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "The raw input variants to be recalibrated.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Input",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-input",
            "sbg:fileTypes": "VCF",
            "id": "#variants"
          },
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "The truth sensitivity level at which to start filtering.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "99.0",
            "label": "Ts Filter Level",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ts_filter_level",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Apply Recalibration",
            "sbg:altPrefix": "-ts_filter_level",
            "id": "#ts_filter_level"
          },
          {
            "description": "The input tranches file describing where to cut the data.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Tranches File",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tranches_file",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-tranchesFile",
            "sbg:fileTypes": "TRANCHES",
            "id": "#tranches_file"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "8",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "The input recal file used by ApplyRecalibration.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Recal File",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--recal_file",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-recalFile",
            "sbg:fileTypes": "RECAL",
            "id": "#recal_file"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously.",
            "type": [
              "null",
              {
                "name": "mode",
                "type": "enum",
                "symbols": [
                  "SNP",
                  "INDEL",
                  "BOTH"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SNP",
            "label": "Mode",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mode",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Apply Recalibration",
            "sbg:altPrefix": "-mode",
            "id": "#mode"
          },
          {
            "description": "Amount of RAM memory to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--intervals",
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Ignore Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ignore_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Apply Recalibration",
            "sbg:altPrefix": "-ignoreFilter",
            "id": "#ignore_filter"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-applyrecalibration/0"
      },
      "outputs": [
        {
          "id": "#GATK_ApplyRecalibration.vcf"
        }
      ],
      "sbg:x": 3041.569298872784,
      "inputs": [
        {
          "source": [
            "#GATK_CombineVariants.combined_vcf"
          ],
          "id": "#GATK_ApplyRecalibration.variants"
        },
        {
          "id": "#GATK_ApplyRecalibration.validation_strictness"
        },
        {
          "id": "#GATK_ApplyRecalibration.use_original_qualities"
        },
        {
          "id": "#GATK_ApplyRecalibration.use_legacy_downsampler"
        },
        {
          "id": "#GATK_ApplyRecalibration.unsafe"
        },
        {
          "default": 99,
          "id": "#GATK_ApplyRecalibration.ts_filter_level"
        },
        {
          "source": [
            "#GATK_VariantRecalibrator.tranches_file"
          ],
          "id": "#GATK_ApplyRecalibration.tranches_file"
        },
        {
          "default": 32,
          "id": "#GATK_ApplyRecalibration.threads_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration.tag"
        },
        {
          "id": "#GATK_ApplyRecalibration.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_ApplyRecalibration.reference"
        },
        {
          "source": [
            "#GATK_VariantRecalibrator.recal_file"
          ],
          "id": "#GATK_ApplyRecalibration.recal_file"
        },
        {
          "id": "#GATK_ApplyRecalibration.read_group_black_list"
        },
        {
          "id": "#GATK_ApplyRecalibration.read_filter"
        },
        {
          "id": "#GATK_ApplyRecalibration.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_ApplyRecalibration.phone_home"
        },
        {
          "id": "#GATK_ApplyRecalibration.pedigree_validation_type"
        },
        {
          "id": "#GATK_ApplyRecalibration.pedigree_string"
        },
        {
          "id": "#GATK_ApplyRecalibration.non_deterministic_random_seed"
        },
        {
          "default": "SNP",
          "id": "#GATK_ApplyRecalibration.mode"
        },
        {
          "default": 20000,
          "id": "#GATK_ApplyRecalibration.memory_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration.memory_overhead_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration.max_runtime_units"
        },
        {
          "id": "#GATK_ApplyRecalibration.max_runtime"
        },
        {
          "id": "#GATK_ApplyRecalibration.keep_program_records"
        },
        {
          "id": "#GATK_ApplyRecalibration.intervals_file"
        },
        {
          "id": "#GATK_ApplyRecalibration.intervals"
        },
        {
          "id": "#GATK_ApplyRecalibration.interval_set_rule"
        },
        {
          "id": "#GATK_ApplyRecalibration.interval_padding"
        },
        {
          "id": "#GATK_ApplyRecalibration.interval_merging"
        },
        {
          "id": "#GATK_ApplyRecalibration.ignore_filter"
        },
        {
          "id": "#GATK_ApplyRecalibration.gatk_key"
        },
        {
          "id": "#GATK_ApplyRecalibration.fix_misencoded_quals"
        },
        {
          "id": "#GATK_ApplyRecalibration.exclude_intervals"
        },
        {
          "id": "#GATK_ApplyRecalibration.emit_original_quals"
        },
        {
          "id": "#GATK_ApplyRecalibration.downsampling_type"
        },
        {
          "id": "#GATK_ApplyRecalibration.downsample_to_fraction"
        },
        {
          "id": "#GATK_ApplyRecalibration.downsample_to_coverage"
        },
        {
          "id": "#GATK_ApplyRecalibration.disable_radnomization"
        },
        {
          "id": "#GATK_ApplyRecalibration.disable_indel_quals"
        },
        {
          "id": "#GATK_ApplyRecalibration.default_base_qualities"
        },
        {
          "default": 1,
          "id": "#GATK_ApplyRecalibration.cpu_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_ApplyRecalibration.baq"
        },
        {
          "id": "#GATK_ApplyRecalibration.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": -5.784310809147737,
      "id": "#GATK_ApplyRecalibration"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "ApplyRecalibration",
          {
            "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "File to which variants should be written.",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants",
              "sbg:metadata": {},
              "glob": "*.vcf"
            },
            "type": [
              "File"
            ],
            "id": "#vcf",
            "label": "VCF"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type ApplyRecalibration -nt 8 --reference_sequence . --input variants.ext --recal_file recal_file.ext --tranches_file tranches_file.ext --out variants.recalibrated.vcf",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911340,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 3227.9416940321503,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "memory_overhead_per_job": 0,
            "reference": {
              "path": "."
            },
            "tranches_file": {
              "size": 0,
              "class": "File",
              "path": "tranches_file.ext",
              "secondaryFiles": []
            },
            "recal_file": {
              "size": 0,
              "class": "File",
              "path": "recal_file.ext",
              "secondaryFiles": []
            },
            "variants": {
              "size": 0,
              "class": "File",
              "path": "variants.ext",
              "secondaryFiles": []
            }
          }
        },
        "description": "Overview\n\nThis tool performs the second pass in a two-stage process called VQSR; the first pass is performed by the VariantRecalibrator tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nUsing the tranche file and recalibration table generated by the previous step, the ApplyRecalibration tool looks at each variant's VQSLOD value and decides which tranche it falls in. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This will result in a call set that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInput\nThe raw input variants to be filtered.\nThe recalibration table file that was generated by the VariantRecalibrator tool.\nThe tranches file that was generated by the VariantRecalibrator tool.\n\nOutput\nA recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level.\n\nUsage example for filtering SNPs\n\n java -Xmx3g -jar GenomeAnalysisTK.jar \\\n   -T ApplyRecalibration \\\n   -R reference.fasta \\\n   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \\\n   --ts_filter_level 99.0 \\\n   -tranchesFile path/to/output.tranches \\\n   -recalFile path/to/output.recal \\\n   -mode SNP \\\n   -o path/to/output.recalibrated.filtered.vcf\n \nCaveats\n\nThe tranche values used in the example above is only a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\nIn order to create the tranche reporting plots (which are only generated for SNPs, not indels!) Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 163.23535943966522,
        "sbg:modifiedOn": 1450911345,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "INDEL GATK ApplyRecalibration",
        "sbg:toolAuthor": "Broad Institute",
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-applyrecalibration/6",
        "sbg:modifiedBy": "bix-demo",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source Code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_ApplyRecalibration.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 6,
        "successCodes": [],
        "sbg:latestRevision": 6,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911340,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911341,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911342,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911342,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911344,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911344,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1450911345,
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "The raw input variants to be recalibrated.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Input",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-input",
            "sbg:fileTypes": "VCF",
            "id": "#variants"
          },
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "The truth sensitivity level at which to start filtering.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "99.0",
            "label": "Ts Filter Level",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ts_filter_level",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Apply Recalibration",
            "sbg:altPrefix": "-ts_filter_level",
            "id": "#ts_filter_level"
          },
          {
            "description": "The input tranches file describing where to cut the data.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Tranches File",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tranches_file",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-tranchesFile",
            "sbg:fileTypes": "TRANCHES",
            "id": "#tranches_file"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "8",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "The input recal file used by ApplyRecalibration.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Recal File",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--recal_file",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-recalFile",
            "sbg:fileTypes": "RECAL",
            "id": "#recal_file"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously.",
            "type": [
              "null",
              {
                "name": "mode",
                "type": "enum",
                "symbols": [
                  "SNP",
                  "INDEL",
                  "BOTH"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SNP",
            "label": "Mode",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mode",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Apply Recalibration",
            "sbg:altPrefix": "-mode",
            "id": "#mode"
          },
          {
            "description": "Amount of RAM memory to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--intervals",
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Ignore Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ignore_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Apply Recalibration",
            "sbg:altPrefix": "-ignoreFilter",
            "id": "#ignore_filter"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-applyrecalibration/0"
      },
      "outputs": [
        {
          "id": "#GATK_ApplyRecalibration_1.vcf"
        }
      ],
      "sbg:x": 3227.9416940321503,
      "inputs": [
        {
          "source": [
            "#GATK_ApplyRecalibration.vcf"
          ],
          "id": "#GATK_ApplyRecalibration_1.variants"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.validation_strictness"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.use_original_qualities"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.use_legacy_downsampler"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.unsafe"
        },
        {
          "default": 99,
          "id": "#GATK_ApplyRecalibration_1.ts_filter_level"
        },
        {
          "source": [
            "#GATK_VariantRecalibrator_1.tranches_file"
          ],
          "id": "#GATK_ApplyRecalibration_1.tranches_file"
        },
        {
          "default": 32,
          "id": "#GATK_ApplyRecalibration_1.threads_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.tag"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_ApplyRecalibration_1.reference"
        },
        {
          "source": [
            "#GATK_VariantRecalibrator_1.recal_file"
          ],
          "id": "#GATK_ApplyRecalibration_1.recal_file"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.read_group_black_list"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.read_filter"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.phone_home"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.pedigree_validation_type"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.pedigree_string"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.non_deterministic_random_seed"
        },
        {
          "default": "INDEL",
          "id": "#GATK_ApplyRecalibration_1.mode"
        },
        {
          "default": 20000,
          "id": "#GATK_ApplyRecalibration_1.memory_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.memory_overhead_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.max_runtime_units"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.max_runtime"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.keep_program_records"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.intervals_file"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.intervals"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.interval_set_rule"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.interval_padding"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.interval_merging"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.ignore_filter"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.gatk_key"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.fix_misencoded_quals"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.exclude_intervals"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.emit_original_quals"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.downsampling_type"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.downsample_to_fraction"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.downsample_to_coverage"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.disable_radnomization"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.disable_indel_quals"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.default_base_qualities"
        },
        {
          "default": 1,
          "id": "#GATK_ApplyRecalibration_1.cpu_per_job"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.baq"
        },
        {
          "id": "#GATK_ApplyRecalibration_1.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": 163.23535943966522,
      "id": "#GATK_ApplyRecalibration_1"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "python",
          "/opt/sbg-fasta-indices.py"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "fileTypes": "FASTA, FA",
            "type": [
              "null",
              "File"
            ],
            "label": "Reference",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reference",
              "glob": {
                "script": "{\n  return $job.inputs.reference.path.split(\"/\").pop()\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ]
            },
            "sbg:fileTypes": "FASTA",
            "id": "#fasta_reference"
          },
          {
            "outputBinding": {
              "sbg:metadata": {},
              "glob": "*.fai"
            },
            "type": [
              "null",
              "File"
            ],
            "sbg:fileTypes": "FAI",
            "id": "#fasta_index",
            "label": "FASTA Index"
          },
          {
            "outputBinding": {
              "sbg:metadata": {},
              "glob": "*.dict"
            },
            "type": [
              "null",
              "File"
            ],
            "sbg:fileTypes": "DICT",
            "id": "#fasta_dict",
            "label": "FASTA Dictionary"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "python /opt/sbg-fasta-indices.py --REFERENCE /path/to/reference.ext  --dict  --fai",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "markop",
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-fasta-indices:1.0",
            "dockerImageId": "b177f5bd06db"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 2500
          }
        ],
        "sbg:createdOn": 1450911283,
        "arguments": [
          {
            "valueFrom": "--dict",
            "separate": true
          },
          {
            "valueFrom": "--fai",
            "separate": true
          }
        ],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 733.3336788416034,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2500,
            "cpu": 1
          },
          "inputs": {
            "reference": {
              "size": 0,
              "class": "File",
              "path": "/path/to/reference.ext",
              "secondaryFiles": []
            }
          }
        },
        "description": "Tool allows creating FASTA dictionary and index simultaneously which is necessary for running GATK tools. This version of tool for indexing uses SAMtools faidx command (toolkit version0.1.19), while for the FASTA dictionary is used Picard CreateFastaDictionary (toolkit version 1.140)",
        "y": 368.3333593606951,
        "sbg:modifiedOn": 1458669249,
        "sbg:categories": [
          "Indexing"
        ],
        "sbg:latestRevision": 5,
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG FASTA Indices",
        "sbg:toolAuthor": "Sanja Mijalkovic, Seven Bridges Genomics, <sanja.mijalkovic@sbgenomics.com>",
        "id": "bix-demo/sbgtools-demo/sbg-fasta-indices/5",
        "sbg:modifiedBy": "markop",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:revision": 5,
        "successCodes": [],
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911283,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911283,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1458655509,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1458655251,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1458658019,
            "sbg:modifiedBy": "markop"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1458669249,
            "sbg:modifiedBy": "markop"
          }
        ],
        "inputs": [
          {
            "description": "FASTA file to be indexed",
            "type": [
              "File"
            ],
            "required": true,
            "label": "FASTA file",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--REFERENCE",
              "separate": true
            },
            "sbg:stageInput": "link",
            "id": "#reference"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-fasta-indices/0"
      },
      "outputs": [
        {
          "id": "#SBG_FASTA_Indices.fasta_reference"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_index"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_dict"
        }
      ],
      "sbg:x": 733.3336788416034,
      "inputs": [
        {
          "source": [
            "#SBG_Untar_fasta.output_fasta"
          ],
          "id": "#SBG_FASTA_Indices.reference"
        }
      ],
      "sbg:y": 368.3333593606951,
      "id": "#SBG_FASTA_Indices"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "python",
          "/opt/sbg_html_to_b64.py"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Output file, b64html.",
            "type": [
              "null",
              "File"
            ],
            "label": "B64html",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_file",
              "sbg:metadata": {},
              "glob": "*b64html"
            },
            "sbg:fileTypes": "HTML, B64HTML",
            "id": "#b64html"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "python /opt/sbg_html_to_b64.py",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [],
        "sbg:toolkitVersion": "1.0",
        "sbg:createdOn": 1450911294,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 349.33335738711946,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "input_file": {
              "size": 0,
              "class": "File",
              "path": "input_file.ext",
              "secondaryFiles": []
            }
          }
        },
        "description": "Tool for converting archived html output of FastQC and similar tools to b64html so it can easily be displayed in web browsers or on SBG platform.",
        "y": 442.3333612812897,
        "sbg:modifiedOn": 1459963571,
        "sbg:categories": [
          "Converters",
          "Plotting-and-Rendering"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/sbg-html-to-b64:1.0.1",
            "dockerImageId": "8c35d2a2d8d1"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Html2b64",
        "sbg:toolAuthor": "Seven Bridges",
        "id": "bix-demo/sbgtools-demo/sbg-html2b64/2",
        "sbg:modifiedBy": "bix-demo",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:revision": 2,
        "successCodes": [],
        "sbg:latestRevision": 2,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911294,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911294,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1459963571,
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "Compressed archive.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Input file",
            "sbg:category": "File input.",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input",
              "separate": true
            },
            "sbg:fileTypes": "ZIP",
            "id": "#input_file"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-html2b64/0"
      },
      "scatter": "#SBG_Html2b64.input_file",
      "outputs": [
        {
          "id": "#SBG_Html2b64.b64html"
        }
      ],
      "sbg:x": 349.33335738711946,
      "inputs": [
        {
          "source": [
            "#FastQC.report_zip"
          ],
          "id": "#SBG_Html2b64.input_file"
        }
      ],
      "sbg:y": 442.3333612812897,
      "id": "#SBG_Html2b64"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "label": "SBG Untar fasta",
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Unpacked fasta file from the input archive.",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_tar_with_reference",
              "glob": "{*.fasta,*.fa,*.fa.gz,*.fasta.gz}"
            },
            "type": [
              "File"
            ],
            "id": "#output_fasta",
            "label": "Unpacked fasta file"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "echo Passing input file",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "vladimirk",
          "bix-demo"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "v1.0",
        "sbg:createdOn": 1466002722,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 293.3333436648053,
        "sbg:homepage": "https://igor.sbgenomics.com/",
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "input_tar_with_reference": {
              "size": 0,
              "class": "File",
              "path": "input_file.fasta",
              "secondaryFiles": []
            }
          }
        },
        "description": "SBG Untar fasta outputs FA/FASTA/FA.GZ/FASTA.GZ from TAR.",
        "y": -95.57292397444452,
        "sbg:modifiedOn": 1466077480,
        "sbg:categories": [
          "Other"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/markop/sbg-decompressor:1.0",
            "dockerImageId": "58b79c627f95"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "baseCommand": [
          {
            "script": "{\n  reference_file = $job.inputs.input_tar_with_reference.path.split('/')[$job.inputs.input_tar_with_reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'tar -xf ' + reference_file    \n  }\n  else{\n    return 'echo Passing input file '\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:toolAuthor": "Vladimir Kovacevic, Seven Bridges Genomics",
        "id": "bix-demo/sbgtools-demo/sbg-untar-fasta/7",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:revision": 7,
        "successCodes": [],
        "sbg:latestRevision": 7,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1466002722,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1466003214,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1466004710,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1466004986,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1466005081,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1466005599,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1466007588,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1466077480,
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "The input archive file to be unpacked.",
            "sbg:stageInput": "link",
            "required": true,
            "label": "Input archive file with fasta",
            "type": [
              "File"
            ],
            "id": "#input_tar_with_reference",
            "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-untar-fasta/0"
      },
      "outputs": [
        {
          "id": "#SBG_Untar_fasta.output_fasta"
        }
      ],
      "sbg:x": 293.3333436648053,
      "inputs": [
        {
          "source": [
            "#reference"
          ],
          "id": "#SBG_Untar_fasta.input_tar_with_reference"
        }
      ],
      "sbg:y": -95.57292397444452,
      "id": "#SBG_Untar_fasta"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          {
            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    index_cmd = '/opt/bwa-0.7.13/bwa index '+ reference_file + ' '\n    return index_cmd\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "TARed fasta with its BWA indices.",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reference",
              "glob": {
                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              }
            },
            "type": [
              "null",
              "File"
            ],
            "label": "TARed fasta with its BWA indices",
            "fileTypes": "TAR",
            "sbg:fileTypes": "TAR",
            "id": "#indexed_reference"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "/opt/bwa-0.7.13/bwa index reference.fasta   -a bwtsw      -6    ; tar -cf reference.fasta.tar reference.fasta *.amb *.ann *.bwt *.pac *.sa",
        "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
        "sbg:contributors": [
          "vladimirk"
        ],
        "cwlVersion": "sbg:draft-2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "0.7.13",
        "sbg:createdOn": 1458658817,
        "arguments": [
          {
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa' \n    return ' ; ' + tar_cmd\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "GNU Affero General Public License v3.0, MIT License",
        "class": "CommandLineTool",
        "x": 580.3333612283075,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1536,
            "cpu": 1
          },
          "inputs": {
            "prefix_of_the_index_to_be_output": "prefix",
            "bwt_construction": "bwtsw",
            "total_memory": null,
            "add_64_to_fasta_name": true,
            "reference": {
              "size": 0,
              "class": "File",
              "path": "/path/to/the/reference.fasta",
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ]
            },
            "block_size": 0
          }
        },
        "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.",
        "y": 28.333334326744097,
        "sbg:modifiedOn": 1469449858,
        "sbg:categories": [
          "Indexing",
          "FASTA-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13",
            "dockerImageId": "2f813371e803"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "BWA",
        "label": "BWA INDEX",
        "sbg:toolAuthor": "Heng Li",
        "id": "vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-index/15",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "vladimirk",
        "sbg:links": [
          {
            "id": "http://bio-bwa.sourceforge.net/",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lh3/bwa",
            "label": "Source code"
          },
          {
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/bio-bwa/",
            "label": "Download"
          },
          {
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
            "label": "Publication"
          }
        ],
        "sbg:revision": 15,
        "successCodes": [],
        "sbg:latestRevision": 15,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1458658817,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1458658836,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1458745340,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1460643813,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1462801955,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1465227109,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1465231882,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1465990497,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1465992672,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1465993183,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1465994793,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1466070064,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 12,
            "sbg:modifiedOn": 1466071727,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 13,
            "sbg:modifiedOn": 1466072504,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 14,
            "sbg:modifiedOn": 1466077580,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 15,
            "sbg:modifiedOn": 1469449858,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference).",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "int"
            ],
            "id": "#total_memory",
            "label": "Total memory [Gb]"
          },
          {
            "description": "Input reference fasta of TAR file with reference and indices.",
            "sbg:stageInput": "link",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference",
            "sbg:category": "File input",
            "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
            "id": "#reference"
          },
          {
            "description": "Prefix of the index [same as fasta name].",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "string"
            ],
            "id": "#prefix_of_the_index_to_be_output",
            "label": "Prefix of the index to be output"
          },
          {
            "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes.",
            "type": [
              "null",
              {
                "name": "bwt_construction",
                "type": "enum",
                "symbols": [
                  "bwtsw",
                  "is",
                  "div"
                ]
              }
            ],
            "sbg:toolDefaultValue": "auto",
            "label": "Bwt construction",
            "sbg:category": "Configuration",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-a",
              "separate": true
            },
            "id": "#bwt_construction"
          },
          {
            "description": "Block size for the bwtsw algorithm (effective with -a bwtsw).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "10000000",
            "label": "Block size",
            "sbg:category": "Configuration",
            "id": "#block_size"
          },
          {
            "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*.",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#add_64_to_fasta_name",
            "label": "Output index files renamed by adding 64"
          }
        ],
        "sbg:id": "admin/sbg-public-data/bwa-index/0"
      },
      "outputs": [
        {
          "id": "#BWA_INDEX.indexed_reference"
        }
      ],
      "sbg:x": 580.3333612283075,
      "inputs": [
        {
          "id": "#BWA_INDEX.total_memory"
        },
        {
          "source": [
            "#reference"
          ],
          "id": "#BWA_INDEX.reference"
        },
        {
          "id": "#BWA_INDEX.prefix_of_the_index_to_be_output"
        },
        {
          "id": "#BWA_INDEX.bwt_construction"
        },
        {
          "id": "#BWA_INDEX.block_size"
        },
        {
          "id": "#BWA_INDEX.add_64_to_fasta_name"
        }
      ],
      "sbg:y": 28.333334326744097,
      "id": "#BWA_INDEX"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "python",
          "pair_fastqs_by_metadata.py"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "id": "#tuple_list"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "python pair_fastqs_by_metadata.py --fastq_list /asda/dsa/sda/sda/fasta1.fastq,/asda/dsa/sda/sda/fasta2.fastq,/asda/dsa/sda/sda/fasta3.fastq,/asda/dsa/sda/sda/fasta4.fastq --in_metafile job.json --out_metafile cwl.output.json",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "vladimirk",
          "bix-demo",
          "markop"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-pair-fastqs-by-metadata/5",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "filename": "pair_fastqs_by_metadata.py",
                "fileContent": "import functools\nimport json\nimport itertools\nimport docopt\nimport types\nUSAGE = \"\"\"\n    Usage:\n    \tsbg_pair_fastqs_by_metadata.py --fastq_list FILE... --in_metafile FILE --out_metafile FILE [options]\n\n    Description:\n        Tool accepts list of FATSQ files for one sample as the input and groups them into pairs\n        (two files for each paired end). This grouping is done using metadata values that are creating\n        unique combination for each pair or of FASTQ files. Metadata that fields that are uniquely defining\n        one FASTQ pair are Sample ID, Library ID, Platform Unit ID and File Segment Number. Listed order of metadata fields is also\n        representing their hierarchy in the metadata structure. Not all of these four metadata fields are required,\n        but the present set has to be sufficient to create unique combinations for each pair of FASTQ files.\n\n    Options:\n\n        --help                                Show help dialog.\n\n        --version                             Tool version.\n\n        --fatsq_list FILE...                  List of the FASTQ files with properly set metadata fileds.\n\n        --in_metafile FILE                    File from which necessary metadata information will be extracted.\n                                              Expected value for the SBG platfrom is job.json. [Default: job.json]\n\n        --out_metafile FILE                   File into which necessary file structure is going to be written.\n                                              Expected value for the SBG platform is cwl.output.json.\n                                              [Default: cwl.output.json]\n\n\n\"\"\"\n\ndef make_rg_id(metadata_key, input1):\n\n    input_meta = input1.values()[0]\n\n    S = '__!__'\n    rg = list()\n    for key in ['sample_group', 'sample_id', 'library_id', 'platform_unit_id']:\n        if key in input_meta:\n            rg.append(input_meta[key])\n        else:\n            rg.append('')\n    if 'file_segment_number' in input_meta and input_meta['file_segment_number'] is not None:\n        rg.append(str(input_meta['file_segment_number']))\n    else:\n        rg.append('')\n\n    rg_map = {\n        'sample_id': rg[:2],\n        'library_id': rg[:3],\n        'platform_unit_id': rg[:4],\n        'file_segment_number': rg[:5],\n    }\n\n    return S.join(rg_map[metadata_key]) if metadata_key in rg_map else getattr(input_meta, metadata_key)\n\n\ndef group_inputs(inp):\n\n    metadata_key = 'file_segment_number'\n    if str(metadata_key) == 'None':\n        return {'': [f for f in inp]}\n    if metadata_key == 'file':\n        return {f: [f] for f in inp}\n    key_getter = functools.partial(make_rg_id, metadata_key)\n    print inp\n    files = sorted([x for x in inp], key=key_getter)\n    tuple_list_temp = [[f for f in val] for key, val in itertools.groupby(files, key_getter)]\n    tuple_list=list()\n    for elem in tuple_list_temp:\n        for key in elem[0].keys():\n            if len(files) != 1:\n                if elem[0][key]['paired_end'] == \"2\":\n                    tuple_list.append([str(elem[1].keys()[0]), str(elem[0].keys()[0])])\n                else:\n                    tuple_list.append([str(elem[0].keys()[0]), str(elem[1].keys()[0])])\n            else:\n                    tuple_list.append([str(elem[0].keys()[0])])\n\n    print tuple_list\n    return tuple_list\n\ndef main():\n\n    args = docopt.docopt(USAGE, version = 1.0)\n\n    job_json = args[\"--in_metafile\"]\n    job_json_file = open(job_json)\n    job_json_str = job_json_file.read()\n    job_json_dict = json.loads(job_json_str)\n    fastq_list = job_json_dict['inputs'][\"fastq_list\"]\n    if isinstance(fastq_list, list):\n        fastq_list = job_json_dict['inputs'][\"fastq_list\"]\n    else:\n        fastq_list = list()\n        fastq_list.append(job_json_dict['inputs'][\"fastq_list\"])\n    file_list = [{elem['path'] : elem['metadata']} for elem in fastq_list]\n    tuple_list = group_inputs(file_list)\n\n    for elem in tuple_list:\n        for i in range(0,len(elem)):\n            elem[i] = {\"class\": \"File\", \"path\": elem[i]}\n\n\n    tuple_list_dict = {\"tuple_list\": tuple_list}\n    with open(args[\"--out_metafile\"], 'w') as p:\n        json.dump(tuple_list_dict, p)\n\nif __name__ == '__main__':\n    main()"
              }
            ]
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-pair-fastqs-by-metadata:1.0",
            "dockerImageId": "d41a0837ab81"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1024
          }
        ],
        "sbg:createdOn": 1450911289,
        "arguments": [
          {
            "valueFrom": "job.json",
            "prefix": "--in_metafile",
            "position": 1,
            "separate": true
          },
          {
            "valueFrom": "cwl.output.json",
            "prefix": "--out_metafile",
            "position": 2,
            "separate": true
          }
        ],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 752.3333843019286,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1024,
            "cpu": 1
          },
          "inputs": {
            "fastq_list": [
              {
                "size": 0,
                "class": "File",
                "path": "/asda/dsa/sda/sda/fasta1.fastq",
                "secondaryFiles": []
              },
              {
                "path": "/asda/dsa/sda/sda/fasta2.fastq"
              },
              {
                "path": "/asda/dsa/sda/sda/fasta3.fastq"
              },
              {
                "path": "/asda/dsa/sda/sda/fasta4.fastq"
              }
            ]
          }
        },
        "description": "Tool accepts list of FASTQ files for one sample as the input and groups them into pairs  (two files for each paired end). This grouping is done using metadata values that are creating unique combination for each pair or of FASTQ files. Metadata that fields that are uniquely defining one FASTQ pair are Sample ID, Library ID, Platform unit ID and File segment number. Listed order of metadata fields is also representing their hierarchy in the metadata structure. Not all of these four metadata fields are required, but the present set has to be sufficient to create unique combinations for each pair of FASTQ files.",
        "y": 256.33335844675776,
        "sbg:modifiedOn": 1472059795,
        "sbg:categories": [
          "Converters",
          "Other"
        ],
        "sbg:latestRevision": 5,
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Pair FASTQs by Metadata",
        "sbg:toolAuthor": "Djordje Klisic, Seven Bridges Genomics, <djordje.klisic@sbgenomics.com>",
        "sbg:revisionNotes": "Added support for single file.",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://cgc.sbgenomics.com/u/stefanristeski/group-fastqs/apps/#sbg-pair-fastqs-by-metadata/9",
            "label": "Homepage"
          }
        ],
        "sbg:revision": 5,
        "successCodes": [],
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911289,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911290,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911290,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1463403276,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1469015151,
            "sbg:revisionNotes": "Link fastq_list",
            "sbg:modifiedBy": "markop"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1472059795,
            "sbg:revisionNotes": "Added support for single file.",
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "List of the FASTQ files with properly set metadata fileds.",
            "sbg:stageInput": "link",
            "required": true,
            "label": "List of FASTQ files",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--fastq_list",
              "position": 0,
              "itemSeparator": ",",
              "separate": true
            },
            "type": [
              {
                "name": "fastq_list",
                "type": "array",
                "items": "File"
              }
            ],
            "id": "#fastq_list",
            "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-pair-fastqs-by-metadata/1",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
        }
      ],
      "sbg:x": 752.3333843019286,
      "inputs": [
        {
          "source": [
            "#SBG_FASTQ_Quality_Adjuster.result"
          ],
          "id": "#SBG_Pair_FASTQs_by_Metadata.fastq_list"
        }
      ],
      "sbg:y": 256.33335844675776,
      "id": "#SBG_Pair_FASTQs_by_Metadata"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          {
            "script": "{\n  return 'unzip -o ' + $job.inputs.database.path + ' -d /opt/snpEff ;'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "java",
          {
            "script": "{\n  //java -Xmx4g path/to/snpEff/snpEff.jar -c path/to/snpEff/snpEff.config GRCh37.75 path/to/snps.vcf\n  if($job.inputs.total_memory){\n    mem_mb = parseInt($job.inputs.total_memory) * 1024\n  \treturn '-Xmx'.concat(mem_mb, 'M')\n  }\n  \treturn '-Xmx4096M'\n}\n\n",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/snpEff/snpEff.jar"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "SnpEff Summary in text format.",
            "type": [
              "null",
              "File"
            ],
            "label": "Summary",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants_file",
              "glob": "*.txt"
            },
            "sbg:fileTypes": "TXT",
            "id": "#summary_text"
          },
          {
            "description": "SnpEff summary file in HTML or CSV file format.",
            "type": [
              "null",
              "File"
            ],
            "label": "Summary file",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants_file",
              "glob": "*.html"
            },
            "sbg:fileTypes": "HTML, CSV",
            "id": "#summary"
          },
          {
            "description": "SnpEff Annotated file.",
            "type": [
              "null",
              "File"
            ],
            "label": "SnpEff Annotated file",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#variants_file",
              "sbg:metadata": {},
              "glob": {
                "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    return basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    return basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    return basename.concat(\".snpEff_annotated.vcf\")\n  }\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              }
            },
            "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
            "id": "#annotated"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "unzip -o /path/to/database/GRCh37.75.zip -d /opt/snpEff ; java -Xmx3072M -jar /opt/snpEff/snpEff.jar  -nodownload  -noLog  GRCh37.75  path/to/variance/varinats_file.vcf  > varinats_file.snpEff_annotated.vcf",
        "sbg:project": "vladimirk/snpeff-4-2-demo",
        "sbg:contributors": [
          "vladimirk"
        ],
        "id": "vladimirk/snpeff-4-2-demo/snpeff-4-2/23",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "4.2",
        "sbg:createdOn": 1459258963,
        "arguments": [
          {
            "valueFrom": {
              "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    name = basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    name = basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    name = basename.concat(\".snpEff_annotated.vcf\")\n  }\n  return '> ' + name\n}\n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 5000,
            "separate": true
          },
          {
            "valueFrom": "-nodownload",
            "position": 0,
            "separate": true
          },
          {
            "valueFrom": "-noLog",
            "position": 0,
            "separate": true
          }
        ],
        "sbg:license": "GNU Lesser General Public License v3.0 only",
        "class": "CommandLineTool",
        "x": 3451.667128947061,
        "sbg:job": {
          "allocatedResources": {
            "mem": 3072,
            "cpu": 1
          },
          "inputs": {
            "output_format": "vcf",
            "no_motif": false,
            "oicr": false,
            "stats": "",
            "up_down_stream_len": null,
            "interaction": false,
            "nostats": false,
            "splice_region_exons_size": null,
            "variants_file": {
              "size": 0,
              "class": "File",
              "path": "path/to/variance/varinats_file.vcf",
              "secondaryFiles": []
            },
            "no_next_prot": false,
            "no_hgvs": false,
            "max_tsl": null,
            "interval": {
              "size": 0,
              "class": "File",
              "path": "/path/to/interval.ext",
              "secondaryFiles": []
            },
            "threads": true,
            "classic": false,
            "total_memory": 3,
            "strict": false,
            "no_lof": false,
            "hgvs_1_letter": false,
            "hgvs_tr_id": false,
            "database": {
              "metadata": {},
              "path": "/path/to/database/GRCh37.75.zip",
              "secondaryFiles": []
            },
            "csvstats": false,
            "only_protein": false,
            "no_shift_hgvs": false,
            "configuration_file": {
              "size": 0,
              "class": "File",
              "path": null,
              "secondaryFiles": []
            },
            "format_eff": false,
            "no_interaction": false,
            "input_format": "vcf",
            "no_genome": false
          }
        },
        "description": "SnpEff is a variant annotation and effect prediction\u200b tool. It annotates and predicts the effects of variants on genes, such as amino acid changes.\n\nTypical usage assumes the user chooses inputs that are predicted variants (SNPs, insertions, deletions, and MNPs). This input file is usually the result of a sequencing experiment, and it is usually in variant call format (VCF). SnpEff analyzes the input variants and, in the process, it annotates the variants and calculates the effects they produce on known genes (e.g. amino acid changes). The output file can be in several file formats. The most common format is VCF.\n\nThere is also a command line option to control the amount of RAM in MB [-Xmx%m] for java, which is a custom parameter.\nCommon issues:\n- Name of the snpEff file with database must contain the name that exactly relates to the reference that it is for (e.g. GRCh37.75.zip, hg19.zip).",
        "y": 269.4271676577653,
        "sbg:modifiedOn": 1472212308,
        "sbg:categories": [
          "Annotation",
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/snpeff:4.2",
            "dockerImageId": "aae3dcb89b53"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if ($job.inputs.total_memory)\n  {\n    return $job.inputs.total_memory * 1024\n  }\n  \n  else\n  {\n    return 4096\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SnpEff",
        "label": "SnpEff",
        "sbg:toolAuthor": "Pablo Cingolani/Broad Institue",
        "sbg:revisionNotes": "typos",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "vladimirk",
        "sbg:links": [
          {
            "id": "http://snpeff.sourceforge.net/index.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/pcingola/SnpEff",
            "label": "Source Code"
          },
          {
            "id": "http://snpeff.sourceforge.net/SnpEff_manual.html",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip",
            "label": "Download"
          },
          {
            "id": "http://snpeff.sourceforge.net/SnpEff_paper.pdf",
            "label": "Publication"
          }
        ],
        "sbg:revision": 23,
        "successCodes": [],
        "sbg:latestRevision": 23,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1459258963,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1459268644,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1459334075,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1459344734,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1459346778,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1459349594,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1459350669,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1459352131,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1459353590,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1460986857,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1460989537,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1460994055,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 12,
            "sbg:modifiedOn": 1461079628,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 13,
            "sbg:modifiedOn": 1461145387,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 14,
            "sbg:modifiedOn": 1461146419,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 15,
            "sbg:modifiedOn": 1461857375,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 16,
            "sbg:modifiedOn": 1461857546,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 17,
            "sbg:modifiedOn": 1464273953,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 18,
            "sbg:modifiedOn": 1464279085,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 19,
            "sbg:modifiedOn": 1464625627,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 20,
            "sbg:modifiedOn": 1471007312,
            "sbg:revisionNotes": "typos",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 21,
            "sbg:modifiedOn": 1472209344,
            "sbg:revisionNotes": "Peer-review comments implemented.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 22,
            "sbg:modifiedOn": 1472209772,
            "sbg:revisionNotes": "Peer-review comments and typos implemented.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 23,
            "sbg:modifiedOn": 1472212308,
            "sbg:revisionNotes": "typos",
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "Input variants file.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Input variants file",
            "sbg:category": "File type inputs",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 2001,
              "separate": true
            },
            "sbg:fileTypes": "VCF, TXT, PILEUP, BED",
            "id": "#variants_file"
          },
          {
            "description": "Set upstream downstream interval length (in bases).",
            "sbg:stageInput": null,
            "label": "Upstream downstream interval length",
            "sbg:category": "Database optins",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-upDownStreamLen",
              "position": 490,
              "separate": true
            },
            "type": [
              "null",
              "int"
            ],
            "id": "#up_down_stream_len"
          },
          {
            "description": "RAM requirement for the java process execution [Gb].",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Java Xmx%m requirement [Gb]",
            "sbg:category": "Other input types",
            "id": "#total_memory"
          },
          {
            "description": "Use multiple threads (implies '-noStats'). Default: False.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "FALSE",
            "label": "Use multiple threads (implies '-noStats')",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-t",
              "position": 280,
              "separate": true
            },
            "id": "#threads"
          },
          {
            "description": "Only use 'validated' transcripts (i.e. sequence has been checked). Default: false.",
            "sbg:stageInput": null,
            "label": "Only use validated transcripts",
            "sbg:category": "Database optins",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-strict",
              "position": 480,
              "separate": true
            },
            "type": [
              "null",
              "boolean"
            ],
            "id": "#strict"
          },
          {
            "description": "Name of stats file (summary).",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "snpEff_summary.html",
            "label": "Name of stats file (summary)",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-stats",
              "position": 60,
              "separate": true
            },
            "sbg:category": "Other input types",
            "sbg:altPrefix": "-s",
            "id": "#stats"
          },
          {
            "description": "Set size for splice sites (donor and acceptor) in bases.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2",
            "label": "Set size for splice sites (donor and acceptor) in bases",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--spliceSiteSize",
              "position": 430,
              "separate": true
            },
            "sbg:category": "Other input types",
            "sbg:altPrefix": "-ss",
            "id": "#splicesitesize"
          },
          {
            "description": "Set size for splice site region within exons. Default: 3 bases.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "3",
            "label": "Set size for splice site region within exons",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-spliceRegionExonSize",
              "position": 440,
              "separate": true
            },
            "id": "#splice_region_exons_size"
          },
          {
            "description": "Use Sequence Ontology terms. Default: false.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "FALSE",
            "label": "Use Sequence Ontology terms",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-sequenceOntology",
              "position": 250,
              "separate": true
            },
            "id": "#sequenceontology"
          },
          {
            "description": "Regulation track to use (this option can be used add several times).",
            "type": [
              "null",
              {
                "name": "reg",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "label": "Regulation track to use (this option can be used add several times)",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-reg",
              "position": 420,
              "itemSeparator": null,
              "separate": true
            },
            "id": "#reg"
          },
          {
            "description": "Ouput format. Possible values: {txt, vcf, gatk, bed, bedAnn}.",
            "type": [
              "null",
              {
                "name": "output_format",
                "type": "enum",
                "symbols": [
                  "txt",
                  "vcf",
                  "gatk",
                  "bed",
                  "bedAnn"
                ]
              }
            ],
            "sbg:toolDefaultValue": "vcf",
            "label": "Ouput format",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-o",
              "position": 50,
              "separate": true
            },
            "id": "#output_format"
          },
          {
            "description": "Only use regulation tracks.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Only use regulation tracks",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--onlyReg",
              "position": 400,
              "separate": true
            },
            "id": "#onlyreg"
          },
          {
            "description": "Only use protein coding transcripts. Default: false.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "FALSE",
            "label": "Only protein",
            "sbg:category": "Database optins",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-onlyProtein",
              "position": 410,
              "separate": true
            },
            "id": "#only_protein"
          },
          {
            "description": "Add OICR tag in VCF file. Default: false.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "FALSE",
            "label": "Add OICR tag in VCF file",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-oicr",
              "position": 240,
              "separate": true
            },
            "id": "#oicr"
          },
          {
            "description": "Do not create stats (summary) file.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Do not create stats (summary) file",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noStats",
              "position": 70,
              "separate": true
            },
            "id": "#nostats"
          },
          {
            "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-no-utr",
              "position": 130,
              "separate": true
            },
            "id": "#no_utr"
          },
          {
            "description": "Do not show UPSTREAM changes.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Do not show UPSTREAM changes",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-no-upstream",
              "position": 120,
              "separate": true
            },
            "id": "#no_upstream"
          },
          {
            "description": "Do not shift variants according to HGVS notation (most 3prime end).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Do not shift variants according to HGVS",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noShiftHgvs",
              "position": 230,
              "separate": true
            },
            "sbg:stageInput": null,
            "id": "#no_shift_hgvs"
          },
          {
            "description": "Disable NextProt annotations.",
            "sbg:stageInput": null,
            "label": "Disable NextProt annotations",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noNextProt",
              "position": 390,
              "separate": true
            },
            "type": [
              "null",
              "boolean"
            ],
            "id": "#no_next_prot"
          },
          {
            "description": "Disable motif annotations.",
            "sbg:stageInput": null,
            "label": "Disable motif annotations",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noMotif",
              "position": 380,
              "separate": true
            },
            "type": [
              "null",
              "boolean"
            ],
            "id": "#no_motif"
          },
          {
            "description": "Do not add LOF and NMD annotations.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Do not add LOF and NMD annotations",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noLof",
              "position": 220,
              "separate": true
            },
            "id": "#no_lof"
          },
          {
            "description": "Do not show INTRON changes.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Do not show INTRON changes",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-no-intron",
              "position": 110,
              "separate": true
            },
            "id": "#no_intron"
          },
          {
            "description": "Do not show INTERGENIC changes.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Do not show INTERGENIC changes",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-no-intergenic",
              "position": 100,
              "separate": true
            },
            "id": "#no_intergenic"
          },
          {
            "description": "Disable interaction annotations. Default: false.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "FALSE",
            "label": "Disable interaction annotations",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noInteraction",
              "position": 370,
              "separate": true
            },
            "id": "#no_interaction"
          },
          {
            "description": "Do not add HGVS annotations.",
            "sbg:stageInput": null,
            "label": "Do not add HGVS annotations",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noHgvs",
              "position": 210,
              "separate": true
            },
            "type": [
              "null",
              "boolean"
            ],
            "id": "#no_hgvs"
          },
          {
            "description": "Do not load any genomic database (e.g. annotate using custom files).",
            "sbg:stageInput": null,
            "label": "Do not load any genomic database",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-noGenome",
              "position": 360,
              "separate": true
            },
            "type": [
              "null",
              "boolean"
            ],
            "id": "#no_genome"
          },
          {
            "description": "Do not show DOWNSTREAM changes.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Do not show DOWNSTREAM changes",
            "sbg:category": "Results filter options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-no-downstream",
              "position": 90,
              "separate": true
            },
            "id": "#no_downstream"
          },
          {
            "description": "Annotate using NextProt (requires NextProt database).",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Annotate using NextProt (requires NextProt database)",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-nextProt",
              "position": 350,
              "separate": true
            },
            "id": "#nextprot"
          },
          {
            "description": "Annotate using motifs (requires Motif database).",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Annotate using motifs (requires Motif database)",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--motif",
              "position": 340,
              "separate": true
            },
            "id": "#motif"
          },
          {
            "description": "Only use transcripts having Transcript Support Level lower than <TSL_number>.",
            "sbg:stageInput": null,
            "label": "Max TSL",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-maxTSL",
              "position": 330,
              "separate": true
            },
            "type": [
              "null",
              "int"
            ],
            "id": "#max_tsl"
          },
          {
            "description": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).",
            "sbg:stageInput": "link",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-interval",
              "position": 320,
              "separate": true
            },
            "sbg:fileTypes": "interval",
            "id": "#interval"
          },
          {
            "description": "Annotate using inteactions (requires interaciton database). Default: true.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "TRUE",
            "label": "Annotate using interactions",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-interaction",
              "position": 310,
              "separate": true
            },
            "id": "#interaction"
          },
          {
            "description": "Input format. Possible values: {vcf, txt, pileup, bed}. [Default: vcf].",
            "type": [
              "null",
              {
                "name": "input_format",
                "type": "enum",
                "symbols": [
                  "vcf",
                  " txt",
                  " pileup",
                  " bed"
                ]
              }
            ],
            "sbg:toolDefaultValue": "vcf",
            "label": "Input format",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-i",
              "position": 40,
              "separate": true
            },
            "id": "#input_format"
          },
          {
            "description": "Use transcript ID in HGVS notation. Default: false.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Use transcript ID in HGVS",
            "sbg:category": "Configuration",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-hgvsTrId",
              "position": 190,
              "separate": true
            },
            "id": "#hgvs_tr_id"
          },
          {
            "description": "Use one letter Amino acid codes in HGVS notation. Default: false.",
            "sbg:stageInput": null,
            "label": "Use one letter Amino acid codes in HGVS",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-hgvs1LetterAa",
              "position": 180,
              "separate": true
            },
            "type": [
              "null",
              "boolean"
            ],
            "id": "#hgvs_1_letter"
          },
          {
            "description": "Use gene ID instead of gene name (VCF output). Default: false.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "FALSE",
            "label": "Use gene ID instead of gene name (VCF output)",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-geneId",
              "position": 170,
              "separate": true
            },
            "id": "#geneid"
          },
          {
            "description": "Use 'EFF' field compatible with older versions (instead of 'ANN').",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Use EFF field",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-formatEff",
              "position": 160,
              "separate": true
            },
            "id": "#format_eff"
          },
          {
            "description": "Only analyze changes that intersect with the intervals specified in this file.",
            "type": [
              "null",
              {
                "name": "filterinterval",
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--filterInterval",
              "position": 80,
              "separate": true
            },
            "sbg:category": "Results filter options",
            "sbg:altPrefix": "-fi",
            "sbg:fileTypes": "interval",
            "id": "#filterinterval"
          },
          {
            "description": "SnpEff database file is zip archive that can be downloaded from the SnpEff official site, or using the SnpEff download app.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "SnpEff database file",
            "sbg:category": "File type inputs",
            "inputBinding": {
              "valueFrom": {
                "script": "{\n  input_database = $job.inputs.database\n  full_name = input_database.path.split('/')[input_database.path.split('/').length-1] \n  name = full_name.slice(0, -4) // Cut .zip extension\n  return name\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "sbg:cmdInclude": true,
              "position": 2000,
              "separate": true
            },
            "sbg:fileTypes": "ZIP",
            "id": "#database"
          },
          {
            "description": "Create CSV summary file instead of HTML.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Create CSV summary file instead of HTML",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-csvStats",
              "position": 20,
              "separate": true
            },
            "id": "#csvstats"
          },
          {
            "description": "Specify config file.",
            "sbg:stageInput": "link",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Configuration file",
            "sbg:category": "Generic options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-c",
              "position": 260,
              "separate": true
            },
            "sbg:fileTypes": "config",
            "id": "#configuration_file"
          },
          {
            "description": "Use old style annotations instead of Sequence Ontology and Hgvs.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Use old style annotations",
            "sbg:category": "General options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--classic",
              "position": 10,
              "separate": true
            },
            "id": "#classic"
          },
          {
            "description": "Only use canonical transcripts.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Only use canonical transcripts",
            "sbg:category": "Database options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-canon",
              "position": 300,
              "separate": true
            },
            "id": "#canon"
          },
          {
            "description": "Two column TXT file defining 'original \\t derived' samples.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Two column TXT file defining 'original and derived' samples",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-cancerSamples",
              "position": 150,
              "separate": true
            },
            "sbg:fileTypes": "TXT",
            "id": "#cancersamples"
          },
          {
            "description": "Perform 'cancer' comparisons (Somatic vs Germline).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "FALSE",
            "label": "Perform 'cancer' comparisons (Somatic vs Germline)",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-cancer",
              "position": 140,
              "separate": true
            },
            "id": "#cancer"
          },
          {
            "description": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags",
            "sbg:category": "Other input types",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-lof",
              "position": 200,
              "separate": true
            },
            "id": "#add_lof_tag"
          },
          {
            "description": "Use HGVS annotations for amino acid sub-field. Default: true.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "TRUE",
            "label": "Use HGVS annotations for amino acid sub-field",
            "sbg:category": "Annotations options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--hgvs",
              "position": 170,
              "separate": true
            },
            "id": "#add_hgvs_anno"
          }
        ],
        "sbg:id": "admin/sbg-public-data/snpeff-4-2/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SnpEff.summary_text"
        },
        {
          "id": "#SnpEff.summary"
        },
        {
          "id": "#SnpEff.annotated"
        }
      ],
      "sbg:x": 3451.667128947061,
      "inputs": [
        {
          "source": [
            "#GATK_ApplyRecalibration_1.vcf"
          ],
          "id": "#SnpEff.variants_file"
        },
        {
          "id": "#SnpEff.up_down_stream_len"
        },
        {
          "default": 10,
          "id": "#SnpEff.total_memory"
        },
        {
          "default": true,
          "id": "#SnpEff.threads"
        },
        {
          "id": "#SnpEff.strict"
        },
        {
          "id": "#SnpEff.stats"
        },
        {
          "id": "#SnpEff.splicesitesize"
        },
        {
          "id": "#SnpEff.splice_region_exons_size"
        },
        {
          "id": "#SnpEff.sequenceontology"
        },
        {
          "id": "#SnpEff.reg"
        },
        {
          "default": "vcf",
          "id": "#SnpEff.output_format"
        },
        {
          "id": "#SnpEff.onlyreg"
        },
        {
          "id": "#SnpEff.only_protein"
        },
        {
          "id": "#SnpEff.oicr"
        },
        {
          "id": "#SnpEff.nostats"
        },
        {
          "id": "#SnpEff.no_utr"
        },
        {
          "id": "#SnpEff.no_upstream"
        },
        {
          "id": "#SnpEff.no_shift_hgvs"
        },
        {
          "id": "#SnpEff.no_next_prot"
        },
        {
          "id": "#SnpEff.no_motif"
        },
        {
          "id": "#SnpEff.no_lof"
        },
        {
          "id": "#SnpEff.no_intron"
        },
        {
          "id": "#SnpEff.no_intergenic"
        },
        {
          "id": "#SnpEff.no_interaction"
        },
        {
          "id": "#SnpEff.no_hgvs"
        },
        {
          "id": "#SnpEff.no_genome"
        },
        {
          "id": "#SnpEff.no_downstream"
        },
        {
          "id": "#SnpEff.nextprot"
        },
        {
          "id": "#SnpEff.motif"
        },
        {
          "id": "#SnpEff.max_tsl"
        },
        {
          "id": "#SnpEff.interval"
        },
        {
          "id": "#SnpEff.interaction"
        },
        {
          "id": "#SnpEff.input_format"
        },
        {
          "id": "#SnpEff.hgvs_tr_id"
        },
        {
          "id": "#SnpEff.hgvs_1_letter"
        },
        {
          "id": "#SnpEff.geneid"
        },
        {
          "id": "#SnpEff.format_eff"
        },
        {
          "id": "#SnpEff.filterinterval"
        },
        {
          "source": [
            "#database_1"
          ],
          "id": "#SnpEff.database"
        },
        {
          "id": "#SnpEff.csvstats"
        },
        {
          "id": "#SnpEff.configuration_file"
        },
        {
          "id": "#SnpEff.classic"
        },
        {
          "id": "#SnpEff.canon"
        },
        {
          "id": "#SnpEff.cancersamples"
        },
        {
          "id": "#SnpEff.cancer"
        },
        {
          "id": "#SnpEff.add_lof_tag"
        },
        {
          "id": "#SnpEff.add_hgvs_anno"
        }
      ],
      "sbg:y": 269.4271676577653,
      "id": "#SnpEff"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/picard-tools-1.140/picard.jar",
          "CollectAlignmentSummaryMetrics"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "File to which the output will be written.",
            "type": [
              "File"
            ],
            "label": "Summary metrics",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_bam",
              "sbg:metadata": {},
              "secondaryFiles": [],
              "glob": "*.summary_metrics.txt"
            },
            "sbg:fileTypes": "TXT",
            "id": "#summary_metrics"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar CollectAlignmentSummaryMetrics INPUT=/root/folder/example.bam OUTPUT=example.summary_metrics.txt",
        "sbg:project": "bix-demo/picard-1-140-demo",
        "sbg:contributors": [
          "bix-demo"
        ],
        "id": "bix-demo/picard-1-140-demo/picard-collectalignmentsummarymetrics-1-140/3",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "1.140",
        "appUrl": "/u/bix-demo/picard-1-140-demo/apps/#bix-demo/picard-1-140-demo/picard-collectalignmentsummarymetrics-1-140/3",
        "arguments": [
          {
            "valueFrom": {
              "script": "{\n  if ($job.inputs.input_bam)\n  {\n    filename = [].concat($job.inputs.input_bam)[0].path\n    filebase = filename.split('.').slice(0, -1)\n\n    return filebase.concat(\"summary_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "prefix": "OUTPUT=",
            "position": 3,
            "separate": false
          }
        ],
        "sbg:license": "MIT License, Apache 2.0 Licence",
        "class": "CommandLineTool",
        "x": 2506.666847652864,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "input_bam": {
              "path": "/root/folder/example.bam"
            },
            "reference": {
              "path": "/root/directory/example.fasta"
            },
            "metric_accumulation_level": [
              "ALL_READS"
            ],
            "memory_per_job": 0
          }
        },
        "description": "Picard CollectAlignmentSummaryMetrics assesses the quality of alignment by analyzing a SAM or BAM file. It compares it with the reference file (FASTA) and provides alignment statistics, such as the number of input reads and the percent of reads that are mapped. It produces a file which contains summary alignment metrics from a SAM or BAM file.\n\nNote: This tool requires the exact same FASTA file as the one to which raw reads were aligned.",
        "y": -523.3333948188377,
        "sbg:modifiedOn": 1472811193,
        "sbg:categories": [
          "SAM/BAM-Processing",
          "Quality-Control",
          "Quantification"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140",
            "dockerImageId": "eab0e70b6629"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "Picard",
        "label": "Picard CollectAlignmentSummaryMetrics",
        "sbg:toolAuthor": "Broad Institute",
        "sbg:revisionNotes": "[].concat(input_bam)[0].path",
        "sbg:modifiedBy": "bix-demo",
        "sbg:createdOn": 1450911255,
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "http://broadinstitute.github.io/picard/index.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadinstitute/picard/releases/tag/1.140",
            "label": "Source Code"
          },
          {
            "id": "http://broadinstitute.github.io/picard/",
            "label": "Wiki"
          },
          {
            "id": "https://github.com/broadinstitute/picard/zipball/master",
            "label": "Download"
          },
          {
            "id": "http://broadinstitute.github.io/picard/",
            "label": "Publication"
          }
        ],
        "sbg:revision": 3,
        "successCodes": [],
        "sbg:latestRevision": 3,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911255,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911256,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911257,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1472811193,
            "sbg:revisionNotes": "[].concat(input_bam)[0].path",
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "type": [
              "null",
              {
                "name": "verbosity",
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ]
              }
            ],
            "required": false,
            "sbg:toolDefaultValue": "INFO",
            "label": "Verbosity",
            "sbg:category": "",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "VERBOSITY=",
              "position": 6,
              "separate": false
            },
            "id": "#verbosity"
          },
          {
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
            "type": [
              "null",
              {
                "name": "validation_stringency",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "required": false,
            "label": "Validation stringency",
            "inputBinding": {
              "valueFrom": {
                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "sbg:cmdInclude": true,
              "prefix": "VALIDATION_STRINGENCY=",
              "position": 4,
              "separate": false
            },
            "id": "#validation_stringency"
          },
          {
            "description": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value.",
            "type": [
              "null",
              "int"
            ],
            "required": false,
            "sbg:toolDefaultValue": "0",
            "label": "Stop after",
            "sbg:category": "",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "STOP_AFTER=",
              "position": 9,
              "separate": false
            },
            "id": "#stop_after"
          },
          {
            "description": "Reference sequence file. Note that while this argument is not required, without it only a small subset of the metrics will be calculated.  Default value: null.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Reference sequence",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "REFERENCE_SEQUENCE=",
              "position": 3,
              "separate": false
            },
            "sbg:category": "File inputs",
            "sbg:altPrefix": "R",
            "sbg:fileTypes": "FASTA",
            "id": "#reference"
          },
          {
            "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "type": [
              "null",
              {
                "name": "quiet",
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ]
              }
            ],
            "required": false,
            "sbg:toolDefaultValue": "false",
            "label": "Quiet",
            "sbg:category": "",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "QUIET=",
              "position": 4,
              "separate": false
            },
            "id": "#quiet"
          },
          {
            "description": "This parameter indicates the level(s) at which to accumulate metrics. Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "metric_accumulation_level",
                  "type": "enum",
                  "symbols": [
                    "ALL_READS",
                    "SAMPLE",
                    "LIBRARY",
                    "READ_GROUP"
                  ]
                }
              }
            ],
            "required": false,
            "sbg:toolDefaultValue": "ALL_READS",
            "label": "Metric accumulation level",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "METRIC_ACCUMULATION_LEVEL=",
              "position": 8,
              "itemSeparator": null,
              "separate": false
            },
            "sbg:category": "",
            "sbg:altPrefix": "LEVEL",
            "id": "#metric_accumulation_level"
          },
          {
            "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
            "type": [
              "null",
              "int"
            ],
            "required": false,
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "id": "#memory_per_job"
          },
          {
            "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
            "type": [
              "null",
              "int"
            ],
            "required": false,
            "sbg:toolDefaultValue": "500000",
            "label": "Max records in RAM",
            "sbg:category": "",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "MAX_RECORDS_IN_RAM=",
              "position": 4,
              "separate": false
            },
            "id": "#max_records_in_ram"
          },
          {
            "description": "Paired end reads above this insert size will be considered chimeric along with inter-chromosomal pairs. Default value: 100000. This option can be set to 'null' to clear the default value.",
            "type": [
              "null",
              "int"
            ],
            "required": false,
            "sbg:toolDefaultValue": "100000",
            "label": "Max insert size",
            "sbg:category": "",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "MAX_INSERT_SIZE=",
              "position": 9,
              "separate": false
            },
            "id": "#max_insert_size"
          },
          {
            "description": "This parameter indicates whether the SAM or BAM file consists of bisulfite sequenced reads. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "type": [
              "null",
              {
                "name": "is_bisulfite_sequenced",
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ]
              }
            ],
            "required": false,
            "sbg:toolDefaultValue": "false",
            "label": "Is bisulfite sequenced",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "BS=",
              "position": 8,
              "separate": false
            },
            "sbg:category": "",
            "sbg:altPrefix": "BS",
            "id": "#is_bisulfite_sequenced"
          },
          {
            "description": "Input SAM or BAM file.  Required.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Input file",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "INPUT=",
              "position": 0,
              "separate": false
            },
            "sbg:category": "File inputs",
            "sbg:altPrefix": "I",
            "sbg:fileTypes": "BAM, SAM",
            "id": "#input_bam"
          },
          {
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
            "type": [
              "null",
              "int"
            ],
            "required": false,
            "sbg:toolDefaultValue": "5",
            "label": "Compression level",
            "sbg:category": "",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "COMPRESSION_LEVEL=",
              "position": 4,
              "separate": false
            },
            "id": "#compression_level"
          },
          {
            "description": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "type": [
              "null",
              {
                "name": "assume_sorted",
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ]
              }
            ],
            "required": false,
            "sbg:toolDefaultValue": "true",
            "label": "Assume sorted",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "ASSUME_SORTED=",
              "separate": false
            },
            "sbg:category": "",
            "sbg:altPrefix": "AS",
            "id": "#assume_sorted"
          },
          {
            "description": "List of adapter sequences to use when processing the alignment metrics. Default value: [AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG]. This option can be set to 'null' to clear the default value. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "required": false,
            "sbg:toolDefaultValue": "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT",
            "label": "Adapter sequence",
            "sbg:category": "",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "ADAPTER_SEQUENCE=",
              "position": 8,
              "itemSeparator": null,
              "separate": false
            },
            "id": "#adapter_sequence"
          }
        ],
        "sbg:id": "admin/sbg-public-data/picard-collectalignmentsummarymetrics-1-140/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
        }
      ],
      "sbg:x": 2506.666847652864,
      "inputs": [
        {
          "default": "INFO",
          "id": "#Picard_CollectAlignmentSummaryMetrics.verbosity"
        },
        {
          "default": "SILENT",
          "id": "#Picard_CollectAlignmentSummaryMetrics.validation_stringency"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.stop_after"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#Picard_CollectAlignmentSummaryMetrics.reference"
        },
        {
          "default": "false",
          "id": "#Picard_CollectAlignmentSummaryMetrics.quiet"
        },
        {
          "default": [
            "ALL_READS"
          ],
          "id": "#Picard_CollectAlignmentSummaryMetrics.metric_accumulation_level"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.memory_per_job"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.max_records_in_ram"
        },
        {
          "default": 100000,
          "id": "#Picard_CollectAlignmentSummaryMetrics.max_insert_size"
        },
        {
          "default": "false",
          "id": "#Picard_CollectAlignmentSummaryMetrics.is_bisulfite_sequenced"
        },
        {
          "source": [
            "#Sambamba_Merge.merged_bam"
          ],
          "id": "#Picard_CollectAlignmentSummaryMetrics.input_bam"
        },
        {
          "default": 5,
          "id": "#Picard_CollectAlignmentSummaryMetrics.compression_level"
        },
        {
          "default": "true",
          "id": "#Picard_CollectAlignmentSummaryMetrics.assume_sorted"
        },
        {
          "id": "#Picard_CollectAlignmentSummaryMetrics.adapter_sequence"
        }
      ],
      "sbg:y": -523.3333948188377,
      "id": "#Picard_CollectAlignmentSummaryMetrics"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "python",
          "/opt/sbg_genome_coverage.py"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Summary file.",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#bam",
              "sbg:metadata": {
                "file_format": "TEXT"
              },
              "glob": "*.summary"
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#summary",
            "label": "Summary"
          },
          {
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#bam",
              "sbg:metadata": {
                "file_format": "BED"
              },
              "glob": "*.per_interval.bed"
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#per_interval",
            "label": "Per interval"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "python /opt/sbg_genome_coverage.py -b bam.ext -f fasta.ext",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "bogdang",
          "bix-demo"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-genome-coverage/2",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefan_andjelkovic/sbg_genome_coverage:1.0--1",
            "dockerImageId": ""
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 4096
          }
        ],
        "sbg:createdOn": 1450911308,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 2821.6671150393104,
        "sbg:job": {
          "allocatedResources": {
            "mem": 4096,
            "cpu": 1
          },
          "inputs": {
            "fasta": {
              "size": 0,
              "class": "File",
              "path": "fasta.ext",
              "secondaryFiles": []
            },
            "format": "BedGraph",
            "gzipped": true,
            "trackline": true,
            "strand": "Forward+",
            "coverage_interval": "Entire Interval",
            "trackopt": "trackopt",
            "report_z": true,
            "bam": {
              "size": 0,
              "class": "File",
              "path": "bam.ext",
              "secondaryFiles": []
            },
            "split": true,
            "scale": 0
          }
        },
        "description": "SBG Genome Coverage extends BEDTools Genome Coverage. The Genome Coverage calculates histograms, per-base reports and BedGraph summaries of feature coverage (aligned sequences for example) for a given genome. This extended version additionally extracts and creates a text file containing summary coverage stats.",
        "y": -722.8878036957763,
        "sbg:modifiedOn": 1476214514,
        "sbg:categories": [
          "Analysis"
        ],
        "sbg:latestRevision": 2,
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Genome Coverage",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "BEDTools newer version",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:revision": 2,
        "successCodes": [],
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911308,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911308,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1476214514,
            "sbg:revisionNotes": "BEDTools newer version",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "Writes additional track line definition parameters in the first line.",
            "type": [
              "null",
              "string"
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--trackopt",
              "separate": true
            },
            "id": "#trackopt",
            "label": "Additional track"
          },
          {
            "description": "Adds a UCSC/Genome-Browser track line definition in the first line of the output.",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--trackline",
              "separate": false
            },
            "id": "#trackline",
            "label": "UCSC track line"
          },
          {
            "description": "Calculate coverage of intervals from a specific strand.",
            "type": [
              "null",
              {
                "name": "strand",
                "type": "enum",
                "symbols": [
                  "Not Specified",
                  "Forward+",
                  "Reverse-"
                ]
              }
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--strand",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.strand == 'Not Specified') return 0\n  if ($job.inputs.strand == 'Forward+') return 1\n  if ($job.inputs.strand == 'Reverse-') return 2\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "separate": true
            },
            "id": "#strand",
            "label": "Strand"
          },
          {
            "description": "Treat BAM entries as distinct BED intervals when computing coverage. Uses CIGAR 'N' and 'D' operations to infer the blocks for computing coverage.",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--split",
              "separate": false
            },
            "id": "#split",
            "label": "Split"
          },
          {
            "description": "Scale the coverage by a constant factor. Requires BedGraph or Dept Per Base output.",
            "type": [
              "null",
              "float"
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--scale",
              "separate": true
            },
            "id": "#scale",
            "label": "Scale"
          },
          {
            "description": "If BedGraph or Depth Per Base output is selected, also report zero-depth positions.",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--report_z",
              "separate": false
            },
            "id": "#report_z",
            "label": "Report Z"
          },
          {
            "description": "Compress output with gzip.",
            "type": [
              "null",
              "boolean"
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gzipped",
              "separate": false
            },
            "id": "#gzipped",
            "label": "GZipped"
          },
          {
            "description": "Output format.",
            "type": [
              "null",
              {
                "name": "format",
                "type": "enum",
                "symbols": [
                  "Bed-Histogram",
                  "Bed-DepthPerBase",
                  "BedGraph"
                ]
              }
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--format",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.format == 'Bed-Histogram') return 0\n  if ($job.inputs.format == 'Bed-DepthPerBase') return 1\n  if ($job.inputs.format == 'BedGraph') return 2\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "separate": true
            },
            "id": "#format",
            "label": "Format"
          },
          {
            "description": "Reference file.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Fasta",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-f",
              "separate": true
            },
            "id": "#fasta"
          },
          {
            "description": "Coverage calculation.",
            "type": [
              "null",
              {
                "name": "coverage_interval",
                "type": "enum",
                "symbols": [
                  "Entire Interval",
                  "3' Positions Only",
                  "5' Positions Only"
                ]
              }
            ],
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--coverage_interval",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.coverage_interval == 'Entire Interval') return 0\n  if ($job.inputs.coverage_interval == \"3' Positions Only\") return 3\n  if ($job.inputs.coverage_interval == \"5' Positions Only\") return 5\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "separate": true
            },
            "id": "#coverage_interval",
            "label": "Coverage interval"
          },
          {
            "description": "Input BAM file for coverage calculation.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Bam",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-b",
              "separate": true
            },
            "id": "#bam"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-genome-coverage/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Genome_Coverage.summary"
        },
        {
          "id": "#SBG_Genome_Coverage.per_interval"
        }
      ],
      "sbg:x": 2821.6671150393104,
      "inputs": [
        {
          "id": "#SBG_Genome_Coverage.trackopt"
        },
        {
          "id": "#SBG_Genome_Coverage.trackline"
        },
        {
          "id": "#SBG_Genome_Coverage.strand"
        },
        {
          "id": "#SBG_Genome_Coverage.split"
        },
        {
          "id": "#SBG_Genome_Coverage.scale"
        },
        {
          "id": "#SBG_Genome_Coverage.report_z"
        },
        {
          "id": "#SBG_Genome_Coverage.gzipped"
        },
        {
          "default": "Bed-Histogram",
          "id": "#SBG_Genome_Coverage.format"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#SBG_Genome_Coverage.fasta"
        },
        {
          "default": "Entire Interval",
          "id": "#SBG_Genome_Coverage.coverage_interval"
        },
        {
          "source": [
            "#Sambamba_Merge.merged_bam"
          ],
          "id": "#SBG_Genome_Coverage.bam"
        }
      ],
      "sbg:y": -722.8878036957763,
      "id": "#SBG_Genome_Coverage"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "/opt/sambamba_0.5.9/sambamba_v0.5.9",
          "view"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Bam file.",
            "type": [
              "null",
              "File"
            ],
            "label": "BAM file",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input",
              "sbg:metadata": {},
              "glob": {
                "script": "{\n  fnameRegex = /^(.*?)(?:\\.([^.]+))?$/;\n  file_path = $job.inputs.input.path;\n  base_name = fnameRegex.exec(file_path)[1];\n  file_name = base_name.replace(/^.*[\\\\\\/]/, '');\n  \n  if ($job.inputs.output == 'sam'){\n  \treturn file_name + '.filtered.sam'\n  }\n  else if ($job.inputs.output == 'bam'){\n  \treturn file_name.concat('.filtered.bam')\n  }\n  else if ($job.inputs.output == 'json'){\n  \treturn file_name.concat('.filtered.json')\n  }\n  else if ($job.inputs.output == 'msgpack'){\n  \treturn file_name.concat('.filtered.msgpack')\n  }\n  else\t{\n  \treturn file_name + '.filtered.sam'\n  }\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              }
            },
            "sbg:fileTypes": "BAM, SAM, JSON, MSGPACK",
            "id": "#filtered"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 view --format=bam  /root/dir/example.bam -o example.filtered.bam",
        "sbg:project": "bix-demo/sambamba-0-5-9-demo",
        "sbg:contributors": [
          "vladimirk",
          "bix-demo",
          "ognjenm"
        ],
        "id": "bix-demo/sambamba-0-5-9-demo/sambamba-view-0-5-9/9",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "0.5.9",
        "sbg:createdOn": 1450911559,
        "arguments": [
          {
            "valueFrom": {
              "script": "{\n  fnameRegex = /^(.*?)(?:\\.([^.]+))?$/;\n  if ($job.inputs.input) \n  {\n  \tfile_path = $job.inputs.input.path;\n  \tbase_name = fnameRegex.exec(file_path)[1];\n  \tfile_name = base_name.replace(/^.*[\\\\\\/]/, '');\n  \n  if ($job.inputs.output == 'sam'){\n  \treturn file_name + '.filtered.sam'\n  }\n  else if ($job.inputs.output == 'bam'){\n  \treturn file_name.concat('.filtered.bam')\n  }\n  else if ($job.inputs.output == 'json'){\n  \treturn file_name.concat('.filtered.json')\n  }\n  else if ($job.inputs.output == 'msgpack'){\n  \treturn file_name.concat('.filtered.msgpack')\n  }\n  else\t{\n  \treturn file_name + '.filtered.sam'\n  }\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "prefix": "-o",
            "position": 3,
            "separate": true
          }
        ],
        "sbg:license": "GNU General Public License v2.0 only",
        "class": "CommandLineTool",
        "x": 1760.0002332263598,
        "sbg:job": {
          "allocatedResources": {
            "mem": 7,
            "cpu": 1
          },
          "inputs": {
            "input": {
              "path": "/root/dir/example.bam"
            },
            "reserved_threads": 8,
            "output": "bam",
            "mem_mb": 7,
            "nthreads": null,
            "subsample": 9.236016917973757,
            "filter": "unmapped"
          }
        },
        "description": "Sambamba View efficiently filters a BAM file for alignments satisfying various conditions. It also accesses its SAM header and information about reference sequences. A JSON output is provided to make this data readily available for use with Perl, Python, and Ruby scripts.\n\nBy default, the tool expects a BAM file as an input. In order to work with a SAM file as an input, specify --sam-input command-line option. The tool does NOT automatically detect file format from its extension. Beware that when reading SAM, the tool will skip tags which don't conform to the SAM/BAM specification and set invalid fields to their default values. However, only syntax is checked, use --valid for full validation.",
        "y": -346.66673050986617,
        "sbg:modifiedOn": 1476709202,
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9",
            "dockerImageId": "59e577b13d5d"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if ($job.inputs.reserved_threads) {\n    \n    return $job.inputs.reserved_threads\n    \n  } else if ($job.inputs.nthreads) {\n    \n    return $job.inputs.nthreads\n    \n  } else {\n    \n    return 1\n  }\n  \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "Sambamba",
        "label": "Sambamba View",
        "sbg:toolAuthor": "Artem Tarasov",
        "sbg:revisionNotes": "Added reserved number of threads.",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lomereiter/sambamba",
            "label": "Source code"
          },
          {
            "id": "https://github.com/lomereiter/sambamba/wiki",
            "label": "Wiki"
          },
          {
            "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9",
            "label": "Download"
          },
          {
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
            "label": "Publication"
          }
        ],
        "sbg:revision": 9,
        "successCodes": [],
        "sbg:latestRevision": 9,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911559,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911560,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911561,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911561,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1470050578,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1470050707,
            "sbg:revisionNotes": "Added reference file type",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1470050762,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1472475927,
            "sbg:revisionNotes": "\"subsample\" type set to float.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1475064551,
            "sbg:revisionNotes": "Added resource parameters",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1476709202,
            "sbg:revisionNotes": "Added reserved number of threads.",
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "Print header before reads (always done for BAM output).",
            "type": [
              "null",
              "boolean"
            ],
            "label": "With header",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--with-header",
              "separate": true
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "h",
            "id": "#with_header"
          },
          {
            "description": "Output only valid reads.",
            "sbg:category": "Execution",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#valid",
            "label": "Valid"
          },
          {
            "description": "Set seed for subsampling.",
            "type": [
              "null",
              "int"
            ],
            "label": "Subsampling seed",
            "sbg:category": "Execution",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--subsampling-seed",
              "separate": true
            },
            "id": "#subsampling_seed"
          },
          {
            "description": "Subsample reads (read pairs).",
            "type": [
              "null",
              "float"
            ],
            "label": "Subsample",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--subsample=",
              "separate": true
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "s",
            "sbg:stageInput": null,
            "id": "#subsample"
          },
          {
            "description": "Specify that input is in SAM format.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "SAM input",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--sam-input",
              "separate": true
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "S",
            "id": "#sam_input"
          },
          {
            "description": "Number of threads reserved on the instance passed to the scheduler (number of jobs).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Number of threads reserved on the instance",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#reserved_threads"
          },
          {
            "description": "Output only reads overlapping one of regions from the BED file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Regions",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--regions=",
              "separate": false
            },
            "sbg:category": "File input.",
            "sbg:altPrefix": "L",
            "sbg:fileTypes": "BED",
            "id": "#regions"
          },
          {
            "description": "Specify reference for writing CRAM.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Reference",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ref-filename=",
              "separate": false
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "T",
            "sbg:fileTypes": "FASTA,FA",
            "id": "#ref_filename"
          },
          {
            "description": "Specify which format to use for output (default is SAM).",
            "type": [
              {
                "name": "output",
                "type": "enum",
                "symbols": [
                  "sam",
                  "bam",
                  "cram",
                  "json"
                ]
              }
            ],
            "label": "Output format",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--format=",
              "position": 1,
              "separate": false
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "-f",
            "id": "#output"
          },
          {
            "description": "Number of threads to use.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "8",
            "label": "Number of threads",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nthreads=",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.nthreads)\n    return $job.inputs.nthreads\n  else\n    return 8\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "separate": false
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "-t",
            "id": "#nthreads"
          },
          {
            "description": "Memory in MB.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1024",
            "label": "Memory in MB",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#mem_mb"
          },
          {
            "description": "BAM or SAM file.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Input",
            "sbg:category": "Inputs",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 2,
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:fileTypes": "BAM, SAM",
            "id": "#input"
          },
          {
            "description": "Set custom filter for alignments.",
            "type": [
              "null",
              "string"
            ],
            "label": "Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--filter",
              "valueFrom": {
                "script": "{\n  if ($job.inputs.filter)\n  {\n  \treturn '\"'.concat($job.inputs.filter, '\"')\n  }\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Basic Options",
            "sbg:altPrefix": "-F",
            "id": "#filter"
          },
          {
            "description": "Specify that input is in CRAM format.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "CRAM input",
            "sbg:category": "Execution",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--cram-input",
              "itemSeparator": null,
              "separate": true
            },
            "id": "#cram_input"
          },
          {
            "description": "Output to stdout only count of matching records, hHI are ignored.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Count",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--count",
              "separate": true
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "c",
            "id": "#count"
          },
          {
            "description": "Specify compression level (from 0 to 9, works only for BAM output).",
            "type": [
              "null",
              "int"
            ],
            "label": "Compression level",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--compression-level",
              "separate": true
            },
            "sbg:category": "Execution",
            "sbg:altPrefix": "l",
            "id": "#compression_level"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sambamba-view-0-5-9/0",
        "cwlVersion": "sbg:draft-2"
      },
      "scatter": "#Sambamba_View.input",
      "outputs": [
        {
          "id": "#Sambamba_View.filtered"
        }
      ],
      "sbg:x": 1760.0002332263598,
      "inputs": [
        {
          "id": "#Sambamba_View.with_header"
        },
        {
          "id": "#Sambamba_View.valid"
        },
        {
          "id": "#Sambamba_View.subsampling_seed"
        },
        {
          "id": "#Sambamba_View.subsample"
        },
        {
          "id": "#Sambamba_View.sam_input"
        },
        {
          "id": "#Sambamba_View.reserved_threads"
        },
        {
          "id": "#Sambamba_View.regions"
        },
        {
          "id": "#Sambamba_View.ref_filename"
        },
        {
          "default": "bam",
          "id": "#Sambamba_View.output"
        },
        {
          "default": 7,
          "id": "#Sambamba_View.nthreads"
        },
        {
          "id": "#Sambamba_View.mem_mb"
        },
        {
          "source": [
            "#BWA_MEM_Bundle_0_7_13.aligned_reads"
          ],
          "id": "#Sambamba_View.input"
        },
        {
          "default": "unmapped and mate_is_unmapped",
          "id": "#Sambamba_View.filter"
        },
        {
          "id": "#Sambamba_View.cram_input"
        },
        {
          "id": "#Sambamba_View.count"
        },
        {
          "id": "#Sambamba_View.compression_level"
        }
      ],
      "sbg:y": -346.66673050986617,
      "id": "#Sambamba_View"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          {
            "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  comm=''\n  if(in_var instanceof Array) // Always true\n  {\n    if(in_var.length==1)\n    {\n      comm+='cp '\n      \n    }\n  \telse if(in_var.length>1)\n  \t{\n    \n    \tcomm+='/opt/sambamba_0.5.9/sambamba_v0.5.9 merge '\n    \tif($job.inputs.num_of_threads)\n  \t\t{\n    \t\tcomm+=' -t '\n    \t\tcomm+=$job.inputs.num_of_threads\n  \t\t}\n  \t\tif($job.inputs.compression_level)\n  \t\t{\n   \t\t\tcomm+=' -l '\n    \t\tcomm+=$job.inputs.compression_level\n  \t\t}\n   \t\t\n    }\n  \n  \t\n\n  }\n  return comm\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Merged bam.",
            "type": [
              "null",
              "File"
            ],
            "label": "Merged bam",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#bams",
              "glob": "*.bam",
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ]
            },
            "sbg:fileTypes": "BAM",
            "id": "#merged_bam"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 merge  -t 6  /path/to/uuu_bams.bam  /path/to/uyyy_bams.bam  testmeta__bams.merged.bam",
        "sbg:project": "bix-demo/sambamba-0-5-9-demo",
        "sbg:contributors": [
          "nevenam",
          "nevenam.sudo",
          "vladimirk",
          "ognjenm"
        ],
        "id": "bix-demo/sambamba-0-5-9-demo/sambamba-merge-0-5-9/18",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "0.5.9",
        "sbg:createdOn": 1458920412,
        "arguments": [
          {
            "valueFrom": {
              "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  comm=''\n  if(in_var.length==1)\n  {\n  \tcomm+='. '\n  \n  \tif(in_var[0].secondaryFiles!=undefined && in_var[0].secondaryFiles.length>0)\n  \t{\n    \t comm+='| cp '\n    \t comm+=in_var[0].secondaryFiles[0].path\n    \t comm+=' . '\n  \t}\n  }\n  return comm\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 10,
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n\n  function common_end(strs) {\n  \n  \t// Find minimum length of file name\n  \n  \tls = [];\n    whole = [];\n\tfor (i=0;i<strs.length;i++){\n  \t\tls = ls.concat(strs[i].path.split('/').pop().length);\n        whole = whole.concat(strs[i].path.length);\n  \t}\n \tl = Math.min.apply(Math,ls);\n  \n  \t// Loop from the end through characters and check if they are the same for all\n  \n \tind = 0;\n \tflag = 0;\n \tfor (i=1;i<=l;i++){\n    \tfor (j=1;j<strs.length;j++){\n      \t\tif (strs[0].path[whole[0]-i]!=strs[j].path[whole[j]-i]){\n        \tflag = 1;\n        \tbreak\n      \t\t}\n   \t\t}\n   \t \tif (flag == 1){\n   \t \t  \tbreak\n   \t    } else {\n      \t\tind = ind + 1;\n        }\n  \t }\n  \n  // Assign and return longest ending common substring\n  if (ind>0) {\n  \tcomstr = strs[0].path.slice(-ind);\n  } else {\n    comstr = 'different_extensions'\n  }\n  \n  return comstr\n  \n  }\n  \n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  prefix=''\n  \n  if(in_var.length==1) { \n    return '' // Input will be just passed to output\n  }else if (in_var[0].metadata){\n \t   if (\"sample_id\" in in_var[0].metadata){   \n  \t\t prefix = in_var[0].metadata[\"sample_id\"];      \n   \t    } else {\n   \t\t  prefix = 'sample_unknown';\n        }\n   \n  }else {\n    prefix = 'sample_unknown';   \n  }\n  \n  // Create joint name and add the merged suffix\n  joint_name = prefix + '_' + common_end(in_var);\n  name = joint_name.split('.').slice(0,-1).join('.') + '.merged.bam'\n  \n  \n  \n  return name\n  \n}\n\n\n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 5,
            "separate": true
          }
        ],
        "sbg:license": "GNU General Public License v2.0 only",
        "class": "CommandLineTool",
        "x": 2026.6666666666679,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2,
            "cpu": 2
          },
          "inputs": {
            "reserved_threads": 2,
            "num_of_threads": 6,
            "bams": [
              {
                "metadata": {
                  "sample_id": "testmeta"
                },
                "size": 0,
                "class": "File",
                "path": "/path/to/uuu_bams.bam",
                "secondaryFiles": []
              },
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/uyyy_bams.bam",
                "secondaryFiles": []
              }
            ],
            "compression_level": null,
            "mem_mb": 2
          }
        },
        "description": "Sambamba Merge is used for merging several sorted BAM files into one. The sorting order of all the files must be the same, and it is maintained in the output file.",
        "y": -445.5729166666669,
        "sbg:modifiedOn": 1476706820,
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if ($job.inputs.reserved_threads) {\n    \n    return $job.inputs.reserved_threads\n    \n  } else if ($job.inputs.num_of_threads) {\n    \n    return $job.inputs.num_of_threads\n    \n  } else {\n    \n    return 1\n  }\n  \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9",
            "dockerImageId": ""
          }
        ],
        "stdin": "",
        "sbg:toolkit": "Sambamba",
        "label": "Sambamba Merge",
        "sbg:toolAuthor": "Artem Tarasov",
        "sbg:revisionNotes": "Added reserved number of threads.",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "nevenam.sudo",
        "sbg:links": [
          {
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lomereiter/sambamba",
            "label": "Source code"
          },
          {
            "id": "https://github.com/lomereiter/sambamba/wiki",
            "label": "Wiki"
          },
          {
            "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9",
            "label": "Download"
          },
          {
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
            "label": "Publication"
          }
        ],
        "sbg:revision": 18,
        "successCodes": [],
        "sbg:latestRevision": 18,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1458920412,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam.sudo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1458920459,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam.sudo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1462963630,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1462963660,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1468849940,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1470679574,
            "sbg:revisionNotes": "Changed to common name",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1470752287,
            "sbg:revisionNotes": "Smart naming introduced",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1470753233,
            "sbg:revisionNotes": "Corrected single file case",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1470753950,
            "sbg:revisionNotes": "Changed glob",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1470756561,
            "sbg:revisionNotes": "Updated sample id tag",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1470757408,
            "sbg:revisionNotes": "Added inherit metadata",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1472994215,
            "sbg:revisionNotes": "Added support for receiving bams as list inside list.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 12,
            "sbg:modifiedOn": 1473000652,
            "sbg:revisionNotes": "Glob returns *.bam",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 13,
            "sbg:modifiedOn": 1473071971,
            "sbg:revisionNotes": "Added support for input.bams received as list of one-element-lists.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 14,
            "sbg:modifiedOn": 1473257751,
            "sbg:revisionNotes": "Added protection from null (10)",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 15,
            "sbg:modifiedOn": 1473424164,
            "sbg:revisionNotes": "Returned revision that accepts list of one-element lists.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 16,
            "sbg:modifiedOn": 1475064412,
            "sbg:revisionNotes": "Added resource parameters",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 17,
            "sbg:modifiedOn": 1475064631,
            "sbg:revisionNotes": "Changed mem error",
            "sbg:modifiedBy": "ognjenm"
          },
          {
            "sbg:revision": 18,
            "sbg:modifiedOn": 1476706820,
            "sbg:revisionNotes": "Added reserved number of threads.",
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "Number of threads reserved on the instance passed to the scheduler (number of jobs).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Number of threads reserved on the instance",
            "sbg:category": "Execution",
            "id": "#reserved_threads"
          },
          {
            "description": "Number of threads to use for compression/decompression.",
            "sbg:category": "Merge",
            "type": [
              "null",
              "int"
            ],
            "id": "#num_of_threads",
            "label": "Number of threads to use"
          },
          {
            "description": "Memory in MB.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1024",
            "label": "Memory in MB",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#mem_mb"
          },
          {
            "description": "Level of compression for merged BAM file, number from 0 to 9.",
            "sbg:category": "Merge",
            "type": [
              "null",
              "int"
            ],
            "id": "#compression_level",
            "label": "Compression level"
          },
          {
            "description": "Input BAM files.",
            "type": [
              {
                "name": "bams",
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "BAM files",
            "sbg:category": "Merge",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 5,
              "itemSeparator": null,
              "separate": true
            },
            "sbg:fileTypes": "BAM",
            "id": "#bams"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sambamba-merge-0-5-9/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#Sambamba_Merge.merged_bam"
        }
      ],
      "sbg:x": 2026.6666666666679,
      "inputs": [
        {
          "default": 7,
          "id": "#Sambamba_Merge.reserved_threads"
        },
        {
          "default": 7,
          "id": "#Sambamba_Merge.num_of_threads"
        },
        {
          "id": "#Sambamba_Merge.mem_mb"
        },
        {
          "id": "#Sambamba_Merge.compression_level"
        },
        {
          "source": [
            "#GATK_PrintReads.recalibrated_bam",
            "#Sambamba_View.filtered"
          ],
          "id": "#Sambamba_Merge.bams"
        }
      ],
      "sbg:y": -445.5729166666669,
      "id": "#Sambamba_Merge"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "RealignerTargetCreator",
          {
            "script": "{ \n  if(!$job.inputs.threads_per_job){\n    return '-nt '.concat(4)\n  }\n  else{\n  \treturn '-nt '.concat($job.inputs.threads_per_job)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "An output file created by the walker.",
            "type": [
              "null",
              "File"
            ],
            "label": "Intervals",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reads",
              "sbg:metadata": {
                "intervals_file": {
                  "script": "{\n  if ($job.inputs.intervals_file)\n    if($job.inputs.intervals_file.metadata)\n      if($job.inputs.intervals_file.metadata.sbg_scatter)\n        return $job.inputs.intervals_file.path.split('/').pop()\n  return 'NO_INTERVALS'\n}",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "glob": "*.intervals"
            },
            "sbg:fileTypes": "INTERVALS",
            "id": "#indel_realigner_intervals_file"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx1M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type RealignerTargetCreator -nt 2 --reference_sequence /folder/reference.fasta --known /folder/indels.vcf --out input.intervals",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "vladimirk",
          "bix-demo"
        ],
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-realignertargetcreator/8",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911384,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  if($job.inputs.reads){\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  } else read_namebase = 'known_only'\n  return read_namebase + '.intervals'\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 1250.0003344350512,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1,
            "cpu": 1
          },
          "inputs": {
            "known": [
              {
                "path": "/folder/indels.vcf"
              }
            ],
            "reads": [
              {
                "path": "input.bam"
              }
            ],
            "cpu_per_job": 1,
            "memory_per_job": 1,
            "memory_overhead_per_job": 0,
            "reference": {
              "path": "/folder/reference.fasta"
            },
            "intervals_file": {
              "metadata": {
                "sbg_scatter": "true"
              },
              "path": "/path/to/file/rrrrrr.bed",
              "secondaryFiles": []
            },
            "threads_per_job": 2,
            "intervals": ""
          }
        },
        "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such that mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this tool uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists.\n\nThere are 2 steps to the realignment process:\nDetermining (small) suspicious intervals which are likely in need of realignment (RealignerTargetCreator)\nRunning the realigner over those intervals (see the IndelRealigner tool)\nFor more details, see the indel realignment method documentation.\n\nInputs\nOne or more aligned BAM files and optionally, one or more lists of known indels.\n\nOutput\nA list of target intervals to pass to the IndelRealigner.\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T RealignerTargetCreator \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -o forIndelRealigner.intervals\n \nNotes\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nWhen multiple potential indels are found by the tool in the same general region, the tool will choose the most likely one for realignment to the exclusion of the others. This is a known limitation of the tool.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 412.7608035840242,
        "sbg:modifiedOn": 1475576477,
        "sbg:categories": [
          "Analysis"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "GATK RealignerTargetCreator",
        "sbg:toolAuthor": "Broad Institute",
        "sbg:revisionNotes": "BAMs are not required input",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "ttps://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_RealignerTargetCreator.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 8,
        "successCodes": [],
        "sbg:latestRevision": 8,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911384,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911384,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911385,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911386,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911387,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1471364087,
            "sbg:revisionNotes": "known link staged.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1472650598,
            "sbg:revisionNotes": "Scatter metadata.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1472724438,
            "sbg:revisionNotes": ".bai as secondary",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1475576477,
            "sbg:revisionNotes": "BAMs are not required input",
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "Window size for calculating entropy or SNP clusters. Any two SNP calls and/or high entropy positions are considered clustered when they occur no more than this many base pairs apart.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "10",
            "label": "Window size",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--windowSize",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Realigner Target Creator",
            "sbg:altPrefix": "-window",
            "id": "#window_size"
          },
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "4",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Read sequences in BAM format.",
            "type": [
              "null",
              {
                "name": "reads",
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Read sequences",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input_file",
              "separate": true,
              "itemSeparator": null,
              "secondaryFiles": [
                ".bai"
              ]
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-I",
            "sbg:fileTypes": "SAM, BAM",
            "id": "#reads"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Fraction of base qualities needing to mismatch for a position to have high entropy. To disable this behavior, set this value to <= 0 or > 1. This feature is really only necessary when using an ungapped aligner (e.g. MAQ in the case of single-end read data) and should be used in conjunction with USE_SW' option.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.0",
            "label": "Mismatch fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mismatchFraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Realigner Target Creator",
            "sbg:altPrefix": "-mismatch",
            "id": "#mismatch_fraction"
          },
          {
            "description": "Minimum reads at a locus to enable using the entropy calculation.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "4",
            "label": "Minimum reads at locus",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--minReadsAtLocus",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Realigner Target Creator",
            "sbg:altPrefix": "-minReads",
            "id": "#min_reads_at_locus"
          },
          {
            "description": "Amount of RAM memory in MB to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Maximum interval size. Because the realignment algorithm is N^2, allowing too large an interval might take too long to completely realign.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "500",
            "label": "Maximum interval size",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxIntervalSize",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Realigner Target Creator",
            "sbg:altPrefix": "-maxInterval",
            "id": "#max_interval_size"
          },
          {
            "description": "VCF file with known indels.",
            "sbg:stageInput": "link",
            "type": [
              {
                "name": "known",
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Known indels",
            "sbg:category": "Input Files",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--known",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:fileTypes": "VCF",
            "id": "#known"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "sample",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-realignertargetcreator/0",
        "cwlVersion": "sbg:draft-2"
      },
      "scatter": "#GATK_RealignerTargetCreator.intervals_file",
      "outputs": [
        {
          "id": "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
        }
      ],
      "sbg:x": 1250.0003344350512,
      "inputs": [
        {
          "id": "#GATK_RealignerTargetCreator.window_size"
        },
        {
          "id": "#GATK_RealignerTargetCreator.validation_strictness"
        },
        {
          "id": "#GATK_RealignerTargetCreator.use_original_qualities"
        },
        {
          "id": "#GATK_RealignerTargetCreator.use_legacy_downsampler"
        },
        {
          "id": "#GATK_RealignerTargetCreator.unsafe"
        },
        {
          "default": 4,
          "id": "#GATK_RealignerTargetCreator.threads_per_job"
        },
        {
          "id": "#GATK_RealignerTargetCreator.tag"
        },
        {
          "id": "#GATK_RealignerTargetCreator.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_RealignerTargetCreator.reference"
        },
        {
          "source": [
            "#BWA_MEM_Bundle_0_7_13.aligned_reads"
          ],
          "id": "#GATK_RealignerTargetCreator.reads"
        },
        {
          "id": "#GATK_RealignerTargetCreator.read_group_black_list"
        },
        {
          "id": "#GATK_RealignerTargetCreator.read_filter"
        },
        {
          "id": "#GATK_RealignerTargetCreator.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_RealignerTargetCreator.phone_home"
        },
        {
          "id": "#GATK_RealignerTargetCreator.pedigree_validation_type"
        },
        {
          "id": "#GATK_RealignerTargetCreator.pedigree_string"
        },
        {
          "id": "#GATK_RealignerTargetCreator.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_RealignerTargetCreator.mismatch_fraction"
        },
        {
          "id": "#GATK_RealignerTargetCreator.min_reads_at_locus"
        },
        {
          "default": 2048,
          "id": "#GATK_RealignerTargetCreator.memory_per_job"
        },
        {
          "default": 64,
          "id": "#GATK_RealignerTargetCreator.memory_overhead_per_job"
        },
        {
          "id": "#GATK_RealignerTargetCreator.max_runtime_units"
        },
        {
          "id": "#GATK_RealignerTargetCreator.max_runtime"
        },
        {
          "id": "#GATK_RealignerTargetCreator.max_interval_size"
        },
        {
          "source": [
            "#known_1"
          ],
          "id": "#GATK_RealignerTargetCreator.known"
        },
        {
          "id": "#GATK_RealignerTargetCreator.keep_program_records"
        },
        {
          "source": [
            "#SBG_Prepare_Intervals_1.intervals"
          ],
          "id": "#GATK_RealignerTargetCreator.intervals_file"
        },
        {
          "id": "#GATK_RealignerTargetCreator.intervals"
        },
        {
          "id": "#GATK_RealignerTargetCreator.interval_set_rule"
        },
        {
          "id": "#GATK_RealignerTargetCreator.interval_padding"
        },
        {
          "id": "#GATK_RealignerTargetCreator.interval_merging"
        },
        {
          "id": "#GATK_RealignerTargetCreator.gatk_key"
        },
        {
          "id": "#GATK_RealignerTargetCreator.fix_misencoded_quals"
        },
        {
          "id": "#GATK_RealignerTargetCreator.exclude_intervals"
        },
        {
          "id": "#GATK_RealignerTargetCreator.emit_original_quals"
        },
        {
          "id": "#GATK_RealignerTargetCreator.downsampling_type"
        },
        {
          "id": "#GATK_RealignerTargetCreator.downsample_to_fraction"
        },
        {
          "id": "#GATK_RealignerTargetCreator.downsample_to_coverage"
        },
        {
          "id": "#GATK_RealignerTargetCreator.disable_radnomization"
        },
        {
          "id": "#GATK_RealignerTargetCreator.disable_indel_quals"
        },
        {
          "id": "#GATK_RealignerTargetCreator.default_base_qualities"
        },
        {
          "default": 1,
          "id": "#GATK_RealignerTargetCreator.cpu_per_job"
        },
        {
          "id": "#GATK_RealignerTargetCreator.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_RealignerTargetCreator.baq"
        },
        {
          "id": "#GATK_RealignerTargetCreator.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": 412.7608035840242,
      "id": "#GATK_RealignerTargetCreator"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "PrintReads",
          {
            "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(4)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Write output to this BAM filename.",
            "type": [
              "File"
            ],
            "label": "Recalibrated BAM",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reads",
              "sbg:metadata": {},
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "glob": "*.bam"
            },
            "sbg:fileTypes": "BAM, SAM",
            "id": "#recalibrated_bam"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type PrintReads -nct 4 --reference_sequence /folder/reference.fasta --input_file /folder/input1.bam --out input1.bam ; mv input1.bai input1.bam.bai",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "vladimirk",
          "bix-demo"
        ],
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-printreads/12",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911393,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.bam'\n  }\n  else{\n  \treturn read_namebase + '.bam'\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  if($job.inputs.bqsr){\n\treturn 'mv ' + read_namebase + '.base_recalibrated.bai '+ read_namebase + '.base_recalibrated.bam.bai'\n  }\n  else{\n  \treturn 'mv ' + read_namebase + '.bai '+read_namebase+'.bam.bai'\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "prefix": ";",
            "position": 10000,
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 1768.3340922859265,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "memory_overhead_per_job": 0,
            "reference": {
              "path": "/folder/reference.fasta"
            },
            "read_filter": [
              "MappingQualityZero"
            ],
            "reads": [
              {
                "metadata": {
                  "intervals_file": "3333.intervals"
                },
                "path": "/folder/input1.bam",
                "secondaryFiles": []
              }
            ],
            "intervals_file": [
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/intervals_file-1.ext",
                "secondaryFiles": []
              },
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/intervals_file-2.ext",
                "secondaryFiles": []
              }
            ]
          }
        },
        "description": "Overview\n\nPrintReads is a generic utility tool for manipulating sequencing data in SAM/BAM format. It can dynamically merge the contents of multiple input BAM files, resulting in merged output sorted in coordinate order. It can also optionally filter reads based on various read properties such as read group tags using the `--read_filter/-rf` command line argument (see documentation on read filters for more information).\n\nNote that when PrintReads is used as part of the Base Quality Score Recalibration workflow, it takes the `--BQSR` engine argument, which is listed under Inherited Arguments > CommandLineGATK below.\n\nInput\nOne or more bam files.\n\nOutput\nA single processed bam file.\n\nUsage examples:\n\n // Prints all reads that have a mapping quality above zero\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input1.bam \\\n   -I input2.bam \\\n   -o output.bam \\\n   --read_filter MappingQualityZero\n\n // Prints the first 2000 reads in the BAM file\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -n 2000\n\n // Downsamples BAM file to 25%\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -dfrac 0.25\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 406.0939039029232,
        "sbg:modifiedOn": 1476372560,
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "GATK PrintReads",
        "sbg:toolAuthor": "Broad Institute",
        "sbg:revisionNotes": "Read_filter names corrected (\"Filter\" string removed)",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source Code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_readutils_PrintReads.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 12,
        "successCodes": [],
        "sbg:latestRevision": 12,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911393,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911394,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911395,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911396,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911397,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911398,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1450911399,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1461854096,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1461861365,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1472656041,
            "sbg:revisionNotes": "metadata scatter.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1472744347,
            "sbg:revisionNotes": "intervals_file - stage link",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1476371132,
            "sbg:revisionNotes": "Added support for single bam processing without intervals",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 12,
            "sbg:modifiedOn": 1476372560,
            "sbg:revisionNotes": "Read_filter names corrected (\"Filter\" string removed)",
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "4",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "Simplify all reads.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Simplify",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--simplify",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Print Reads",
            "sbg:altPrefix": "-s",
            "id": "#simplify"
          },
          {
            "description": "Sample name to be included in the analysis. Can be specified multiple times.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Sample Name",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--sample_name",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Print Reads",
            "sbg:altPrefix": "-sn",
            "id": "#sample_name"
          },
          {
            "description": "File containing a list of samples (one per line). Can be specified multiple times.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Sample File",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--sample_file",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-sf",
            "id": "#sample_file"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Read sequences in BAM format.",
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Read sequences",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input_file",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-I",
            "sbg:fileTypes": "SAM, BAM",
            "id": "#reads"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Exclude all reads with this read group from the output.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Read Group",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--readGroup",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Print Reads",
            "sbg:altPrefix": "-readGroup",
            "id": "#read_group"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "name": "read_filter",
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigar",
                    "BadMate",
                    "CountingFilteringIterator.CountingRead",
                    "DuplicateRead",
                    "FailsVendorQualityCheck",
                    "HCMappingQuality",
                    "LibraryRead",
                    "MalformedRead",
                    "MappingQuality",
                    "MappingQualityUnavailable",
                    "MappingQualityZero",
                    "MateSameStrand",
                    "MaxInsertSize",
                    "MissingReadGroup",
                    "NoOriginalQualityScores",
                    "NotPrimaryAlignment",
                    "OverclippedRead",
                    "Platform454",
                    "PlatformFilter",
                    "PlatformUnit",
                    "ReadGroupBlackList",
                    "ReadLength",
                    "ReadName",
                    "ReadStrand",
                    "ReassignMappingQuality",
                    "ReassignOneMappingQuality",
                    "Sample",
                    "SingleReadGroup",
                    "UnmappedRead"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "Exclude all reads with this platform from the output.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Platform",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--platform",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Print Reads",
            "sbg:altPrefix": "-platform",
            "id": "#platform"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "Print the first n reads from the file, discarding the rest.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Number",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--number",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Print Reads",
            "sbg:altPrefix": "-n",
            "id": "#number"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Amount of RAM memory in MB to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "sbg:stageInput": "link",
            "type": [
              "null",
              {
                "name": "intervals_file",
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Intervals",
            "sbg:category": "Input Files",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "script": "{\n  if($job.inputs.intervals_file instanceof Array)\n    if([].concat($job.inputs.reads)[0].metadata)\n      if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n        return '--intervals ' + [].concat($job.inputs.reads)[0].metadata.intervals_file\n  \n  if($job.inputs.intervals_file)\n    return '--intervals ' + $job.inputs.intervals_file.path\n  else\n    return ''\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "itemSeparator": null,
              "separate": true
            },
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "BQSR Table",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--BQSR",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": null,
            "sbg:fileTypes": "GRP",
            "id": "#bqsr"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-printreads/0",
        "cwlVersion": "sbg:draft-2"
      },
      "scatter": "#GATK_PrintReads.reads",
      "outputs": [
        {
          "id": "#GATK_PrintReads.recalibrated_bam"
        }
      ],
      "sbg:x": 1768.3340922859265,
      "inputs": [
        {
          "id": "#GATK_PrintReads.validation_strictness"
        },
        {
          "id": "#GATK_PrintReads.use_original_qualities"
        },
        {
          "id": "#GATK_PrintReads.use_legacy_downsampler"
        },
        {
          "id": "#GATK_PrintReads.unsafe"
        },
        {
          "default": 4,
          "id": "#GATK_PrintReads.threads_per_job"
        },
        {
          "id": "#GATK_PrintReads.tag"
        },
        {
          "id": "#GATK_PrintReads.simplify"
        },
        {
          "id": "#GATK_PrintReads.sample_name"
        },
        {
          "id": "#GATK_PrintReads.sample_file"
        },
        {
          "id": "#GATK_PrintReads.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_PrintReads.reference"
        },
        {
          "source": [
            "#GATK_IndelRealigner.realigned_bam_file"
          ],
          "id": "#GATK_PrintReads.reads"
        },
        {
          "id": "#GATK_PrintReads.read_group_black_list"
        },
        {
          "id": "#GATK_PrintReads.read_group"
        },
        {
          "id": "#GATK_PrintReads.read_filter"
        },
        {
          "id": "#GATK_PrintReads.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_PrintReads.platform"
        },
        {
          "id": "#GATK_PrintReads.phone_home"
        },
        {
          "id": "#GATK_PrintReads.pedigree_validation_type"
        },
        {
          "id": "#GATK_PrintReads.pedigree_string"
        },
        {
          "id": "#GATK_PrintReads.number"
        },
        {
          "id": "#GATK_PrintReads.non_deterministic_random_seed"
        },
        {
          "default": 2048,
          "id": "#GATK_PrintReads.memory_per_job"
        },
        {
          "default": 64,
          "id": "#GATK_PrintReads.memory_overhead_per_job"
        },
        {
          "id": "#GATK_PrintReads.max_runtime_units"
        },
        {
          "id": "#GATK_PrintReads.max_runtime"
        },
        {
          "id": "#GATK_PrintReads.keep_program_records"
        },
        {
          "source": [
            "#SBG_Prepare_Intervals_1.intervals"
          ],
          "id": "#GATK_PrintReads.intervals_file"
        },
        {
          "id": "#GATK_PrintReads.intervals"
        },
        {
          "id": "#GATK_PrintReads.interval_set_rule"
        },
        {
          "id": "#GATK_PrintReads.interval_padding"
        },
        {
          "id": "#GATK_PrintReads.interval_merging"
        },
        {
          "id": "#GATK_PrintReads.gatk_key"
        },
        {
          "id": "#GATK_PrintReads.fix_misencoded_quals"
        },
        {
          "id": "#GATK_PrintReads.exclude_intervals"
        },
        {
          "id": "#GATK_PrintReads.emit_original_quals"
        },
        {
          "id": "#GATK_PrintReads.downsampling_type"
        },
        {
          "id": "#GATK_PrintReads.downsample_to_fraction"
        },
        {
          "id": "#GATK_PrintReads.downsample_to_coverage"
        },
        {
          "id": "#GATK_PrintReads.disable_radnomization"
        },
        {
          "id": "#GATK_PrintReads.disable_indel_quals"
        },
        {
          "id": "#GATK_PrintReads.default_base_qualities"
        },
        {
          "default": 1,
          "id": "#GATK_PrintReads.cpu_per_job"
        },
        {
          "source": [
            "#GATK_BaseRecalibrator.bqsr"
          ],
          "id": "#GATK_PrintReads.bqsr"
        },
        {
          "id": "#GATK_PrintReads.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_PrintReads.baq"
        },
        {
          "id": "#GATK_PrintReads.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": 406.0939039029232,
      "id": "#GATK_PrintReads"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  return '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "UnifiedGenotyper",
          {
            "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(4)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "A raw, unfiltered, highly specific callset in VCF format.",
            "type": [
              "null",
              "File"
            ],
            "label": "VCF",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reads",
              "sbg:metadata": {},
              "secondaryFiles": [
                ".idx"
              ],
              "glob": "*.vcf"
            },
            "sbg:fileTypes": "VCF",
            "id": "#raw_vcf"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type UnifiedGenotyper -nt 4 --reference_sequence /folder/reference.fasta --input_file sample1.bam --input_file sample2.bam --out sample1.vcf",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "vladimirk",
          "bogdang",
          "bix-demo"
        ],
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-unifiedgenotyper/14",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911349,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.vcf'\n  }\n  else{\n  \treturn read_namebase + '.vcf'\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 1971.6669149928698,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "reads": [
              {
                "path": "sample1.bam"
              },
              {
                "path": "sample2.bam"
              }
            ],
            "stand_emit_conf": 10,
            "intervals_file": [
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/intervals_file-1.ext",
                "secondaryFiles": []
              },
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/intervals_file-2.ext",
                "secondaryFiles": []
              }
            ],
            "memory_overhead_per_job": 0,
            "stand_call_conf": 50,
            "reference": {
              "path": "/folder/reference.fasta"
            },
            "dbsnp": {
              "path": "/folder/dbSNP.vcf"
            }
          }
        },
        "description": "Overview\n\nThis tool uses a Bayesian genotype likelihood model to estimate simultaneously the most likely genotypes and allele frequency in a population of N samples, emitting a genotype for each sample. The system can either emit just the variant sites or complete genotypes (which includes homozygous reference calls) satisfying some phred-scaled confidence value.\n\nInput\nThe read data from which to make variant calls.\n\nOutput\nA raw, unfiltered, highly sensitive callset in VCF format.\n\nUsage examples:\n\n//Multi-sample SNP calling\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I sample1.bam [-I sample2.bam ...] \\\n   --dbsnp dbSNP.vcf \\\n   -o snps.raw.vcf \\\n   -stand_call_conf [50.0] \\\n   -stand_emit_conf 10.0 \\\n   [-L targets.interval_list]\n \n//Generate calls at all sites\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o raw_variants.vcf \\\n   --output_mode EMIT_ALL_SITES\n \nCaveats\n\nThe caller can be very aggressive in calling variants in order to be very sensitive, so the raw output will contain many false positives. We use extensive post-calling filters to eliminate most of these FPs. See the documentation on filtering (especially by Variant Quality Score Recalibration) for more details.\nThis tool has been deprecated in favor of HaplotypeCaller, a much more sophisticated variant caller that produces much better calls, especially on indels, and includes features that allow it to scale to much larger cohort sizes.\nSpecial note on ploidy\n\nThis tool is able to handle almost any ploidy (except very high ploidies in large pooled experiments); the ploidy can be specified using the -ploidy argument for non-diploid organisms.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 422.7605820931547,
        "sbg:modifiedOn": 1476436438,
        "sbg:categories": [
          "Variant-Calling"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "GATK UnifiedGenotyper",
        "sbg:toolAuthor": "Broad Institute",
        "sbg:revisionNotes": "^.bai --> .bai in reads input",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_genotyper_UnifiedGenotyper.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 14,
        "successCodes": [],
        "sbg:latestRevision": 14,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911349,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911350,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911351,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911352,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911353,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911354,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1463297747,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1463663096,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1469527805,
            "sbg:revisionNotes": "bam.bai extension removed from secondary files of reads input.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1471364268,
            "sbg:revisionNotes": "dbsnp link.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1471445503,
            "sbg:revisionNotes": "dbsnp guard []concat().",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1472656204,
            "sbg:revisionNotes": "Metadata scatter.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 12,
            "sbg:modifiedOn": 1475751155,
            "sbg:revisionNotes": "fix for single interval file support",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 13,
            "sbg:modifiedOn": 1475802580,
            "sbg:revisionNotes": "Double --intervals removed!",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 14,
            "sbg:modifiedOn": 1476436438,
            "sbg:revisionNotes": "^.bai --> .bai in reads input",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "4",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold).",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "30.0",
            "label": "Stand Emit Conf",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--standard_min_confidence_threshold_for_emitting",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-stand_emit_conf",
            "id": "#stand_emit_conf"
          },
          {
            "description": "The minimum phred-scaled confidence threshold at which variants should be called.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "30.0",
            "label": "Stand Call Conf",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--standard_min_confidence_threshold_for_calling",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-stand_call_conf",
            "id": "#stand_call_conf"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "VCF file with the truth callset for the reference sample.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Reference Sample Calls",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sample_calls",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": null,
            "id": "#reference_sample_calls"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Read sequences in BAM format.",
            "type": [
              {
                "name": "reads",
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Read sequences",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input_file",
              "separate": true,
              "itemSeparator": null,
              "secondaryFiles": [
                ".bai"
              ]
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-I",
            "sbg:fileTypes": "SAM,BAM",
            "id": "#reads"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "The PCR error rate to be used for computing fragment-based likelihoods.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.0001",
            "label": "Pcr Error Rate",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pcr_error_rate",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-pcr_error",
            "id": "#pcr_error_rate"
          },
          {
            "description": "The PairHMM implementation to use for -glm INDEL genotype likelihood calculations.",
            "type": [
              "null",
              {
                "name": "pair_hmm_implementation",
                "type": "enum",
                "symbols": [
                  "EXACT",
                  "ORIGINAL",
                  "CACHING",
                  "LOGLESS_CACHING"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ORIGINAL",
            "label": "Pair Hmm Implementation",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pair_hmm_implementation",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-pairHMM",
            "id": "#pair_hmm_implementation"
          },
          {
            "description": "Non-reference probability calculation model to employ.",
            "type": [
              "null",
              {
                "name": "p_nonref_model",
                "type": "enum",
                "symbols": [
                  "EXACT_INDEPENDENT",
                  "EXACT_REFERENCE",
                  "EXACT_ORIGINAL",
                  "EXACT_GENERAL_PLOIDY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "EXACT_INDEPENDENT",
            "label": "P Nonref Model",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--p_nonref_model",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": null,
            "id": "#p_nonref_model"
          },
          {
            "description": "Specifies which type of calls we should output.",
            "type": [
              "null",
              {
                "name": "output_mode",
                "type": "enum",
                "symbols": [
                  "EMIT_VARIANTS_ONLY",
                  "EMIT_ALL_CONFIDENT_SITES",
                  "EMIT_ALL_SITES"
                ]
              }
            ],
            "sbg:toolDefaultValue": "EMIT_VARIANTS_ONLY",
            "label": "Output Mode",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--output_mode",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-out_mode",
            "id": "#output_mode"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Minimum fraction of all reads at a locus that must contain an indel (of any allele) for that sample to contribute to the indel count for alleles.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.25",
            "label": "Min Indel Frac",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-minIndelFrac",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-minIndelFrac",
            "id": "#min_indel_frac"
          },
          {
            "description": "Minimum number of consensus indels required to trigger genotyping run.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "5",
            "label": "Min Indel Cnt",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--min_indel_count_for_genotyping",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-minIndelCnt",
            "id": "#min_indel_cnt"
          },
          {
            "description": "Minimum base quality required to consider a base for calling.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "17",
            "label": "Min Base Quality Score",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--min_base_quality_score",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-mbq",
            "id": "#min_base_quality_score"
          },
          {
            "description": "Amount of RAM memory in MB to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Maximum fraction of reads with deletions spanning this locus for it to be callable [to disable, set to  1; default:0.05].",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.05",
            "label": "Max Deletion Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--max_deletion_fraction",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-deletions",
            "id": "#max_deletion_fraction"
          },
          {
            "description": "Maximum number of alternate alleles to genotype.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Max Alternate Alleles",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--max_alternate_alleles",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-maxAltAlleles",
            "id": "#max_alternate_alleles"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              {
                "name": "intervals_file",
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "script": "{\n  if($job.inputs.intervals_file){\n    if($job.inputs.intervals_file instanceof Array){\n      if($job.inputs.intervals_file.length > 1){\n        if([].concat($job.inputs.reads)[0].metadata)\n          if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n            return '--intervals ' + [].concat($job.inputs.reads)[0].metadata.intervals_file\n      } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n    } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n  } else\n    return ''\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:stageInput": "link",
            "id": "#intervals_file",
            "sbg:fileTypes": "BED,LIST,PICARD,INTERVAL_LIST,INTERVALS"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "Heterozygosity for indel calling.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.000125",
            "label": "Indel Heterozygosity",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--indel_heterozygosity",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-indelHeterozygosity",
            "id": "#indel_heterozygosity"
          },
          {
            "description": "Indel gap open penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "45",
            "label": "Indel Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--indelGapOpenPenalty",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-indelGOP",
            "id": "#indel_gap_open_penalty"
          },
          {
            "description": "Indel gap continuation penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "10",
            "label": "Indel Gap Continuation Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--indelGapContinuationPenalty",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-indelGCP",
            "id": "#indel_gap_continuation_penalty"
          },
          {
            "description": "Ignore lane when building error model, error model is then per-site.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Ignore Lane Info",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--ignoreLaneInfo",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": null,
            "id": "#ignore_lane_info"
          },
          {
            "description": "Heterozygosity value used to compute prior likelihoods for any locus.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.001",
            "label": "Heterozygosity",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--heterozygosity",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-hets",
            "id": "#heterozygosity"
          },
          {
            "description": "One or more classes/groups of annotations to apply to variant calls.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[u'Standard']",
            "label": "Group",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--group",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-G",
            "id": "#group"
          },
          {
            "description": "Specifies how to determine the alternate alleles to use for genotyping.",
            "type": [
              "null",
              {
                "name": "genotyping_mode",
                "type": "enum",
                "symbols": [
                  "DISCOVERY",
                  "GENOTYPE_GIVEN_ALLELES"
                ]
              }
            ],
            "sbg:toolDefaultValue": "DISCOVERY",
            "label": "Genotyping Mode",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--genotyping_mode",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-gt_mode",
            "id": "#genotyping_mode"
          },
          {
            "description": "Genotype likelihoods calculation model to employ -- SNP is the default option, while INDEL is also available for calling indels and BOTH is available for calling both together.",
            "type": [
              "null",
              {
                "name": "genotype_likelihoods_model",
                "type": "enum",
                "symbols": [
                  "SNP",
                  "INDEL",
                  "GENERALPLOIDYSNP",
                  "GENERALPLOIDYINDEL",
                  "BOTH"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SNP",
            "label": "Genotype Likelihoods Model",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--genotype_likelihoods_model",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-glm",
            "id": "#genotype_likelihoods_model"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "One or more specific annotations to exclude.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Exclude Annotation",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeAnnotation",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-XA",
            "id": "#exclude_annotation"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "DbSNP file in VCF format.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "DbSNP",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--dbsnp",
              "valueFrom": {
                "script": "{\n  return [].concat($job.inputs.dbsnp)[0].path\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-D",
            "sbg:fileTypes": "VCF",
            "id": "#dbsnp"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.05",
            "label": "Contamination",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--contamination_fraction_to_filter",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-contamination",
            "id": "#contamination"
          },
          {
            "description": "If provided, we will calculate the SLOD (SB annotation).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Compute Slod",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--computeSLOD",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-slod",
            "id": "#compute_slod"
          },
          {
            "description": "Comparison VCF file.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Comp",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--comp",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": null,
            "id": "#comp"
          },
          {
            "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "BQSR",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--BQSR",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-BQSR",
            "sbg:fileTypes": "GRP",
            "id": "#bqsr"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "One or more specific annotations to apply to variant calls.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Annotation",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--annotation",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-A",
            "id": "#annotation"
          },
          {
            "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Annotate Nda",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--annotateNDA",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Unified Genotyper",
            "sbg:altPrefix": "-nda",
            "id": "#annotate_nda"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          },
          {
            "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Alleles",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--alleles",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-alleles",
            "sbg:fileTypes": "VCF",
            "id": "#alleles"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-unifiedgenotyper/0",
        "cwlVersion": "sbg:draft-2"
      },
      "scatter": "#GATK_UnifiedGenotyper.reads",
      "outputs": [
        {
          "id": "#GATK_UnifiedGenotyper.raw_vcf"
        }
      ],
      "sbg:x": 1971.6669149928698,
      "inputs": [
        {
          "id": "#GATK_UnifiedGenotyper.validation_strictness"
        },
        {
          "id": "#GATK_UnifiedGenotyper.use_original_qualities"
        },
        {
          "id": "#GATK_UnifiedGenotyper.use_legacy_downsampler"
        },
        {
          "id": "#GATK_UnifiedGenotyper.unsafe"
        },
        {
          "default": 4,
          "id": "#GATK_UnifiedGenotyper.threads_per_job"
        },
        {
          "id": "#GATK_UnifiedGenotyper.tag"
        },
        {
          "id": "#GATK_UnifiedGenotyper.stand_emit_conf"
        },
        {
          "id": "#GATK_UnifiedGenotyper.stand_call_conf"
        },
        {
          "id": "#GATK_UnifiedGenotyper.remove_program_records"
        },
        {
          "id": "#GATK_UnifiedGenotyper.reference_sample_calls"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_UnifiedGenotyper.reference"
        },
        {
          "source": [
            "#GATK_PrintReads.recalibrated_bam"
          ],
          "id": "#GATK_UnifiedGenotyper.reads"
        },
        {
          "id": "#GATK_UnifiedGenotyper.read_group_black_list"
        },
        {
          "id": "#GATK_UnifiedGenotyper.read_filter"
        },
        {
          "id": "#GATK_UnifiedGenotyper.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_UnifiedGenotyper.phone_home"
        },
        {
          "id": "#GATK_UnifiedGenotyper.pedigree_validation_type"
        },
        {
          "id": "#GATK_UnifiedGenotyper.pedigree_string"
        },
        {
          "id": "#GATK_UnifiedGenotyper.pcr_error_rate"
        },
        {
          "id": "#GATK_UnifiedGenotyper.pair_hmm_implementation"
        },
        {
          "id": "#GATK_UnifiedGenotyper.p_nonref_model"
        },
        {
          "id": "#GATK_UnifiedGenotyper.output_mode"
        },
        {
          "id": "#GATK_UnifiedGenotyper.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_UnifiedGenotyper.min_indel_frac"
        },
        {
          "id": "#GATK_UnifiedGenotyper.min_indel_cnt"
        },
        {
          "id": "#GATK_UnifiedGenotyper.min_base_quality_score"
        },
        {
          "default": 2048,
          "id": "#GATK_UnifiedGenotyper.memory_per_job"
        },
        {
          "default": 64,
          "id": "#GATK_UnifiedGenotyper.memory_overhead_per_job"
        },
        {
          "id": "#GATK_UnifiedGenotyper.max_runtime_units"
        },
        {
          "id": "#GATK_UnifiedGenotyper.max_runtime"
        },
        {
          "id": "#GATK_UnifiedGenotyper.max_deletion_fraction"
        },
        {
          "id": "#GATK_UnifiedGenotyper.max_alternate_alleles"
        },
        {
          "id": "#GATK_UnifiedGenotyper.keep_program_records"
        },
        {
          "source": [
            "#SBG_Prepare_Intervals_1.intervals"
          ],
          "id": "#GATK_UnifiedGenotyper.intervals_file"
        },
        {
          "id": "#GATK_UnifiedGenotyper.intervals"
        },
        {
          "id": "#GATK_UnifiedGenotyper.interval_set_rule"
        },
        {
          "id": "#GATK_UnifiedGenotyper.interval_padding"
        },
        {
          "id": "#GATK_UnifiedGenotyper.interval_merging"
        },
        {
          "id": "#GATK_UnifiedGenotyper.indel_heterozygosity"
        },
        {
          "id": "#GATK_UnifiedGenotyper.indel_gap_open_penalty"
        },
        {
          "id": "#GATK_UnifiedGenotyper.indel_gap_continuation_penalty"
        },
        {
          "id": "#GATK_UnifiedGenotyper.ignore_lane_info"
        },
        {
          "id": "#GATK_UnifiedGenotyper.heterozygosity"
        },
        {
          "id": "#GATK_UnifiedGenotyper.group"
        },
        {
          "id": "#GATK_UnifiedGenotyper.genotyping_mode"
        },
        {
          "default": "BOTH",
          "id": "#GATK_UnifiedGenotyper.genotype_likelihoods_model"
        },
        {
          "id": "#GATK_UnifiedGenotyper.gatk_key"
        },
        {
          "id": "#GATK_UnifiedGenotyper.fix_misencoded_quals"
        },
        {
          "id": "#GATK_UnifiedGenotyper.exclude_intervals"
        },
        {
          "id": "#GATK_UnifiedGenotyper.exclude_annotation"
        },
        {
          "id": "#GATK_UnifiedGenotyper.emit_original_quals"
        },
        {
          "id": "#GATK_UnifiedGenotyper.downsampling_type"
        },
        {
          "id": "#GATK_UnifiedGenotyper.downsample_to_fraction"
        },
        {
          "id": "#GATK_UnifiedGenotyper.downsample_to_coverage"
        },
        {
          "id": "#GATK_UnifiedGenotyper.disable_radnomization"
        },
        {
          "id": "#GATK_UnifiedGenotyper.disable_indel_quals"
        },
        {
          "id": "#GATK_UnifiedGenotyper.default_base_qualities"
        },
        {
          "source": [
            "#known_sites_1"
          ],
          "id": "#GATK_UnifiedGenotyper.dbsnp"
        },
        {
          "default": 1,
          "id": "#GATK_UnifiedGenotyper.cpu_per_job"
        },
        {
          "id": "#GATK_UnifiedGenotyper.contamination"
        },
        {
          "id": "#GATK_UnifiedGenotyper.compute_slod"
        },
        {
          "id": "#GATK_UnifiedGenotyper.comp"
        },
        {
          "id": "#GATK_UnifiedGenotyper.bqsr"
        },
        {
          "id": "#GATK_UnifiedGenotyper.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_UnifiedGenotyper.baq"
        },
        {
          "id": "#GATK_UnifiedGenotyper.annotation"
        },
        {
          "id": "#GATK_UnifiedGenotyper.annotate_nda"
        },
        {
          "id": "#GATK_UnifiedGenotyper.allow_potentailly_misencoded_quals"
        },
        {
          "id": "#GATK_UnifiedGenotyper.alleles"
        }
      ],
      "sbg:y": 422.7605820931547,
      "id": "#GATK_UnifiedGenotyper"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "echo",
          "Preparing",
          "VQSR",
          "Resources"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Prepared VCF file for GATK VariantRecalibrator",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_vcf",
              "sbg:metadata": {
                "resources": {
                  "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "glob": "*.vcf"
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#output_vcf",
            "label": "Prepared VCF"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "echo Preparing VQSR Resources",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "djordje_klisic",
          "vladimirk",
          "bogdang"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "",
        "sbg:createdOn": 1461613037,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 1965.0002025365889,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "known": true,
            "prior": 12,
            "input_vcf": {
              "path": "vcf"
            },
            "truth": true,
            "label": "aaa"
          }
        },
        "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
        "y": 676.0938190788879,
        "sbg:modifiedOn": 1476451888,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "ubuntu:14.04",
            "dockerImageId": ""
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Prepare VQSR dbSNP",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "command line echo",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "djordje_klisic",
        "sbg:revision": 4,
        "successCodes": [],
        "sbg:latestRevision": 4,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1461613037,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1461613070,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1471362399,
            "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1472512980,
            "sbg:revisionNotes": "VCF_input not required.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1476451888,
            "sbg:revisionNotes": "command line echo",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "Truth.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#truth",
            "label": "Truth"
          },
          {
            "description": "Training.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#training",
            "label": "Training"
          },
          {
            "description": "Prior.",
            "sbg:category": "",
            "type": [
              "float"
            ],
            "id": "#prior",
            "label": "Prior"
          },
          {
            "description": "Label.",
            "sbg:category": "",
            "type": [
              "string"
            ],
            "id": "#label",
            "label": "Label"
          },
          {
            "description": "Known.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#known",
            "label": "Known"
          },
          {
            "description": "Input VCF file for GATK VariantRecalibrator Resources.",
            "sbg:stageInput": "link",
            "required": false,
            "label": "VCF File",
            "type": [
              "null",
              "File"
            ],
            "id": "#input_vcf",
            "sbg:fileTypes": "VCF"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Prepare_VQSR_dbSNP.output_vcf"
        }
      ],
      "sbg:x": 1965.0002025365889,
      "inputs": [
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_dbSNP.truth"
        },
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_dbSNP.training"
        },
        {
          "default": 2,
          "id": "#SBG_Prepare_VQSR_dbSNP.prior"
        },
        {
          "default": "dbsnp",
          "id": "#SBG_Prepare_VQSR_dbSNP.label"
        },
        {
          "id": "#SBG_Prepare_VQSR_dbSNP.known"
        },
        {
          "source": [
            "#known_sites_1"
          ],
          "id": "#SBG_Prepare_VQSR_dbSNP.input_vcf"
        }
      ],
      "sbg:y": 676.0938190788879,
      "id": "#SBG_Prepare_VQSR_dbSNP"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "echo",
          "Preparing",
          "VQSR",
          "Resources"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Prepared VCF file for GATK VariantRecalibrator",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_vcf",
              "sbg:metadata": {
                "resources": {
                  "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "glob": "*.vcf"
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#output_vcf",
            "label": "Prepared VCF"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "echo Preparing VQSR Resources",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "djordje_klisic",
          "vladimirk",
          "bogdang"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "",
        "sbg:createdOn": 1461613037,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 2576.6670919921808,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "known": true,
            "prior": 12,
            "input_vcf": {
              "path": "vcf"
            },
            "truth": true,
            "label": "aaa"
          }
        },
        "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
        "y": 389.42713929919915,
        "sbg:modifiedOn": 1476451888,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "ubuntu:14.04",
            "dockerImageId": ""
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Prepare VQSR Mills",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "command line echo",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "djordje_klisic",
        "sbg:revision": 4,
        "successCodes": [],
        "sbg:latestRevision": 4,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1461613037,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1461613070,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1471362399,
            "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1472512980,
            "sbg:revisionNotes": "VCF_input not required.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1476451888,
            "sbg:revisionNotes": "command line echo",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "Truth.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#truth",
            "label": "Truth"
          },
          {
            "description": "Training.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#training",
            "label": "Training"
          },
          {
            "description": "Prior.",
            "sbg:category": "",
            "type": [
              "float"
            ],
            "id": "#prior",
            "label": "Prior"
          },
          {
            "description": "Label.",
            "sbg:category": "",
            "type": [
              "string"
            ],
            "id": "#label",
            "label": "Label"
          },
          {
            "description": "Known.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#known",
            "label": "Known"
          },
          {
            "description": "Input VCF file for GATK VariantRecalibrator Resources.",
            "sbg:stageInput": "link",
            "required": false,
            "label": "VCF File",
            "type": [
              "null",
              "File"
            ],
            "id": "#input_vcf",
            "sbg:fileTypes": "VCF"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Prepare_VQSR_Mills.output_vcf"
        }
      ],
      "sbg:x": 2576.6670919921808,
      "inputs": [
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_Mills.truth"
        },
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_Mills.training"
        },
        {
          "default": 12,
          "id": "#SBG_Prepare_VQSR_Mills.prior"
        },
        {
          "default": "mills",
          "id": "#SBG_Prepare_VQSR_Mills.label"
        },
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_Mills.known"
        },
        {
          "source": [
            "#input_vcf_3"
          ],
          "id": "#SBG_Prepare_VQSR_Mills.input_vcf"
        }
      ],
      "sbg:y": 389.42713929919915,
      "id": "#SBG_Prepare_VQSR_Mills"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "echo",
          "Preparing",
          "VQSR",
          "Resources"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Prepared VCF file for GATK VariantRecalibrator",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_vcf",
              "sbg:metadata": {
                "resources": {
                  "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "glob": "*.vcf"
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#output_vcf",
            "label": "Prepared VCF"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "echo Preparing VQSR Resources",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "djordje_klisic",
          "vladimirk",
          "bogdang"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "",
        "sbg:createdOn": 1461613037,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 2295.0003353357424,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "known": true,
            "prior": 12,
            "input_vcf": {
              "path": "vcf"
            },
            "truth": true,
            "label": "aaa"
          }
        },
        "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
        "y": -22.239618165212974,
        "sbg:modifiedOn": 1476451888,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "ubuntu:14.04",
            "dockerImageId": ""
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Prepare VQSR 1000G",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "command line echo",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "djordje_klisic",
        "sbg:revision": 4,
        "successCodes": [],
        "sbg:latestRevision": 4,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1461613037,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1461613070,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1471362399,
            "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1472512980,
            "sbg:revisionNotes": "VCF_input not required.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1476451888,
            "sbg:revisionNotes": "command line echo",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "Truth.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#truth",
            "label": "Truth"
          },
          {
            "description": "Training.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#training",
            "label": "Training"
          },
          {
            "description": "Prior.",
            "sbg:category": "",
            "type": [
              "float"
            ],
            "id": "#prior",
            "label": "Prior"
          },
          {
            "description": "Label.",
            "sbg:category": "",
            "type": [
              "string"
            ],
            "id": "#label",
            "label": "Label"
          },
          {
            "description": "Known.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#known",
            "label": "Known"
          },
          {
            "description": "Input VCF file for GATK VariantRecalibrator Resources.",
            "sbg:stageInput": "link",
            "required": false,
            "label": "VCF File",
            "type": [
              "null",
              "File"
            ],
            "id": "#input_vcf",
            "sbg:fileTypes": "VCF"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Prepare_VQSR_1000G.output_vcf"
        }
      ],
      "sbg:x": 2295.0003353357424,
      "inputs": [
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_1000G.truth"
        },
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_1000G.training"
        },
        {
          "default": 10,
          "id": "#SBG_Prepare_VQSR_1000G.prior"
        },
        {
          "default": "1000G",
          "id": "#SBG_Prepare_VQSR_1000G.label"
        },
        {
          "id": "#SBG_Prepare_VQSR_1000G.known"
        },
        {
          "source": [
            "#input_vcf_2"
          ],
          "id": "#SBG_Prepare_VQSR_1000G.input_vcf"
        }
      ],
      "sbg:y": -22.239618165212974,
      "id": "#SBG_Prepare_VQSR_1000G"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "echo",
          "Preparing",
          "VQSR",
          "Resources"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Prepared VCF file for GATK VariantRecalibrator",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_vcf",
              "sbg:metadata": {
                "resources": {
                  "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "glob": "*.vcf"
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#output_vcf",
            "label": "Prepared VCF"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "echo Preparing VQSR Resources",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "djordje_klisic",
          "vladimirk",
          "bogdang"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "",
        "sbg:createdOn": 1461613037,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 2303.3338323566823,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "known": true,
            "prior": 12,
            "input_vcf": {
              "path": "vcf"
            },
            "truth": true,
            "label": "aaa"
          }
        },
        "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
        "y": -188.90630268678262,
        "sbg:modifiedOn": 1476451888,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "ubuntu:14.04",
            "dockerImageId": ""
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Prepare VQSR HapMap",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "command line echo",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "djordje_klisic",
        "sbg:revision": 4,
        "successCodes": [],
        "sbg:latestRevision": 4,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1461613037,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1461613070,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1471362399,
            "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1472512980,
            "sbg:revisionNotes": "VCF_input not required.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1476451888,
            "sbg:revisionNotes": "command line echo",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "Truth.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#truth",
            "label": "Truth"
          },
          {
            "description": "Training.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#training",
            "label": "Training"
          },
          {
            "description": "Prior.",
            "sbg:category": "",
            "type": [
              "float"
            ],
            "id": "#prior",
            "label": "Prior"
          },
          {
            "description": "Label.",
            "sbg:category": "",
            "type": [
              "string"
            ],
            "id": "#label",
            "label": "Label"
          },
          {
            "description": "Known.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#known",
            "label": "Known"
          },
          {
            "description": "Input VCF file for GATK VariantRecalibrator Resources.",
            "sbg:stageInput": "link",
            "required": false,
            "label": "VCF File",
            "type": [
              "null",
              "File"
            ],
            "id": "#input_vcf",
            "sbg:fileTypes": "VCF"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Prepare_VQSR_HapMap.output_vcf"
        }
      ],
      "sbg:x": 2303.3338323566823,
      "inputs": [
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_HapMap.truth"
        },
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_HapMap.training"
        },
        {
          "default": 15,
          "id": "#SBG_Prepare_VQSR_HapMap.prior"
        },
        {
          "default": "hapmap",
          "id": "#SBG_Prepare_VQSR_HapMap.label"
        },
        {
          "id": "#SBG_Prepare_VQSR_HapMap.known"
        },
        {
          "source": [
            "#input_vcf_1"
          ],
          "id": "#SBG_Prepare_VQSR_HapMap.input_vcf"
        }
      ],
      "sbg:y": -188.90630268678262,
      "id": "#SBG_Prepare_VQSR_HapMap"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "echo",
          "Preparing",
          "VQSR",
          "Resources"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Prepared VCF file for GATK VariantRecalibrator",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_vcf",
              "sbg:metadata": {
                "resources": {
                  "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "glob": "*.vcf"
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#output_vcf",
            "label": "Prepared VCF"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "echo Preparing VQSR Resources",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "djordje_klisic",
          "vladimirk",
          "bogdang"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "",
        "sbg:createdOn": 1461613037,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 2303.333517498445,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "known": true,
            "prior": 12,
            "input_vcf": {
              "path": "vcf"
            },
            "truth": true,
            "label": "aaa"
          }
        },
        "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
        "y": -312.23961860231327,
        "sbg:modifiedOn": 1476451888,
        "sbg:categories": [
          "VCF-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "ubuntu:14.04",
            "dockerImageId": ""
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Prepare VQSR Omni",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "command line echo",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "djordje_klisic",
        "sbg:revision": 4,
        "successCodes": [],
        "sbg:latestRevision": 4,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1461613037,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1461613070,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "djordje_klisic"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1471362399,
            "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1472512980,
            "sbg:revisionNotes": "VCF_input not required.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1476451888,
            "sbg:revisionNotes": "command line echo",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "Truth.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#truth",
            "label": "Truth"
          },
          {
            "description": "Training.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#training",
            "label": "Training"
          },
          {
            "description": "Prior.",
            "sbg:category": "",
            "type": [
              "float"
            ],
            "id": "#prior",
            "label": "Prior"
          },
          {
            "description": "Label.",
            "sbg:category": "",
            "type": [
              "string"
            ],
            "id": "#label",
            "label": "Label"
          },
          {
            "description": "Known.",
            "sbg:category": "",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#known",
            "label": "Known"
          },
          {
            "description": "Input VCF file for GATK VariantRecalibrator Resources.",
            "sbg:stageInput": "link",
            "required": false,
            "label": "VCF File",
            "type": [
              "null",
              "File"
            ],
            "id": "#input_vcf",
            "sbg:fileTypes": "VCF"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-prepare-gatk-variantrecalibrator-resource/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Prepare_VQSR_Omni.output_vcf"
        }
      ],
      "sbg:x": 2303.333517498445,
      "inputs": [
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_Omni.truth"
        },
        {
          "default": true,
          "id": "#SBG_Prepare_VQSR_Omni.training"
        },
        {
          "default": 12,
          "id": "#SBG_Prepare_VQSR_Omni.prior"
        },
        {
          "default": "omni",
          "id": "#SBG_Prepare_VQSR_Omni.label"
        },
        {
          "id": "#SBG_Prepare_VQSR_Omni.known"
        },
        {
          "source": [
            "#input_vcf"
          ],
          "id": "#SBG_Prepare_VQSR_Omni.input_vcf"
        }
      ],
      "sbg:y": -312.23961860231327,
      "id": "#SBG_Prepare_VQSR_Omni"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "python",
          "sbg_prepare_intervals.py"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "File containing the names of created files.",
            "type": [
              "null",
              "string"
            ],
            "label": "Output file names",
            "outputBinding": {
              "glob": "Intervals/names.txt",
              "loadContents": true,
              "outputEval": {
                "script": "{   \n content =  $self[0].contents.replace(/\\0/g, '')\n content = content.replace('[','')\n content = content.replace(']','')\n content = content.replace(/\\'/g, \"\")\n content = content.replace(/\\s/g, '')\n content_arr = content.split(\",\")\n\n return content_arr\n \n\n} ",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              }
            },
            "sbg:fileTypes": "TXT",
            "id": "#names"
          },
          {
            "description": "Array of BED files genereted as per selected Split Mode.",
            "type": [
              "null",
              {
                "name": "intervals",
                "type": "array",
                "items": "File"
              }
            ],
            "label": "Intervals",
            "outputBinding": {
              "sbg:metadata": {
                "sbg_scatter": "true"
              },
              "glob": "Intervals/*.bed"
            },
            "sbg:fileTypes": "BED",
            "id": "#intervals"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "python sbg_prepare_intervals.py  --format \"chr start end\" --mode 3",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "bix-demo",
          "vladimirk",
          "bogdang",
          "medjo"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-prepare-intervals/4",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "filename": "sbg_prepare_intervals.py",
                "fileContent": "\"\"\"\nUsage:\n    sbg_prepare_intervals.py [options] [--fastq FILE --bed FILE --mode INT --format STR --others STR]\n\nDescription:\n    Purpose of this tool is to split BED file into files based on the selected mode.\n    If bed file is not provided fai(fasta index) file is converted to bed.\n\nOptions:\n\n    -h, --help            Show this message.\n\n    -v, -V, --version     Tool version.\n\n    -b, -B, --bed FILE    Path to input bed file.\n\n    --fai FILE            Path to input fai file.\n\n    --format STR          Output file format.\n\n    --mode INT            Select input mode.\n\n\"\"\"\n\n\nfrom docopt import docopt\nimport os\nimport shutil\nimport glob\n\ndefault_extension = '.bed'  # for output files\n\n\n\ndef create_file(contents, contig_name, extension=default_extension):\n    \"\"\"function for creating a file for all intervals in a contig\"\"\"\n\n    new_file = open(\"Intervals/\" + contig_name + extension, \"w\")\n    new_file.write(contents)\n    new_file.close()\n\n\ndef add_to_file(line, name, extension=default_extension):\n    \"\"\"function for adding a line to a file\"\"\"\n\n    new_file = open(\"Intervals/\" + name + extension, \"a\")\n    if lformat == formats[1]:\n        sep = line.split(\"\\t\")\n        line = sep[0] + \":\" + sep[1] + \"-\" + sep[2]\n    new_file.write(line)\n    new_file.close()\n\n\ndef fai2bed(fai):\n    \"\"\"function to create a bed file from fai file\"\"\"\n\n    region_thr = 10000000  # threshold used to determine starting point accounting for telomeres in chromosomes\n    if not fai.rfind(\".fasta.fai\") == -1:\n        basename = fai[0:fai.rfind(\".fasta.fai\")]\n    else:\n        basename = fai[0:fai.rfind(\".\")]\n    with open(fai, \"r\") as ins:\n        new_array = []\n        for line in ins:\n            len_reg = int(line.split()[1])\n            cutoff = 0 if (len_reg < region_thr) else 0  # sd\\\\telomeres or start with 1\n            new_line = line.split()[0] + '\\t' + str(cutoff) + '\\t' + str(len_reg + cutoff)\n            new_array.append(new_line)\n    new_file = open(basename + \".bed\", \"w\")\n    new_file.write(\"\\n\".join(new_array))\n    return basename + \".bed\"\n\ndef chr_intervals(no_of_chrms = 23):\n    \"\"\"returns all possible designations for chromosome intervals\"\"\"\n    \n    chrms = []\n    for i in range(1, no_of_chrms):\n        chrms.append(\"chr\" + str(i))\n        chrms.append(str(i))\n    chrms.extend([\"x\", \"y\", \"chrx\", \"chry\"])\n    return chrms\n\n\ndef mode_1(orig_file):\n    \"\"\"mode 1: every line is a new file\"\"\"\n\n    with open(orig_file, \"r\") as ins:\n        prev = \"\"\n        counter = 0\n        names = []\n        for line in ins:\n            if line.split()[0] == prev:\n                counter += 1\n            else:\n                counter = 0\n            suffix = \"\" if (counter == 0) else \"_\" + str(counter)\n            create_file(line, line.split()[0] + suffix)\n            names.append(line.split()[0] + suffix)\n            prev = line.split()[0]\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\ndef mode_2(orig_file, others_name):\n    \"\"\"mode 2: separate file is created for each chromosome, and one file is created for other intervals\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, 'r') as ins:\n        for line in ins:\n            name = line.split()[0]\n            if name.lower() in chrms:\n                name = name.lower()\n            else:\n                name = others_name\n            try:\n                add_to_file(line, name)\n                if not name in names:\n                    names.append(name)\n            except:\n                raise Exception(\"Couldn't create or write in the file in mode 2\")\n\n        create_file(str(names), \"names\", extension = \".txt\")\n\n\ndef mode_3(orig_file, extension=default_extension):\n    \"\"\"mode 3: input file is staged to output\"\"\"\n\n    orig_name = orig_file.split(\"/\")[len(orig_file.split(\"/\")) - 1]\n    output_file = r\"./Intervals/\" + orig_name[0:orig_name.rfind('.')] + extension\n\n    shutil.copyfile(orig_file, output_file)\n\n    names = [orig_name[0:orig_name.rfind('.')]]\n    create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef mode_4(orig_file, others_name):\n    \"\"\"mode 4: every interval in chromosomes is in a separate file. Other intervals are in a single file\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, \"r\") as ins:\n        counter = {}\n        for line in ins:\n            name = line.split()[0].lower()\n            if name in chrms:\n                if name in counter:\n                    counter[name] += 1\n                else:\n                    counter[name] = 0\n                suffix = \"\" if (counter[name] == 0) else \"_\" + str(counter[name])\n                create_file(line, name + suffix)\n                names.append(name + suffix)\n                prev = name\n            else:\n                name = others_name\n                if not name in names:\n                    names.append(name)\n                try:\n                    add_to_file(line, name)\n                except:\n                    raise Exception(\"Couldn't create or write in the file in mode 4\")\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef prepare_intervals():\n    # reading input files and split mode from command line\n    args = docopt(__doc__, version='1.0')\n\n    bed_file = args['--bed']\n    fai_file = args['--fai']\n    split_mode = int(args['--mode'])\n\n    \n    # define file name for non-chromosomal contigs\n    others_name = 'others' \n\n    global formats, lformat\n    formats = [\"chr start end\", \"chr:start-end\"]\n    lformat = args['--format']\n    if lformat == None:\n        lformat = formats[0]\n    if not lformat in formats:\n        raise Exception('Unsuported interval format')\n\n    if not os.path.exists(r\"./Intervals\"):\n        os.mkdir(r\"./Intervals\")\n    else:\n        files = glob.glob(r\"./Intervals/*\")\n        for f in files:\n            os.remove(f)\n\n    # create variable input_file taking bed_file as priority\n    if bed_file:\n        input_file = bed_file\n    elif fai_file:\n        input_file = fai2bed(fai_file)\n    else:\n        raise Exception('No input files are provided')\n\n    # calling adequate split mode function\n    if split_mode == 1:\n        mode_1(input_file)\n    elif split_mode == 2:\n        mode_2(input_file, others_name)\n    elif split_mode == 3:\n        if bed_file:\n            mode_3(input_file)\n        else:\n            raise Exception('Bed file is required for mode 3')\n    elif split_mode == 4:\n        mode_4(input_file, others_name)\n    else:\n        raise Exception('Split mode value is not set')\n\n\nif __name__ == '__main__':\n    prepare_intervals()"
              }
            ]
          },
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "1.0",
        "sbg:createdOn": 1473083821,
        "arguments": [
          {
            "valueFrom": {
              "script": "{\t\n  if (typeof($job.inputs.format) !== \"undefined\")\n  \treturn \"--format \" + \"\\\"\" + $job.inputs.format + \"\\\"\"\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 1066.666849083377,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "format": "chr start end",
            "split_mode": null,
            "fai_file": {
              "size": 0,
              "class": "File",
              "path": "/path/to/fai_file.ext",
              "secondaryFiles": []
            },
            "bed_file": {
              "size": 0,
              "class": "File",
              "path": "/path/to/bed_file.ext",
              "secondaryFiles": []
            }
          }
        },
        "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:\n\n1. Whole Genome - The tool creates one interval file per line of the input BED(FAI) file.\nEach interval file contains a single line (one of the lines of BED(FAI) input file).\n\n2. Whole Genome with reduced number of jobs - For each contig(chromosome) a single file\nis created containing all the intervals corresponding to it .\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n3. Whole Exome - BED file is required for execution of this mode. If mode  3 is applied input is passed to the output.\n\n4. Whole Genome Hybrid - For each chromosome a single file is created for each interval.\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").",
        "y": 609.427120132993,
        "sbg:modifiedOn": 1478525360,
        "sbg:categories": [
          "Converters"
        ],
        "hints": [
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/bogdang/sbg_prepare_intervals:1.0",
            "dockerImageId": ""
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG Prepare Intervals",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "Fixed Toolkit name.",
        "sbg:modifiedBy": "bix-demo",
        "sbg:image_url": null,
        "sbg:createdBy": "vladimirk",
        "sbg:revision": 4,
        "successCodes": [],
        "sbg:latestRevision": 4,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1473083821,
            "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/75",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1473084447,
            "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/76",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1473928444,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "medjo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1474970272,
            "sbg:revisionNotes": "split_mode set to required",
            "sbg:modifiedBy": "medjo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1478525360,
            "sbg:revisionNotes": "Fixed Toolkit name.",
            "sbg:modifiedBy": "bix-demo"
          }
        ],
        "inputs": [
          {
            "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:  1. Whole Genome - The tool creates one interval file per line of the input BED(FAI) file. Each interval file contains a single line (one of the lines of BED(FAI) input file).  2. Whole Genome with reduced number of jobs - For each contig(chromosome) a single file is created containing all the intervals corresponding to it . All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\").  3. Whole Exome - BED file is required for execution of this mode. If mode  3 is applied input is passed to the output.  4. Whole Exome Parallel - BED file is required for execution of this mode. For each contig(chromosome) a single file is created containing all the intervals corresponding to it. All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\"). If split mode is not selected, the tool will output original BED file.",
            "type": [
              {
                "name": "split_mode",
                "type": "enum",
                "symbols": [
                  "File per interval",
                  "File per chr with alt contig in a single file",
                  "Output original BED",
                  "File per interval with alt contig in a single file"
                ]
              }
            ],
            "label": "Split mode",
            "sbg:category": "Input",
            "inputBinding": {
              "valueFrom": {
                "script": "{\n  mode = $job.inputs.split_mode\n  switch (mode) \n  {\n    case \"File per interval\": \n      return 1\n    case \"File per chr with alt contig in a single file\": \n      return 2\n    case \"Output original BED\": \n      return 3\n    case \"File per interval with alt contig in a single file\": \n      return 4  \n  }\n  return 3\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "sbg:cmdInclude": true,
              "prefix": "--mode",
              "position": 3,
              "separate": true
            },
            "id": "#split_mode"
          },
          {
            "description": "Format of the intervals in the generated files.",
            "sbg:category": "Input",
            "type": [
              "null",
              {
                "name": "format",
                "type": "enum",
                "symbols": [
                  "chr start end",
                  "chr:start-end"
                ]
              }
            ],
            "id": "#format",
            "label": "Interval format"
          },
          {
            "description": "FAI file is converted to BED format if BED file is not provided.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Input FAI file",
            "sbg:category": "File Input",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--fai",
              "position": 2,
              "separate": true
            },
            "sbg:fileTypes": "FAI",
            "id": "#fai_file"
          },
          {
            "description": "Input BED file containing intervals. Required for modes 3 and 4.",
            "sbg:stageInput": "link",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Input BED file",
            "sbg:category": "File Input",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--bed",
              "position": 1,
              "separate": true
            },
            "sbg:fileTypes": "BED",
            "id": "#bed_file"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-prepare-intervals/1",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#SBG_Prepare_Intervals_1.names"
        },
        {
          "id": "#SBG_Prepare_Intervals_1.intervals"
        }
      ],
      "sbg:x": 1066.666849083377,
      "inputs": [
        {
          "default": "File per chr with alt contig in a single file",
          "id": "#SBG_Prepare_Intervals_1.split_mode"
        },
        {
          "id": "#SBG_Prepare_Intervals_1.format"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_index"
          ],
          "id": "#SBG_Prepare_Intervals_1.fai_file"
        },
        {
          "source": [
            "#bed_file_1"
          ],
          "id": "#SBG_Prepare_Intervals_1.bed_file"
        }
      ],
      "sbg:y": 609.427120132993,
      "id": "#SBG_Prepare_Intervals_1"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "IndelRealigner"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Realigned BAM.",
            "type": [
              "null",
              "File"
            ],
            "label": "Realigned BAM",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reads",
              "sbg:metadata": {
                "intervals_file": {
                  "script": "{\n  if ($job.inputs.target_intervals)\n    if($job.inputs.target_intervals.metadata)\n      if('intervals_file' in $job.inputs.target_intervals.metadata)\n        return $job.inputs.target_intervals.metadata.intervals_file\n  return 'NO_INTERVALS'\n}",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "glob": "*.realigned.bam"
            },
            "sbg:fileTypes": "BAM",
            "id": "#realigned_bam_file"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type IndelRealigner --reference_sequence /folder/reference.fasta --input_file /folder/input.bam --targetIntervals intervalListFromRTC.intervals --out input.realigned.bam",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "vladimirk",
          "bix-demo",
          "bogdang"
        ],
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-indelrealigner/13",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911378,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.realigned.bam'\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 1421.667051858386,
        "sbg:job": {
          "allocatedResources": {
            "mem": 3048,
            "cpu": 1
          },
          "inputs": {
            "target_intervals": {
              "metadata": {
                "intervals_file": "treterfgsdfsd.4444"
              },
              "size": 0,
              "class": "File",
              "path": "intervalListFromRTC.intervals",
              "secondaryFiles": []
            },
            "reads": [
              {
                "path": "/folder/input.bam"
              }
            ],
            "intervals_file": [
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/intervals_file-1.ext",
                "secondaryFiles": []
              },
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/intervals_file-2.ext",
                "secondaryFiles": []
              }
            ],
            "memory_overhead_per_job": 1000,
            "reference": {
              "path": "/folder/reference.fasta"
            },
            "memory_per_job": null,
            "intervals": "",
            "known_alleles": [
              {
                "path": "/folder/indels.vcf"
              }
            ]
          }
        },
        "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such at mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this walker uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists. Following local realignment, the GATK tool Unified Genotyper can be used to sensitively and specifically identify indels.\n\nThere are 2 steps to the realignment process:\n\n1. Determining (small) suspicious intervals which are likely in need of realignment (see the RealignerTargetCreator tool)\n2. Running the realigner over those intervals (IndelRealigner)\nFor more details, see the indel realignment method documentation.\n\nInput\nOne or more aligned BAM files and optionally one or more lists of known indels.\n\nOutput\nA realigned version of your input BAM file(s).\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T IndelRealigner \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -targetIntervals intervalListFromRTC.intervals \\\n   -o realignedBam.bam\n \nCaveats\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 414.4274774032482,
        "sbg:modifiedOn": 1478713467,
        "sbg:categories": [
          "Alignment"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "GATK IndelRealigner",
        "sbg:toolAuthor": "Broad Institute",
        "sbg:revisionNotes": "Output name based on reads filename",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_IndelRealigner.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 13,
        "successCodes": [],
        "sbg:latestRevision": 13,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911378,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911378,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911379,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911380,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911381,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911382,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1460993599,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1472651971,
            "sbg:revisionNotes": "Scatter metadata support.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1472652361,
            "sbg:revisionNotes": "metadata scatter 2",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1472655804,
            "sbg:revisionNotes": "scatter metadata 3",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1472724542,
            "sbg:revisionNotes": ".bai as secondary.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1472738930,
            "sbg:revisionNotes": "output single file.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 12,
            "sbg:modifiedOn": 1476371352,
            "sbg:revisionNotes": "Added support for run without intervals",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 13,
            "sbg:modifiedOn": 1478713467,
            "sbg:revisionNotes": "Output name based on reads filename",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "Intervals file output from RealignerTargetCreator.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Target Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--targetIntervals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-targetIntervals",
            "sbg:fileTypes": "TXT,INTERVALS",
            "id": "#target_intervals"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Read sequences in BAM format.",
            "type": [
              {
                "name": "reads",
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Read sequences",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input_file",
              "separate": true,
              "itemSeparator": null,
              "secondaryFiles": [
                ".bai"
              ]
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-I",
            "sbg:fileTypes": "SAM, BAM",
            "id": "#reads"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Don't output the original cigar or alignment start tags for each realigned read in the output bam.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "No Original Alignment Tags",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--noOriginalAlignmentTags",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-noTags",
            "id": "#no_original_alignment_tags"
          },
          {
            "description": "Amount of RAM memory in MB to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Max reads allowed to be kept in memory at a time by the SAMFileWriter.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "150000",
            "label": "Max Reads In Memory",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxReadsInMemory",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-maxInMemory",
            "id": "#max_reads_in_memory"
          },
          {
            "description": "Max reads allowed at an interval for realignment.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "20000",
            "label": "Max Reads For Realignment",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxReadsForRealignment",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-maxReads",
            "id": "#max_reads_for_realignment"
          },
          {
            "description": "Max reads used for finding the alternate consensuses (necessary to improve performance in deep coverage).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "120",
            "label": "Max Reads For Consensuses",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxReadsForConsensuses",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-greedy",
            "id": "#max_reads_for_consensuses"
          },
          {
            "description": "Maximum positional move in basepairs that a read can be adjusted during realignment.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "200",
            "label": "Max Positional Move Allowed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxPositionalMoveAllowed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-maxPosMove",
            "id": "#max_positional_move_allowed"
          },
          {
            "description": "Maximum insert size of read pairs that we attempt to realign.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "3000",
            "label": "Max Isize For Movement",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxIsizeForMovement",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-maxIsize",
            "id": "#max_isize_for_movement"
          },
          {
            "description": "Max alternate consensuses to try (necessary to improve performance in deep coverage).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "30",
            "label": "Max Consensuses",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxConsensuses",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": null,
            "id": "#max_consensuses"
          },
          {
            "description": "LOD threshold above which the cleaner will clean.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "5.0",
            "label": "Lod Threshold For Cleaning",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--LODThresholdForCleaning",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-LOD",
            "id": "#lod_threshold_for_cleaning"
          },
          {
            "description": "Input VCF file(s) with known indels.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Known Alleles",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--knownAlleles",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-known",
            "sbg:fileTypes": "VCF",
            "id": "#known_alleles"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
            "type": [
              "null",
              {
                "name": "intervals_file",
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "script": "{\n  if($job.inputs.intervals_file instanceof Array)\n    if($job.inputs.target_intervals.metadata)\n      if($job.inputs.target_intervals.metadata.intervals_file)\n        return '--intervals ' + $job.inputs.target_intervals.metadata.intervals_file\n  \n  if($job.inputs.intervals_file)\n    return '--intervals ' + $job.inputs.intervals_file.path\n  else\n    return ''\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-L",
            "sbg:stageInput": "link",
            "id": "#intervals_file",
            "sbg:fileTypes": "TXT, BED, VCF"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "sample",
            "label": "Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#intervals"
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "Percentage of mismatches at a locus to be considered having high entropy.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.15",
            "label": "Entropy Threshold",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--entropyThreshold",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-entropy",
            "id": "#entropy_threshold"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Indel Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DIQ",
            "id": "#disable_indel_quals"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPUs per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#cpu_per_job"
          },
          {
            "description": "Determines how to compute the possible alternate consenses.",
            "type": [
              "null",
              {
                "name": "consensus_determination_model",
                "type": "enum",
                "symbols": [
                  "KNOWNS_ONLY",
                  "USE_READS",
                  "USE_SW"
                ]
              }
            ],
            "sbg:toolDefaultValue": "USE_READS",
            "label": "Consensus Determination Model",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--consensusDeterminationModel",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Indel Realigner",
            "sbg:altPrefix": "-model",
            "id": "#consensus_determination_model"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-indelrealigner/0",
        "cwlVersion": "sbg:draft-2"
      },
      "scatter": "#GATK_IndelRealigner.target_intervals",
      "outputs": [
        {
          "id": "#GATK_IndelRealigner.realigned_bam_file"
        }
      ],
      "sbg:x": 1421.667051858386,
      "inputs": [
        {
          "id": "#GATK_IndelRealigner.validation_strictness"
        },
        {
          "id": "#GATK_IndelRealigner.use_original_qualities"
        },
        {
          "id": "#GATK_IndelRealigner.use_legacy_downsampler"
        },
        {
          "id": "#GATK_IndelRealigner.unsafe"
        },
        {
          "source": [
            "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
          ],
          "id": "#GATK_IndelRealigner.target_intervals"
        },
        {
          "id": "#GATK_IndelRealigner.tag"
        },
        {
          "id": "#GATK_IndelRealigner.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_IndelRealigner.reference"
        },
        {
          "source": [
            "#BWA_MEM_Bundle_0_7_13.aligned_reads"
          ],
          "id": "#GATK_IndelRealigner.reads"
        },
        {
          "id": "#GATK_IndelRealigner.read_group_black_list"
        },
        {
          "id": "#GATK_IndelRealigner.read_filter"
        },
        {
          "id": "#GATK_IndelRealigner.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_IndelRealigner.phone_home"
        },
        {
          "id": "#GATK_IndelRealigner.pedigree_validation_type"
        },
        {
          "id": "#GATK_IndelRealigner.pedigree_string"
        },
        {
          "id": "#GATK_IndelRealigner.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_IndelRealigner.no_original_alignment_tags"
        },
        {
          "default": 2048,
          "id": "#GATK_IndelRealigner.memory_per_job"
        },
        {
          "default": 64,
          "id": "#GATK_IndelRealigner.memory_overhead_per_job"
        },
        {
          "id": "#GATK_IndelRealigner.max_runtime_units"
        },
        {
          "id": "#GATK_IndelRealigner.max_runtime"
        },
        {
          "id": "#GATK_IndelRealigner.max_reads_in_memory"
        },
        {
          "id": "#GATK_IndelRealigner.max_reads_for_realignment"
        },
        {
          "id": "#GATK_IndelRealigner.max_reads_for_consensuses"
        },
        {
          "id": "#GATK_IndelRealigner.max_positional_move_allowed"
        },
        {
          "id": "#GATK_IndelRealigner.max_isize_for_movement"
        },
        {
          "id": "#GATK_IndelRealigner.max_consensuses"
        },
        {
          "id": "#GATK_IndelRealigner.lod_threshold_for_cleaning"
        },
        {
          "id": "#GATK_IndelRealigner.known_alleles"
        },
        {
          "id": "#GATK_IndelRealigner.keep_program_records"
        },
        {
          "source": [
            "#SBG_Prepare_Intervals_1.intervals"
          ],
          "id": "#GATK_IndelRealigner.intervals_file"
        },
        {
          "id": "#GATK_IndelRealigner.intervals"
        },
        {
          "id": "#GATK_IndelRealigner.interval_set_rule"
        },
        {
          "id": "#GATK_IndelRealigner.interval_padding"
        },
        {
          "id": "#GATK_IndelRealigner.interval_merging"
        },
        {
          "id": "#GATK_IndelRealigner.gatk_key"
        },
        {
          "id": "#GATK_IndelRealigner.fix_misencoded_quals"
        },
        {
          "id": "#GATK_IndelRealigner.exclude_intervals"
        },
        {
          "id": "#GATK_IndelRealigner.entropy_threshold"
        },
        {
          "id": "#GATK_IndelRealigner.emit_original_quals"
        },
        {
          "id": "#GATK_IndelRealigner.downsampling_type"
        },
        {
          "id": "#GATK_IndelRealigner.downsample_to_fraction"
        },
        {
          "id": "#GATK_IndelRealigner.downsample_to_coverage"
        },
        {
          "id": "#GATK_IndelRealigner.disable_radnomization"
        },
        {
          "id": "#GATK_IndelRealigner.disable_indel_quals"
        },
        {
          "id": "#GATK_IndelRealigner.default_base_qualities"
        },
        {
          "default": 1,
          "id": "#GATK_IndelRealigner.cpu_per_job"
        },
        {
          "id": "#GATK_IndelRealigner.consensus_determination_model"
        },
        {
          "id": "#GATK_IndelRealigner.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_IndelRealigner.baq"
        },
        {
          "id": "#GATK_IndelRealigner.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": 414.4274774032482,
      "id": "#GATK_IndelRealigner"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "java",
          {
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "-jar",
          "/opt/GenomeAnalysisTKLite.jar",
          "--analysis_type",
          "BaseRecalibrator",
          {
            "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(3)\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "outputBinding": {
              "sbg:metadata": {},
              "glob": "*.pdf"
            },
            "type": [
              "null",
              "File"
            ],
            "sbg:fileTypes": "PDF",
            "id": "#plot_pdf",
            "label": "Plot"
          },
          {
            "description": "The output recalibration table file to create.",
            "type": [
              "File"
            ],
            "label": "BQSR Table",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#reads",
              "sbg:metadata": {},
              "glob": "*.recal_data.grp"
            },
            "sbg:fileTypes": "GRP",
            "id": "#bqsr"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type BaseRecalibrator -nct 3 --reference_sequence /folder/reference.fasta --input_file /folder/my_reads.bam --out my_reads.recal_data.grp  --disable_indel_quals --plot_pdf_file my_reads.pdf",
        "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
        "sbg:contributors": [
          "vladimirk",
          "bix-demo",
          "bogdang"
        ],
        "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-base-recalibrator/9",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "2.3.9 Lite",
        "sbg:createdOn": 1450911406,
        "arguments": [
          {
            "prefix": "--out",
            "valueFrom": {
              "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.recal_data.grp'\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          },
          {
            "valueFrom": "--disable_indel_quals",
            "separate": true
          },
          {
            "prefix": "--plot_pdf_file",
            "valueFrom": {
              "script": "{\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length-1).join('.')\n    return read_namebase + '.pdf'\n\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "separate": true
          }
        ],
        "sbg:license": "MIT License",
        "class": "CommandLineTool",
        "x": 1571.1768614653809,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2048,
            "cpu": 1
          },
          "inputs": {
            "reads": [
              {
                "size": 0,
                "class": "File",
                "path": "/folder/my_reads.bam",
                "secondaryFiles": []
              }
            ],
            "cpu_per_job": null,
            "memory_overhead_per_job": 0,
            "known_sites": [
              {
                "path": "/folder/latest_dbsnp.vcf"
              }
            ],
            "reference": {
              "path": "/folder/reference.fasta"
            },
            "intervals": "20"
          }
        },
        "description": "Overview\n\nThis tool is designed to work as the first pass in a two-pass processing step. It does a by-locus traversal operating only at sites that are not in dbSNP. We assume that all reference mismatches we see are therefore errors and indicative of poor base quality. This tool generates tables based on various user-specified covariates (such as read group, reported quality score, cycle, and context). Since there is a large amount of data, one can then calculate an empirical probability of error given the particular covariates seen at this site, where p(error) = num mismatches / num observations. The output file is a table (of the several covariate values, num observations, num mismatches, empirical quality score).\n\nNote: ReadGroupCovariate and QualityScoreCovariate are required covariates and will be added regardless of whether or not they were specified.\n\nInput\nA BAM file containing data that needs to be recalibrated.\nA database of known polymorphic sites to mask out.\n\nOutput\nA GATKReport file with many tables:\nThe list of arguments\nThe quantized qualities table\nThe recalibration table by read group\nThe recalibration table by quality score\nThe recalibration table for all the optional covariates\nThe GATKReport table format is intended to be easy to read by both humans and computer languages (especially R). Check out the documentation of the GATKReport (in the FAQs) to learn how to manipulate this table.\n\nUsage example\n java -jar GenomeAnalysisTK.jar \\\n   -T BaseRecalibrator \\\n   -R reference.fasta \\\n   -I my_reads.bam \\\n   -knownSites latest_dbsnp.vcf \\\n   -o recal_data.table\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
        "y": 408.9413004295544,
        "sbg:modifiedOn": 1478707638,
        "sbg:categories": [
          "Plotting-and-Rendering",
          "SAM/BAM-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9",
            "dockerImageId": "47510cb2da55"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "GATK",
        "label": "GATK BaseRecalibrator",
        "sbg:toolAuthor": "Broad Institute",
        "sbg:revisionNotes": ".bai secondary file",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "https://www.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadgsa/gatk-protected",
            "label": "Source Code"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf",
            "label": "Wiki"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34",
            "label": "Download"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature",
            "label": "Publication"
          },
          {
            "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php",
            "label": "Documentation"
          }
        ],
        "sbg:revision": 9,
        "successCodes": [],
        "sbg:latestRevision": 9,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911406,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911409,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911410,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1450911411,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1450911412,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1450911413,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1469450580,
            "sbg:revisionNotes": "File extensions for intervals_file corrected.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1471364360,
            "sbg:revisionNotes": "known sites link.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1472226104,
            "sbg:revisionNotes": "-L intervals string",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1478707638,
            "sbg:revisionNotes": ".bai secondary file",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "How strict should we be with validation.",
            "type": [
              "null",
              {
                "name": "validation_strictness",
                "type": "enum",
                "symbols": [
                  "SILENT",
                  "LENIENT",
                  "STRICT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SILENT",
            "label": "Validation Strictness",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--validation_strictness",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-S",
            "id": "#validation_strictness"
          },
          {
            "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Original Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--useOriginalQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-OQ",
            "id": "#use_original_qualities"
          },
          {
            "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Use Legacy Downsampler",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--use_legacy_downsampler",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-use_legacy_downsampler",
            "id": "#use_legacy_downsampler"
          },
          {
            "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
            "type": [
              "null",
              {
                "name": "unsafe",
                "type": "enum",
                "symbols": [
                  "ALLOW_UNINDEXED_BAM",
                  "ALLOW_UNSET_BAM_SORT_ORDER",
                  "NO_READ_ORDER_VERIFICATION",
                  "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                  "LENIENT_VCF_PROCESSING",
                  "ALL"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Unsafe",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--unsafe",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-U",
            "id": "#unsafe"
          },
          {
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "3",
            "label": "Threads per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#threads_per_job"
          },
          {
            "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Tag",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--tag",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-tag",
            "id": "#tag"
          },
          {
            "description": "How should we recalibrate solid bases in which the reference was inserted? Options = DO_NOTHING, SET_Q_ZERO, SET_Q_ZERO_BASE_N, or REMOVE_REF_BIAS.",
            "type": [
              "null",
              {
                "name": "solid_recal_mode",
                "type": "enum",
                "symbols": [
                  "DO_NOTHING",
                  "SET_Q_ZERO",
                  "SET_Q_ZERO_BASE_N",
                  "REMOVE_REF_BIAS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SET_Q_ZERO",
            "label": "Solid Recal Mode",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--solid_recal_mode",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-sMode",
            "id": "#solid_recal_mode"
          },
          {
            "description": "Defines the behavior of the recalibrator when it encounters no calls in the color space. Options = THROW_EXCEPTION, LEAVE_READ_UNRECALIBRATED, or PURGE_READ.",
            "type": [
              "null",
              {
                "name": "solid_nocall_strategy",
                "type": "enum",
                "symbols": [
                  "THROW_EXCEPTION",
                  "LEAVE_READ_UNRECALIBRATED",
                  "PURGE_READ"
                ]
              }
            ],
            "sbg:toolDefaultValue": "THROW_EXCEPTION",
            "label": "Solid Nocall Strategy",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--solid_nocall_strategy",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": null,
            "id": "#solid_nocall_strategy"
          },
          {
            "description": "If specified, allows the recalibrator to be used without a dbsnp rod. Very unsafe and for expert users only.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Run Without Dbsnp Potentially Ruining Quality",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-run_without_dbsnp_potentially_ruining_quality",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": null,
            "id": "#run_without_dbsnp_potentially_ruining_quality"
          },
          {
            "description": "Should we override the Walker's default and remove program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Remove Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--remove_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rpr",
            "id": "#remove_program_records"
          },
          {
            "description": "Reference Genome in FASTA format.",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Genome",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--reference_sequence",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-R",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference"
          },
          {
            "description": "Read sequences in BAM format.",
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Read sequences",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--input_file",
              "separate": true,
              "itemSeparator": null,
              "secondaryFiles": [
                ".bai"
              ]
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-I",
            "sbg:fileTypes": "SAM, BAM",
            "id": "#reads"
          },
          {
            "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Group Black List",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_group_black_list",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rgbl",
            "id": "#read_group_black_list"
          },
          {
            "description": "Specify filtration criteria to apply to each read individually.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "read_filter",
                  "type": "enum",
                  "symbols": [
                    "BadCigarFilter",
                    "BadMateFilter",
                    "CountingFilteringIterator.CountingReadFilter",
                    "DuplicateReadFilter",
                    "FailsVendorQualityCheckFilter",
                    "HCMappingQualityFilter",
                    "LibraryReadFilter",
                    "MalformedReadFilter",
                    "MappingQualityFilter",
                    "MappingQualityUnavailableFilter",
                    "MappingQualityZeroFilter",
                    "MateSameStrandFilter",
                    "MaxInsertSizeFilter",
                    "MissingReadGroupFilter",
                    "NoOriginalQualityScoresFilter",
                    "NotPrimaryAlignmentFilter",
                    "OverclippedReadFilter",
                    "Platform454Filter",
                    "PlatformFilter",
                    "PlatformUnitFilter",
                    "ReadGroupBlackListFilter",
                    "ReadLengthFilter",
                    "ReadNameFilter",
                    "ReadStrandFilter",
                    "ReassignMappingQualityFilter",
                    "ReassignOneMappingQualityFilter",
                    "SampleFilter",
                    "SingleReadGroupFilter",
                    "UnmappedReadFilter"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Read Filter",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--read_filter",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-rf",
            "id": "#read_filter"
          },
          {
            "description": "Number of distinct quality scores in the quantized output.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "16",
            "label": "Quantizing Levels",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--quantizing_levels",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-ql",
            "id": "#quantizing_levels"
          },
          {
            "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "6",
            "label": "Preserve Qscores Less Than",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--preserve_qscores_less_than",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-preserveQ",
            "id": "#preserve_qscores_less_than"
          },
          {
            "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              {
                "name": "phone_home",
                "type": "enum",
                "symbols": [
                  "NO_ET",
                  "STANDARD"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STANDARD",
            "label": "Phone Home",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--phone_home",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-et",
            "id": "#phone_home"
          },
          {
            "description": "How strict should we be in validating the pedigree information?.",
            "type": [
              "null",
              {
                "name": "pedigree_validation_type",
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "SILENT"
                ]
              }
            ],
            "sbg:toolDefaultValue": "STRICT",
            "label": "Pedigree Validation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeValidationType",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedValidationType",
            "id": "#pedigree_validation_type"
          },
          {
            "description": "Pedigree string for samples.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "string"
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Pedigree String",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--pedigreeString",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-pedString",
            "id": "#pedigree_string"
          },
          {
            "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Non Deterministic Random Seed",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nonDeterministicRandomSeed",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ndrs",
            "id": "#non_deterministic_random_seed"
          },
          {
            "description": "Do not use the standard set of covariates, but rather just the ones listed using the -cov argument. Cannot be used if grouped by interval.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "No Standard Covs",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--no_standard_covs",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-noStandard",
            "id": "#no_standard_covs"
          },
          {
            "description": "Default quality for the base mismatches covariate.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Mismatches Default Quality",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mismatches_default_quality",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-msdq",
            "id": "#mismatches_default_quality"
          },
          {
            "description": "Size of the k-mer context to be used for base mismatches.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2",
            "label": "Mismatches Context Size",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--mismatches_context_size",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-mcs",
            "id": "#mismatches_context_size"
          },
          {
            "description": "Amount of RAM memory in MB to be used per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "sbg:altPrefix": null,
            "id": "#memory_per_job"
          },
          {
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Memory overhead per job",
            "sbg:category": "Execution",
            "id": "#memory_overhead_per_job"
          },
          {
            "description": "The maximum cycle value permitted for the Cycle covariate.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "500",
            "label": "Maximum Cycle Value",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maximum_cycle_value",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-maxCycle",
            "id": "#maximum_cycle_value"
          },
          {
            "description": "The TimeUnit for maxRuntime.",
            "type": [
              "null",
              {
                "name": "max_runtime_units",
                "type": "enum",
                "symbols": [
                  "NANOSECONDS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "SECONDS",
                  "MINUTES",
                  "HOURS",
                  "DAYS"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MINUTES",
            "label": "Max Runtime Units",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntimeUnits",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntimeUnits",
            "id": "#max_runtime_units"
          },
          {
            "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Max Runtime",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--maxRuntime",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-maxRuntime",
            "id": "#max_runtime"
          },
          {
            "description": "Minimum quality for the bases in the tail of the reads to be considered.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "2",
            "label": "Low Quality Tail",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--low_quality_tail",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-lqt",
            "id": "#low_quality_tail"
          },
          {
            "description": "A database of known polymorphic sites to skip over in the recalibration algorithm.",
            "sbg:stageInput": "link",
            "type": [
              "null",
              {
                "name": "known_sites",
                "type": "array",
                "items": "File"
              }
            ],
            "required": false,
            "label": "Known Sites",
            "sbg:category": "Input Files",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--knownSites",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:fileTypes": "VCF, BED, TXT",
            "id": "#known_sites"
          },
          {
            "description": "Should we override the Walker's default and keep program records from the SAM header.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Keep Program Records",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--keep_program_records",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-kpr",
            "id": "#keep_program_records"
          },
          {
            "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file. Cannot be used if grouped by interval. .",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Intervals",
            "sbg:category": "Input Files",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--intervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:fileTypes": "TXT,BED,VCF,INTERVALS",
            "id": "#intervals_file"
          },
          {
            "description": "One or more genomic intervals over which to operate.",
            "type": [
              "null",
              "string"
            ],
            "required": false,
            "sbg:toolDefaultValue": "sample",
            "label": "Intervals",
            "sbg:category": "GATK General",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": null,
              "separate": true
            },
            "id": "#intervals",
            "sbg:includeInPorts": true
          },
          {
            "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
            "type": [
              "null",
              {
                "name": "interval_set_rule",
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ]
              }
            ],
            "sbg:toolDefaultValue": "UNION",
            "label": "Interval Set Rule",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_set_rule",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-isr",
            "id": "#interval_set_rule"
          },
          {
            "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Interval Padding",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_padding",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-ip",
            "id": "#interval_padding"
          },
          {
            "description": "Indicates the interval merging rule we should use for abutting intervals.",
            "type": [
              "null",
              {
                "name": "interval_merging",
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ]
              }
            ],
            "sbg:toolDefaultValue": "ALL",
            "label": "Interval Merging",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--interval_merging",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-im",
            "id": "#interval_merging"
          },
          {
            "description": "Default quality for the base insertions covariate.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "45",
            "label": "Insertions Default Quality",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--insertions_default_quality",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-idq",
            "id": "#insertions_default_quality"
          },
          {
            "description": "Size of the k-mer context to be used for base insertions and deletions.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "3",
            "label": "Indels Context Size",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--indels_context_size",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-ics",
            "id": "#indels_context_size"
          },
          {
            "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Gatk key",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--gatk_key",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-K",
            "sbg:fileTypes": "KEY, LICENSE",
            "id": "#gatk_key"
          },
          {
            "description": "Fix mis-encoded base quality scores.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Fix Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-fixMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-fixMisencodedQuals",
            "id": "#fix_misencoded_quals"
          },
          {
            "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Exclude Intervals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--excludeIntervals",
              "itemSeparator": " ",
              "separate": true
            },
            "sbg:category": "Input Files",
            "sbg:altPrefix": "-XL",
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#exclude_intervals"
          },
          {
            "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Emit Original Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--emit_original_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-EOQ",
            "id": "#emit_original_quals"
          },
          {
            "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
            "type": [
              "null",
              {
                "name": "downsampling_type",
                "type": "enum",
                "symbols": [
                  "NONE",
                  "ALL_READS",
                  "BY_SAMPLE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsampling Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsampling_type",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dt",
            "id": "#downsampling_type"
          },
          {
            "description": "Fraction [0.0-1.0] of reads to downsample to.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Fraction",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_fraction",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dfrac",
            "id": "#downsample_to_fraction"
          },
          {
            "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Downsample to Coverage",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--downsample_to_coverage",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-dcov",
            "id": "#downsample_to_coverage"
          },
          {
            "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Disable Randomization",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disableRandomization",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": null,
            "id": "#disable_radnomization"
          },
          {
            "description": "Disable indel quality recalibration. Must be set to true in GATK Lite.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "True",
            "label": "Disable indel quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--disable_indel_quals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": null,
            "id": "#disable_indel_quals"
          },
          {
            "description": "Default quality for the base deletions covariate.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "45",
            "label": "Deletions Default Quality",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--deletions_default_quality",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-ddq",
            "id": "#deletions_default_quality"
          },
          {
            "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "-1",
            "label": "Default Base Qualities",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--defaultBaseQualities",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-DBQ",
            "id": "#default_base_qualities"
          },
          {
            "description": "Number of CPU per job.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "CPU per job",
            "sbg:category": "Execution",
            "id": "#cpu_per_job"
          },
          {
            "description": "One or more covariates to be used in the recalibration. Can be specified multiple times.",
            "type": [
              "null",
              {
                "type": "array",
                "items": {
                  "name": "covariate",
                  "type": "enum",
                  "symbols": [
                    "CycleCovariate",
                    "ReadGroupCovariate",
                    "ContextCovariate",
                    "RepeatLengthCovariate",
                    "QualityScoreCovariate"
                  ]
                }
              }
            ],
            "sbg:toolDefaultValue": "[]",
            "label": "Covariate",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--covariate",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-cov",
            "id": "#covariate"
          },
          {
            "description": "BQSR BAQ gap open penalty (Phred Scaled).  Default value is 40.  30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "Bqsr Baq Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--bqsrBAQGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-bqsrBAQGOP",
            "id": "#bqsr_baq_gap_open_penalty"
          },
          {
            "description": "The binary tag covariate name if using it.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "",
            "label": "Binary Tag Name",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--binary_tag_name",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "Base Recalibrator",
            "sbg:altPrefix": "-bintag",
            "id": "#binary_tag_name"
          },
          {
            "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "40.0",
            "label": "BAQ Gap Open Penalty",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baqGapOpenPenalty",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baqGOP",
            "id": "#baq_gap_open_penalty"
          },
          {
            "description": "Type of BAQ calculation to apply in the engine.",
            "type": [
              "null",
              {
                "name": "baq",
                "type": "enum",
                "symbols": [
                  "OFF",
                  "CALCULATE_AS_NECESSARY",
                  "RECALCULATE"
                ]
              }
            ],
            "sbg:toolDefaultValue": "OFF",
            "label": "BAQ Calculation Type",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--baq",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "-baq",
            "id": "#baq"
          },
          {
            "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Allow Potentially Misencoded Quals",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-allowPotentiallyMisencodedQuals",
              "itemSeparator": null,
              "separate": true
            },
            "sbg:category": "GATK General",
            "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
            "id": "#allow_potentailly_misencoded_quals"
          }
        ],
        "sbg:id": "admin/sbg-public-data/gatk-2-3-9-lite-base-recalibrator/0",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#GATK_BaseRecalibrator.plot_pdf"
        },
        {
          "id": "#GATK_BaseRecalibrator.bqsr"
        }
      ],
      "sbg:x": 1571.1768614653809,
      "inputs": [
        {
          "id": "#GATK_BaseRecalibrator.validation_strictness"
        },
        {
          "id": "#GATK_BaseRecalibrator.use_original_qualities"
        },
        {
          "id": "#GATK_BaseRecalibrator.use_legacy_downsampler"
        },
        {
          "id": "#GATK_BaseRecalibrator.unsafe"
        },
        {
          "default": 32,
          "id": "#GATK_BaseRecalibrator.threads_per_job"
        },
        {
          "id": "#GATK_BaseRecalibrator.tag"
        },
        {
          "id": "#GATK_BaseRecalibrator.solid_recal_mode"
        },
        {
          "id": "#GATK_BaseRecalibrator.solid_nocall_strategy"
        },
        {
          "id": "#GATK_BaseRecalibrator.run_without_dbsnp_potentially_ruining_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.remove_program_records"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_BaseRecalibrator.reference"
        },
        {
          "source": [
            "#GATK_IndelRealigner.realigned_bam_file"
          ],
          "id": "#GATK_BaseRecalibrator.reads"
        },
        {
          "id": "#GATK_BaseRecalibrator.read_group_black_list"
        },
        {
          "id": "#GATK_BaseRecalibrator.read_filter"
        },
        {
          "id": "#GATK_BaseRecalibrator.quantizing_levels"
        },
        {
          "id": "#GATK_BaseRecalibrator.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_BaseRecalibrator.phone_home"
        },
        {
          "id": "#GATK_BaseRecalibrator.pedigree_validation_type"
        },
        {
          "id": "#GATK_BaseRecalibrator.pedigree_string"
        },
        {
          "id": "#GATK_BaseRecalibrator.non_deterministic_random_seed"
        },
        {
          "id": "#GATK_BaseRecalibrator.no_standard_covs"
        },
        {
          "id": "#GATK_BaseRecalibrator.mismatches_default_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.mismatches_context_size"
        },
        {
          "default": 50000,
          "id": "#GATK_BaseRecalibrator.memory_per_job"
        },
        {
          "id": "#GATK_BaseRecalibrator.memory_overhead_per_job"
        },
        {
          "id": "#GATK_BaseRecalibrator.maximum_cycle_value"
        },
        {
          "id": "#GATK_BaseRecalibrator.max_runtime_units"
        },
        {
          "id": "#GATK_BaseRecalibrator.max_runtime"
        },
        {
          "id": "#GATK_BaseRecalibrator.low_quality_tail"
        },
        {
          "source": [
            "#known_sites_1"
          ],
          "id": "#GATK_BaseRecalibrator.known_sites"
        },
        {
          "id": "#GATK_BaseRecalibrator.keep_program_records"
        },
        {
          "id": "#GATK_BaseRecalibrator.intervals_file"
        },
        {
          "source": [
            "#intervals"
          ],
          "id": "#GATK_BaseRecalibrator.intervals"
        },
        {
          "id": "#GATK_BaseRecalibrator.interval_set_rule"
        },
        {
          "id": "#GATK_BaseRecalibrator.interval_padding"
        },
        {
          "id": "#GATK_BaseRecalibrator.interval_merging"
        },
        {
          "id": "#GATK_BaseRecalibrator.insertions_default_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.indels_context_size"
        },
        {
          "id": "#GATK_BaseRecalibrator.gatk_key"
        },
        {
          "id": "#GATK_BaseRecalibrator.fix_misencoded_quals"
        },
        {
          "id": "#GATK_BaseRecalibrator.exclude_intervals"
        },
        {
          "id": "#GATK_BaseRecalibrator.emit_original_quals"
        },
        {
          "id": "#GATK_BaseRecalibrator.downsampling_type"
        },
        {
          "id": "#GATK_BaseRecalibrator.downsample_to_fraction"
        },
        {
          "id": "#GATK_BaseRecalibrator.downsample_to_coverage"
        },
        {
          "id": "#GATK_BaseRecalibrator.disable_radnomization"
        },
        {
          "id": "#GATK_BaseRecalibrator.disable_indel_quals"
        },
        {
          "id": "#GATK_BaseRecalibrator.deletions_default_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.default_base_qualities"
        },
        {
          "default": 32,
          "id": "#GATK_BaseRecalibrator.cpu_per_job"
        },
        {
          "id": "#GATK_BaseRecalibrator.covariate"
        },
        {
          "id": "#GATK_BaseRecalibrator.bqsr_baq_gap_open_penalty"
        },
        {
          "id": "#GATK_BaseRecalibrator.binary_tag_name"
        },
        {
          "id": "#GATK_BaseRecalibrator.baq_gap_open_penalty"
        },
        {
          "id": "#GATK_BaseRecalibrator.baq"
        },
        {
          "id": "#GATK_BaseRecalibrator.allow_potentailly_misencoded_quals"
        }
      ],
      "sbg:y": 408.9413004295544,
      "id": "#GATK_BaseRecalibrator"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          {
            "script": "{\n  cmd = \"/bin/bash -c \\\"\"\n  return cmd\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          {
            "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          },
          "/opt/bwa-0.7.13/bwa",
          "mem"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Aligned reads.",
            "type": [
              "null",
              "File"
            ],
            "label": "Aligned SAM/BAM",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_reads",
              "sbg:metadata": {
                "reference_genome": {
                  "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}",
                  "engine": "#cwl-js-engine",
                  "class": "Expression"
                }
              },
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "glob": "{*.sam,*.bam}"
            },
            "sbg:fileTypes": "SAM, BAM",
            "id": "#aligned_reads"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "/bin/bash -c \" tar -xf reference.b37.fasta.gz.tar ;  /opt/bwa-0.7.13/bwa mem  -R '@RG\\tID:rg_id-string-value\\tPL:Illumina\\tSM:dnk_sample' -t 1  reference.b37.fasta.gz  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz  | /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout | /opt/sambamba_v0.6.0 view -t 8 -f bam -l 0 -S /dev/stdin | /opt/sambamba_v0.6.0 sort -t 1 -m 5GiB --tmpdir ./ -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam -l 5 /dev/stdin  ;declare -i pipe_statuses=(\\${PIPESTATUS[*]});len=\\${#pipe_statuses[@]};declare -i tot=0;echo \\${pipe_statuses[*]};for (( i=0; i<\\${len}; i++ ));do if [ \\${pipe_statuses[\\$i]} -ne 0 ];then tot=\\${pipe_statuses[\\$i]}; fi;done;if [ \\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\${pipe_statuses[*]};fi; if [ \\$tot -ne 0 ]; then false;fi\"",
        "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
        "sbg:contributors": [
          "bogdang",
          "bix-demo",
          "vladimirk"
        ],
        "id": "vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-mem-bundle-0-7-13/37",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "0.7.13",
        "sbg:createdOn": 1458653351,
        "arguments": [
          {
            "valueFrom": {
              "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = '/opt/sambamba_v0.6.0'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SAM'){ // SAM\n    return \"> \" + name + \".sam\"\n  }\n  else { // SortedBAM is considered default\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "prefix": "",
            "position": 111,
            "separate": false
          },
          {
            "valueFrom": {
              "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  reads_size = 0 // Not used because of situations when size does not exist!\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined  \n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else threads = suggested_cpus\n  \n  sambamba_path = '/opt/sambamba_v0.6.0'\n  \n  // SortedBAM is considered default\n  if (!(($job.inputs.output_format == 'BAM') || ($job.inputs.output_format == 'SAM'))){\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads\n    return cmd + \" -m \"+sorter_memory_string+\" --tmpdir ./ -o \"+ name +\".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 112,
            "separate": false
          },
          {
            "valueFrom": {
              "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n    return \"| /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout\"\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    return \"| /opt/samblaster/samblaster -r -i /dev/stdin -o /dev/stdout\"\n  }\n  else{\n   return \"\" \n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 110,
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  if($job.inputs.rg_id){\n    add_param('ID', $job.inputs.rg_id)\n  }\n  else {\n    add_param('ID', '1')\n  } \n   \n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n    if(read_metadata.platform == 'HiSeq X Ten'){\n      rg_platform = 'Illumina'\n    }\n    else{\n      rg_platform = read_metadata.platform\n    }\n  \tadd_param('PL', rg_platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 1,
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else {\n    input_reads = $job.inputs.input_reads = [].concat($job.inputs.input_reads)\n  }\n  \n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 101,
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  \n  reads_size = 0 \n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_threads = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_threads = 8 }\n  else { suggested_threads = 31 }\n  \n  \n  if(!$job.inputs.threads){  \treturn suggested_threads  }  \n  else{    return $job.inputs.threads  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "prefix": "-t",
            "position": 2,
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  return name\n  \n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 10,
            "separate": true
          },
          {
            "valueFrom": {
              "script": "{\n  cmd = \";declare -i pipe_statuses=(\\\\${PIPESTATUS[*]});len=\\\\${#pipe_statuses[@]};declare -i tot=0;echo \\\\${pipe_statuses[*]};for (( i=0; i<\\\\${len}; i++ ));do if [ \\\\${pipe_statuses[\\\\$i]} -ne 0 ];then tot=\\\\${pipe_statuses[\\\\$i]}; fi;done;if [ \\\\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\\\${pipe_statuses[*]};fi; if [ \\\\$tot -ne 0 ]; then false;fi\\\"\"\n  return cmd\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            },
            "position": 10000,
            "separate": true
          }
        ],
        "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
        "class": "CommandLineTool",
        "x": 942.3334725035608,
        "sbg:job": {
          "allocatedResources": {
            "mem": 4096,
            "cpu": 3
          },
          "inputs": {
            "output_format": null,
            "read_group_header": "",
            "input_reads": [
              {
                "metadata": {
                  "sample_id": "dnk_sample",
                  "platform": "HiSeq X Ten",
                  "paired_end": "2"
                },
                "size": 30000000000,
                "class": "File",
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz",
                "secondaryFiles": []
              },
              {
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
              }
            ],
            "threads": null,
            "band_width": null,
            "reserved_threads": 3,
            "rg_platform_unit_id": "",
            "rg_platform": null,
            "rg_median_fragment_length": "",
            "sambamba_threads": null,
            "skip_seeds": null,
            "deduplication": "MarkDuplicates",
            "output_name": "",
            "rg_sample_id": "",
            "rg_data_submitting_center": "",
            "filter_out_secondary_alignments": false,
            "rg_library_id": "",
            "total_memory": null,
            "sort_memory": 0,
            "rg_id": "rg_id-string-value",
            "reference_index_tar": {
              "size": 0,
              "class": "File",
              "path": "/path/to/reference.b37.fasta.gz.tar",
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ]
            }
          }
        },
        "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.13): Samblaster. (0.1.22) and Sambamba (v0.6.0). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
        "y": 143.00002728568273,
        "sbg:modifiedOn": 1480437238,
        "sbg:categories": [
          "Alignment",
          "FASTQ-Processing"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13",
            "dockerImageId": ""
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n  if($job.inputs.reserved_threads){ return $job.inputs.reserved_threads }\n  else if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "BWA",
        "label": "BWA-MEM Bundle 0.7.13",
        "sbg:toolAuthor": "Heng Li",
        "sbg:revisionNotes": "Added RG ID as optional input parameter",
        "sbg:modifiedBy": "vladimirk",
        "sbg:image_url": null,
        "sbg:createdBy": "vladimirk",
        "sbg:links": [
          {
            "id": "http://bio-bwa.sourceforge.net/",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lh3/bwa",
            "label": "Source code"
          },
          {
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/bio-bwa/",
            "label": "Download"
          },
          {
            "id": "http://arxiv.org/abs/1303.3997",
            "label": "Publication"
          },
          {
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
            "label": "Publication BWA Algorithm"
          }
        ],
        "sbg:revision": 37,
        "successCodes": [],
        "sbg:latestRevision": 37,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1458653351,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1458653365,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1458653397,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1458653457,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1458735076,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1458744323,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1460644019,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1461676796,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1461677982,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1461691955,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1462799414,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1462800334,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 12,
            "sbg:modifiedOn": 1465226602,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 13,
            "sbg:modifiedOn": 1465997760,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 14,
            "sbg:modifiedOn": 1465999303,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 15,
            "sbg:modifiedOn": 1466161520,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 16,
            "sbg:modifiedOn": 1468500423,
            "sbg:revisionNotes": "Change red port type - FIX.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 17,
            "sbg:modifiedOn": 1469448834,
            "sbg:revisionNotes": "port renamed to reference index tar",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 18,
            "sbg:modifiedOn": 1469449249,
            "sbg:revisionNotes": "reference_index_tar renamed in other expressions.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 19,
            "sbg:modifiedOn": 1470746327,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 20,
            "sbg:modifiedOn": 1470747524,
            "sbg:revisionNotes": "SortedBAM is default output type.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 21,
            "sbg:modifiedOn": 1471860342,
            "sbg:revisionNotes": "Fix for single-ended reads.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 22,
            "sbg:modifiedOn": 1471864768,
            "sbg:revisionNotes": "instanceof fix for common filename",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 23,
            "sbg:modifiedOn": 1471866804,
            "sbg:revisionNotes": "[]concat(input_reads)",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 24,
            "sbg:modifiedOn": 1471868494,
            "sbg:revisionNotes": "SortedBAM default - returned revision.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 25,
            "sbg:modifiedOn": 1471879715,
            "sbg:revisionNotes": "Fix for same common sub-strings.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 26,
            "sbg:modifiedOn": 1471880959,
            "sbg:revisionNotes": "Fix to support single FASTQ input.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 27,
            "sbg:modifiedOn": 1472054931,
            "sbg:revisionNotes": "reads_size for sorter made more robust.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 28,
            "sbg:modifiedOn": 1472056751,
            "sbg:revisionNotes": "FASTQs size use for memory and CPU estimation removed!",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 29,
            "sbg:modifiedOn": 1472057639,
            "sbg:revisionNotes": "reads size removed from estimating number of CPUs",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 30,
            "sbg:modifiedOn": 1472122448,
            "sbg:revisionNotes": "Added reference_genome metadata field to SAM/BAM.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 31,
            "sbg:modifiedOn": 1472126991,
            "sbg:revisionNotes": "BAM/SAM metadata, reference_genome in the same format as in drop down menu.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 32,
            "sbg:modifiedOn": 1476202723,
            "sbg:revisionNotes": "Added reserved number of threads as an input.",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 33,
            "sbg:modifiedOn": 1477616482,
            "sbg:revisionNotes": "added piping command status check",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 34,
            "sbg:modifiedOn": 1479314087,
            "sbg:revisionNotes": "BAM index output port removed",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 35,
            "sbg:modifiedOn": 1479483637,
            "sbg:revisionNotes": "Support for files with \"HiSeq X Ten\" in platform metadata field",
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 36,
            "sbg:modifiedOn": 1479492159,
            "sbg:revisionNotes": "fix platform",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 37,
            "sbg:modifiedOn": 1480437238,
            "sbg:revisionNotes": "Added RG ID as optional input parameter",
            "sbg:modifiedBy": "vladimirk"
          }
        ],
        "inputs": [
          {
            "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
            "type": [
              "null",
              {
                "name": "verbose_level",
                "type": "enum",
                "symbols": [
                  "1",
                  "2",
                  "3",
                  "4"
                ]
              }
            ],
            "sbg:toolDefaultValue": "3",
            "label": "Verbose level",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-v",
              "separate": true
            },
            "id": "#verbose_level"
          },
          {
            "description": "Use soft clipping for supplementary alignments.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Use soft clipping",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-Y",
              "separate": true
            },
            "id": "#use_soft_clipping"
          },
          {
            "description": "Penalty for an unpaired read pair.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "17",
            "label": "Unpaired read penalty",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-U",
              "separate": true
            },
            "id": "#unpaired_read_penalty"
          },
          {
            "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "15",
            "label": "Total memory",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#total_memory"
          },
          {
            "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "8",
            "label": "Threads",
            "sbg:category": "Execution",
            "id": "#threads"
          },
          {
            "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
            "type": [
              "null",
              {
                "name": "speficy_distribution_parameters",
                "type": "array",
                "items": "float"
              }
            ],
            "label": "Specify distribution parameters",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-I",
              "itemSeparator": null,
              "separate": false
            },
            "id": "#speficy_distribution_parameters"
          },
          {
            "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory).",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "id": "#sort_memory",
            "label": "Memory for BAM sorting"
          },
          {
            "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Smart pairing in input FASTQ file",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-p",
              "separate": true
            },
            "id": "#smart_pairing_in_input_fastq"
          },
          {
            "description": "Skip seeds with more than INT occurrences.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "500",
            "label": "Skip seeds with more than INT occurrences",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-c",
              "separate": true
            },
            "id": "#skip_seeds"
          },
          {
            "description": "Skip pairing; mate rescue performed unless -S also in use.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Skip pairing",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-P",
              "separate": true
            },
            "id": "#skip_pairing"
          },
          {
            "description": "Skip mate rescue.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Skip mate rescue",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-S",
              "separate": true
            },
            "id": "#skip_mate_rescue"
          },
          {
            "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "1.5",
            "label": "Select seeds",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-r",
              "separate": true
            },
            "id": "#select_seeds"
          },
          {
            "description": "Seed occurrence for the 3rd round seeding.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "20",
            "label": "Seed occurrence for the 3rd round",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-y",
              "separate": true
            },
            "id": "#seed_occurrence_for_the_3rd_round"
          },
          {
            "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Score for a sequence match",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-A",
              "separate": true
            },
            "id": "#score_for_a_sequence_match"
          },
          {
            "description": "Number of threads to pass to Sambamba sort, if used.",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "id": "#sambamba_threads",
            "label": "Sambamba Sort threads"
          },
          {
            "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Sample ID",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_sample_id"
          },
          {
            "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Platform unit ID",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_platform_unit_id"
          },
          {
            "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
            "type": [
              "null",
              {
                "name": "rg_platform",
                "type": "enum",
                "symbols": [
                  "454",
                  "Helicos",
                  "Illumina",
                  "Solid",
                  "IonTorrent"
                ]
              }
            ],
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Platform",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_platform"
          },
          {
            "description": "Specify the median fragment length for RG line.",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "id": "#rg_median_fragment_length",
            "label": "Median fragment length"
          },
          {
            "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Library ID",
            "sbg:category": "BWA Read Group Options",
            "id": "#rg_library_id"
          },
          {
            "description": "Read group ID",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Read group ID",
            "sbg:category": "Configuration",
            "id": "#rg_id"
          },
          {
            "description": "Specify the data submitting center for RG line.",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "id": "#rg_data_submitting_center",
            "label": "Data submitting center"
          },
          {
            "description": "Reserved number of threads on the instance used by scheduler.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Reserved number of threads on the instance",
            "sbg:category": "Configuration",
            "sbg:stageInput": null,
            "id": "#reserved_threads"
          },
          {
            "description": "Reference fasta file with BWA index files packed in TAR.",
            "sbg:stageInput": "link",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Reference Index TAR",
            "sbg:category": "Input files",
            "sbg:fileTypes": "TAR",
            "id": "#reference_index_tar"
          },
          {
            "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
            "type": [
              "null",
              {
                "name": "read_type",
                "type": "enum",
                "symbols": [
                  "pacbio",
                  "ont2d",
                  "intractg"
                ]
              }
            ],
            "label": "Sequencing technology-specific settings",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-x",
              "separate": true
            },
            "id": "#read_type"
          },
          {
            "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata.",
            "label": "Read group header",
            "sbg:category": "BWA Read Group Options",
            "id": "#read_group_header"
          },
          {
            "description": "Name of the output BAM file.",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "string"
            ],
            "id": "#output_name",
            "label": "Output SAM/BAM file name"
          },
          {
            "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "int"
              }
            ],
            "sbg:toolDefaultValue": "[5, 200]",
            "label": "Output in XA",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-h",
              "itemSeparator": ",",
              "separate": false
            },
            "id": "#output_in_xa"
          },
          {
            "description": "Output the reference FASTA header in the XR tag.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Output header",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-V",
              "separate": true
            },
            "id": "#output_header"
          },
          {
            "description": "Specify output format (Sorted BAM option will output coordinate sorted BAM).",
            "type": [
              "null",
              {
                "name": "output_format",
                "type": "enum",
                "symbols": [
                  "SAM",
                  "BAM",
                  "SortedBAM"
                ]
              }
            ],
            "sbg:toolDefaultValue": "SortedBAM",
            "label": "Output format",
            "sbg:category": "Execution",
            "id": "#output_format"
          },
          {
            "description": "Output all alignments for SE or unpaired PE.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Output alignments",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-a",
              "separate": true
            },
            "id": "#output_alignments"
          },
          {
            "description": "Penalty for a mismatch.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "4",
            "label": "Mismatch penalty",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-B",
              "separate": true
            },
            "id": "#mismatch_penalty"
          },
          {
            "description": "Minimum seed length for BWA MEM.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "19",
            "label": "Minimum seed length",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-k",
              "separate": true
            },
            "id": "#minimum_seed_length"
          },
          {
            "description": "Minimum alignment score for a read to be output in SAM/BAM.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "30",
            "label": "Minimum alignment score for a read to be output in SAM/BAM",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-T",
              "separate": true
            },
            "id": "#minimum_output_score"
          },
          {
            "description": "Perform at most INT rounds of mate rescues for each read.",
            "type": [
              "null",
              "string"
            ],
            "sbg:toolDefaultValue": "50",
            "label": "Mate rescue rounds",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-m",
              "separate": true
            },
            "id": "#mate_rescue_rounds"
          },
          {
            "description": "Mark shorter split hits as secondary.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Mark shorter",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-M",
              "separate": true
            },
            "id": "#mark_shorter"
          },
          {
            "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
            "type": [
              "null",
              "string"
            ],
            "label": "Insert string to output SAM or BAM header",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-H",
              "separate": true
            },
            "id": "#insert_string_to_header"
          },
          {
            "description": "Input sequence reads.",
            "type": [
              {
                "name": "input_reads",
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Input reads",
            "sbg:category": "Input files",
            "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
            "id": "#input_reads"
          },
          {
            "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Ignore ALT file",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-j",
              "separate": true
            },
            "id": "#ignore_alt_file"
          },
          {
            "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "int"
              }
            ],
            "sbg:toolDefaultValue": "[6,6]",
            "label": "Gap open penalties",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-O",
              "itemSeparator": ",",
              "separate": false
            },
            "id": "#gap_open_penalties"
          },
          {
            "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "int"
              }
            ],
            "sbg:toolDefaultValue": "[1,1]",
            "label": "Gap extension",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-E",
              "itemSeparator": ",",
              "separate": false
            },
            "id": "#gap_extension_penalties"
          },
          {
            "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:toolDefaultValue": "False",
            "label": "Filter out secondary alignments",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#filter_out_secondary_alignments"
          },
          {
            "description": "Off-diagonal X-dropoff.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "100",
            "label": "Dropoff",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-d",
              "separate": true
            },
            "id": "#dropoff"
          },
          {
            "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
            "type": [
              "null",
              "float"
            ],
            "sbg:toolDefaultValue": "0.50",
            "label": "Drop chains fraction",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-D",
              "separate": true
            },
            "id": "#drop_chains_fraction"
          },
          {
            "description": "Discard full-length exact matches.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Discard exact matches",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-e",
              "separate": true
            },
            "id": "#discard_exact_matches"
          },
          {
            "description": "Discard a chain if seeded bases shorter than INT.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "0",
            "label": "Discard chain length",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-W",
              "separate": true
            },
            "id": "#discard_chain_length"
          },
          {
            "description": "Use Samblaster for finding duplicates on sequence reads.",
            "type": [
              "null",
              {
                "name": "deduplication",
                "type": "enum",
                "symbols": [
                  "None",
                  "MarkDuplicates",
                  "RemoveDuplicates"
                ]
              }
            ],
            "sbg:toolDefaultValue": "MarkDuplicates",
            "label": "PCR duplicate detection",
            "sbg:category": "Samblaster parameters",
            "id": "#deduplication"
          },
          {
            "description": "Penalty for 5'- and 3'-end clipping.",
            "type": [
              "null",
              {
                "type": "array",
                "items": "int"
              }
            ],
            "sbg:toolDefaultValue": "[5,5]",
            "label": "Clipping penalty",
            "sbg:category": "BWA Scoring options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-L",
              "itemSeparator": ",",
              "separate": false
            },
            "id": "#clipping_penalty"
          },
          {
            "description": "Band width for banded alignment.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "100",
            "label": "Band width",
            "sbg:category": "BWA Algorithm options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-w",
              "separate": true
            },
            "id": "#band_width"
          },
          {
            "description": "Append FASTA/FASTQ comment to SAM output.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Append comment",
            "sbg:category": "BWA Input/output options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "-C",
              "separate": true
            },
            "id": "#append_comment"
          }
        ],
        "sbg:id": "admin/sbg-public-data/bwa-mem-bundle-0-7-13/0",
        "cwlVersion": "sbg:draft-2"
      },
      "scatter": "#BWA_MEM_Bundle_0_7_13.input_reads",
      "outputs": [
        {
          "id": "#BWA_MEM_Bundle_0_7_13.aligned_reads"
        }
      ],
      "sbg:x": 942.3334725035608,
      "inputs": [
        {
          "id": "#BWA_MEM_Bundle_0_7_13.verbose_level"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.use_soft_clipping"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.unpaired_read_penalty"
        },
        {
          "default": 54,
          "id": "#BWA_MEM_Bundle_0_7_13.total_memory"
        },
        {
          "default": 30,
          "id": "#BWA_MEM_Bundle_0_7_13.threads"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.speficy_distribution_parameters"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.sort_memory"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.smart_pairing_in_input_fastq"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.skip_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.skip_pairing"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.skip_mate_rescue"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.select_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.seed_occurrence_for_the_3rd_round"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.score_for_a_sequence_match"
        },
        {
          "default": 30,
          "id": "#BWA_MEM_Bundle_0_7_13.sambamba_threads"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.rg_sample_id"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.rg_platform_unit_id"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.rg_platform"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.rg_median_fragment_length"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.rg_library_id"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.rg_id"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.rg_data_submitting_center"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.reserved_threads"
        },
        {
          "source": [
            "#BWA_INDEX.indexed_reference"
          ],
          "id": "#BWA_MEM_Bundle_0_7_13.reference_index_tar"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.read_type"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.read_group_header"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.output_name"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.output_in_xa"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.output_header"
        },
        {
          "default": "SortedBAM",
          "id": "#BWA_MEM_Bundle_0_7_13.output_format"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.output_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.mismatch_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.minimum_seed_length"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.minimum_output_score"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.mate_rescue_rounds"
        },
        {
          "default": true,
          "id": "#BWA_MEM_Bundle_0_7_13.mark_shorter"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.insert_string_to_header"
        },
        {
          "source": [
            "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
          ],
          "id": "#BWA_MEM_Bundle_0_7_13.input_reads"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.ignore_alt_file"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.gap_open_penalties"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.gap_extension_penalties"
        },
        {
          "default": true,
          "id": "#BWA_MEM_Bundle_0_7_13.filter_out_secondary_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.dropoff"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.drop_chains_fraction"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.discard_exact_matches"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.discard_chain_length"
        },
        {
          "default": "MarkDuplicates",
          "id": "#BWA_MEM_Bundle_0_7_13.deduplication"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.clipping_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.band_width"
        },
        {
          "id": "#BWA_MEM_Bundle_0_7_13.append_comment"
        }
      ],
      "sbg:y": 143.00002728568273,
      "id": "#BWA_MEM_Bundle_0_7_13"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          "fastqc"
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Zip archive of the report.",
            "type": [
              "null",
              {
                "name": "report_zip",
                "type": "array",
                "items": "File"
              }
            ],
            "label": "Report zip",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#input_fastq",
              "sbg:metadata": {
                "__inherit__": "input_fastq"
              },
              "glob": "*_fastqc.zip"
            },
            "sbg:fileTypes": "ZIP",
            "id": "#report_zip"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "fastqc  --noextract --outdir .  /path/to/input_fastq-1.ext  /path/to/input_fastq-2.ext",
        "sbg:project": "bix-demo/fastqc-0-11-4-demo",
        "sbg:contributors": [
          "bix-demo",
          "mladenlSBG"
        ],
        "id": "bix-demo/fastqc-0-11-4-demo/fastqc-0-11-4/7",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "sbg:toolkitVersion": "0.11.4",
        "sbg:createdOn": 1450911593,
        "arguments": [
          {
            "prefix": "",
            "valueFrom": "--noextract",
            "separate": true
          },
          {
            "prefix": "--outdir",
            "valueFrom": ".",
            "separate": true
          }
        ],
        "sbg:license": "GNU General Public License v3.0 only",
        "class": "CommandLineTool",
        "x": 121.00001570913574,
        "sbg:job": {
          "allocatedResources": {
            "mem": 2524,
            "cpu": 5
          },
          "inputs": {
            "input_fastq": [
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/input_fastq-1.ext",
                "secondaryFiles": []
              },
              {
                "size": 0,
                "class": "File",
                "path": "/path/to/input_fastq-2.ext",
                "secondaryFiles": []
              }
            ],
            "threads": 5,
            "quiet": true
          }
        },
        "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data.\n\nFastQC is a tool which takes a FastQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.\n\n### Common Issues:\n\nOutput of the tool is ZIP archive. In order to view report on Seven Bridges platform, you can use SBG Html2b64 tool. It is advised to scatter SBG Html2b64 so it would be able to process an array of files.",
        "y": 467.00002925925855,
        "sbg:modifiedOn": 1476354537,
        "sbg:categories": [
          "FASTQ-Processing",
          "Quality-Control",
          "Quantification"
        ],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4",
            "dockerImageId": "759c4c8fbafd"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "script": "{\n//we are allocating CPU's based on number of threads, but if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n//and we also determine CPU based on number of inputs\nif ($job.inputs.threads)\n    {\n      return $job.inputs.threads;\n    }\n  else if ($job.inputs.input_fastq)\n  {\n    return $job.inputs.input_fastq.length;\n  }\n  else\n  {\n    return 1\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n//we are allocating memory based on number of threads\n//if threads are not specified number of threads is determined based on number of inputs\n//for each thread FastQC uses 250 mb but we've added a bit more (300mb) because of the overhead\n\nif ($job.inputs.threads)\n    {\n      return (1024 + 300*$job.inputs.threads);\n    }\n  else if ($job.inputs.input_fastq)\n  {\n    return (1024 + 300*$job.inputs.input_fastq.length);\n  }\n  else\n  {\n    return 1\n  }\n}\n\n",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          }
        ],
        "stdin": "",
        "sbg:toolkit": "FastQC",
        "label": "FastQC",
        "sbg:toolAuthor": "Babraham Institute",
        "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
        "sbg:modifiedBy": "mladenlSBG",
        "sbg:image_url": null,
        "sbg:createdBy": "bix-demo",
        "sbg:links": [
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
            "label": "Homepage"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip",
            "label": "Source Code"
          },
          {
            "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial",
            "label": "Wiki"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip",
            "label": "Download"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc",
            "label": "Publication"
          }
        ],
        "sbg:revision": 7,
        "successCodes": [],
        "sbg:latestRevision": 7,
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911593,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911593,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911594,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1459870965,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "mladenlSBG"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1465990120,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "mladenlSBG"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1476188095,
            "sbg:revisionNotes": "Input categories added.",
            "sbg:modifiedBy": "mladenlSBG"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1476270496,
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling. \n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:modifiedBy": "mladenlSBG"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1476354537,
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:modifiedBy": "mladenlSBG"
          }
        ],
        "inputs": [
          {
            "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Threads",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--threads",
              "valueFrom": {
                "script": "{\n//if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n  \nif ($job.inputs.threads)\n    {\n      return $job.inputs.threads;\n    }\n  else if ($job.inputs.input_fastq)\n  {\n    return $job.inputs.input_fastq.length;\n  }\n  else\n  {\n    return 1\n  }\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "separate": true
            },
            "sbg:category": "Options",
            "sbg:altPrefix": "-t",
            "id": "#threads"
          },
          {
            "description": "Supress all progress messages on stdout and only report errors.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Quiet",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--quiet",
              "separate": true
            },
            "sbg:category": "Options",
            "sbg:altPrefix": "-q",
            "id": "#quiet"
          },
          {
            "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Nogroup",
            "sbg:category": "Options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nogroup",
              "separate": false
            },
            "id": "#nogroup"
          },
          {
            "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Nano",
            "sbg:category": "Options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--nano",
              "separate": false
            },
            "id": "#nano"
          },
          {
            "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Limits",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--limits",
              "separate": true
            },
            "sbg:category": "File inputs",
            "sbg:altPrefix": "-l",
            "sbg:fileTypes": "TXT",
            "id": "#limits_file"
          },
          {
            "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "7",
            "label": "Kmers",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--kmers",
              "separate": true
            },
            "sbg:category": "Options",
            "sbg:altPrefix": "-f",
            "id": "#kmers"
          },
          {
            "description": "Input file.",
            "type": [
              {
                "name": "input_fastq",
                "type": "array",
                "items": "File"
              }
            ],
            "required": true,
            "label": "Input file",
            "sbg:category": "File inputs",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 100,
              "itemSeparator": null,
              "separate": true
            },
            "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
            "id": "#input_fastq"
          },
          {
            "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
            "type": [
              "null",
              {
                "name": "format",
                "type": "enum",
                "symbols": [
                  "bam",
                  "sam",
                  "bam_mapped",
                  "sam_mapped",
                  "fastq"
                ]
              }
            ],
            "label": "Format",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--format",
              "separate": true
            },
            "sbg:category": "Options",
            "sbg:altPrefix": "-f",
            "id": "#format"
          },
          {
            "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Contaminants",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--contaminants",
              "separate": true
            },
            "sbg:category": "File inputs",
            "sbg:altPrefix": "-c",
            "sbg:fileTypes": "FASTA, FA, TXT",
            "id": "#contaminants_file"
          },
          {
            "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
            "type": [
              "null",
              "boolean"
            ],
            "label": "Casava",
            "sbg:category": "Options",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--casava",
              "separate": false
            },
            "id": "#casava"
          },
          {
            "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "type": [
              "null",
              "File"
            ],
            "required": false,
            "label": "Adapters",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "prefix": "--adapters",
              "separate": true
            },
            "sbg:category": "File inputs",
            "sbg:altPrefix": "-a",
            "sbg:fileTypes": "FASTA, FA",
            "id": "#adapters_file"
          }
        ],
        "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/2",
        "cwlVersion": "sbg:draft-2"
      },
      "outputs": [
        {
          "id": "#FastQC.report_zip"
        }
      ],
      "sbg:x": 121.00001570913574,
      "inputs": [
        {
          "id": "#FastQC.threads"
        },
        {
          "id": "#FastQC.quiet"
        },
        {
          "id": "#FastQC.nogroup"
        },
        {
          "id": "#FastQC.nano"
        },
        {
          "id": "#FastQC.limits_file"
        },
        {
          "id": "#FastQC.kmers"
        },
        {
          "source": [
            "#fastq"
          ],
          "id": "#FastQC.input_fastq"
        },
        {
          "id": "#FastQC.format"
        },
        {
          "id": "#FastQC.contaminants_file"
        },
        {
          "id": "#FastQC.casava"
        },
        {
          "id": "#FastQC.adapters_file"
        }
      ],
      "sbg:y": 467.00002925925855,
      "id": "#FastQC"
    },
    {
      "run": {
        "temporaryFailCodes": [],
        "baseCommand": [
          {
            "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n  \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {// no conversion\n\treturn \"echo No conversion\"\n  }\n  else\n  {\n    return \"python sbg_fastq_quality_scale_adjuster.py\"\n  }\n}",
            "engine": "#cwl-js-engine",
            "class": "Expression"
          }
        ],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "description": "Resulting file in FASTQ format.",
            "type": [
              "null",
              "File"
            ],
            "label": "Result",
            "outputBinding": {
              "sbg:inheritMetadataFrom": "#fastq",
              "sbg:metadata": {
                "Quality scale": "sanger"
              },
              "glob": {
                "script": "{\n\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {\n    return $job.inputs.fastq.path.replace(/^.*[\\\\\\/]/, '')\n  }\n  else\n  {\n\tfile = $job.inputs.fastq.path\n\tfile_split = file.split('.')\n\tbasename = file_split\n  \tif (basename.length > 1)\n    {\n      l_ext = basename.splice(basename.length-1)\n      if (l_ext == 'gz')\n      {\n        basename = basename.slice(0, basename.length-1)\n      }\n    }\n \tretval = basename.concat('std.fastq')\n\treturn retval.join('.').replace(/^.*[\\\\\\/]/, '') + \"*\"\n  }\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              }
            },
            "sbg:fileTypes": "FASTQ",
            "id": "#result"
          }
        ],
        "stdout": "",
        "sbg:cmdPreview": "python sbg_fastq_quality_scale_adjuster.py  --fastq /path/to/test.1.fastq",
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:contributors": [
          "bogdang",
          "vladimirk"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-fastq-quality-adjuster/11",
        "sbg:sbgMaintained": false,
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "filename": "sbg_fastq_quality_scale_adjuster.py",
                "fileContent": "\"\"\"\nUsage:\n    sbg_fastq_quality_scale_adjuster.py --fastq FILE\n\nOptions:\n    -h, --help          Show this message.\n\n    -f, --fastq FILE    Input FASTQ file.\n\n\"\"\"\n\nfrom docopt import docopt\nimport os\nimport gzip\nimport itertools as it\nimport shutil\nimport sys\nfrom math import log10\nfrom subprocess import Popen\n\n\n\nargs = docopt(__doc__, version='1.0')\n\ninput_file = args['--fastq'] \n\nbase_name = input_file[input_file.rfind('/')+1:input_file.rfind('.') if input_file.rfind('.') != -1 else None]\nr_ext = input_file[input_file.rfind('.')+1:] if input_file.rfind('.') else \"\"\nl_ext = base_name.split('.')[-1].lower()\nif l_ext == 'fastq' or l_ext == 'fq':\n    if not r_ext == 'fastq' and not r_ext == 'fq':\n        base_name = base_name[:base_name.rfind('.')]\noutput_file = base_name + '.std.fastq'\n\n\n\"\"\"input and output names defined above\"\"\"\n\nclass myGzipFile(gzip.GzipFile):\n    def __enter__(self, *args, **kwargs):\n        if self.fileobj is None:\n            raise ValueError(\"I/O operation on closed GzipFile object\")\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n\n\ndef extremes(a, b):\n    if a is False:\n        return b, b\n    return min(a[0], b), max(a[1], b)\n\n\ndef walk_qualities(f, sample_size=1000):\n    for i in xrange(sample_size * 4):\n        try:\n            line = f.next()\n        except StopIteration:\n            return\n        if i % 4 == 3:\n            yield line.rstrip(\"\\n\\r\")\n\n\ndef sniff(path):\n    with open(path, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    opn = myGzipFile if gz else open\n    with opn(path) as f:\n        return get_scale(*map(ord, reduce(extremes, it.chain(*walk_qualities(f)), False)))\n\n\ndef get_scale(ord_min, ord_max):\n    options = {\n        'illumina13': (64, 105),\n        'illumina15': (66, 105),\n        'sanger': (33, 126),\n        'solexa': (59, 105),\n    }\n    fits = [(k, v) for k, v in options.iteritems() if v[0] <= ord_min and v[1] >= ord_max]\n    if not fits:\n        message = 'Quality scale for range (%s, %s) not found.' % (ord_min, ord_max)\n        raise Exception(message)\n        # Return narrowest range\n    return reduce(lambda a, b: a if a[1][1] - a[1][0] < b[1][1] - b[1][0] else b, fits)[0]\n\ndef qsolexa(x):\n    return chr(int(round(10 * log10(10.0**((ord(x)-64)/10.0)+1))) + 33)\n\n\ndef qillumina13(x):\n    return chr(ord(x) - 31)\n\n\ndef qillumina15(x):\n    return chr(ord(x) - 31) if ord(x)-64 > 2 else chr(33)\n\n\ndef qillumina18(x):\n    return x\n\n\n\"\"\"detect quality scale format\"\"\"\n\nmeta_qual = sniff(input_file)\n\n\n\"\"\"adjust quality scale if needed\"\"\"\n\nif meta_qual == 'illumina13':\n    proc = qillumina13\nelif meta_qual == 'illumina15':\n    proc = qillumina15\nelif meta_qual == 'solexa':\n    proc = qsolexa\nelse:\n    proc = None\n\nif proc == qsolexa: \n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    open_gz = myGzipFile if gz else open\n    with open(output_file, 'w') as out:\n        for i, line in enumerate(open_gz(input_file)):\n            if i % 4 == 3:\n                line = line.strip()\n                converted = ''.join(map(proc, line))\n                out.write(converted + '\\n')\n            else:\n                out.write(line)\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelif proc is not None: #seqtk converter from illumina13-15\n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    f.close()\n    if gz:#gunzip file to temp.fastq\n        temp_file = 'temp.fastq'\n        \n        inF = gzip.GzipFile(input_file, 'rb')\n        outF = file(temp_file, 'wb')\n        \n        newline = ''\n        for lines in inF:\n            outF.write(newline + lines.rstrip('\\n'))\n            newline = '\\n'\n            \n        inF.close()\n        outF.close()\n\n    else:\n        temp_file = input_file\n\n    cmd = ['seqtk','seq','-Q64','-V',temp_file,'>',output_file]\n    with open(output_file, 'w') as out:\n        p = Popen(cmd, stdout = out)\n        p.communicate()\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelse:\n    if input_file.rfind(\".gz\") == len(input_file) - 3:\n        output_file = output_file + \".gz\"\n    #shutil.copyfile(input_file, output_file)\n    #os.symlink(input_file, output_file)\n    os.rename(input_file, output_file)\n    contents = \"Original fastq quality scale format was illumina18. No conversion performed.\\n\"\n\nsys.stderr.write(contents) #Write conversion to error log"
              }
            ]
          },
          {
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "class": "ExpressionEngineRequirement",
            "id": "#cwl-js-engine"
          }
        ],
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "script": "{\n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return 1000\n  }\n}",
              "engine": "#cwl-js-engine",
              "class": "Expression"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerPull": "images.sbgenomics.com/bogdang/sbg_quality_scale_adjuster:1.0",
            "dockerImageId": ""
          }
        ],
        "sbg:createdOn": 1470927070,
        "arguments": [],
        "sbg:license": "Apache License 2.0",
        "class": "CommandLineTool",
        "x": 363.33334823449474,
        "sbg:job": {
          "allocatedResources": {
            "mem": 9216,
            "cpu": 1
          },
          "inputs": {
            "used_quality_scale": null,
            "fastq": {
              "metadata": {
                "Quality scale": "sanger"
              },
              "size": 0,
              "class": "File",
              "path": "/path/to/test.1.fastq",
              "secondaryFiles": []
            },
            "total_memory": 9
          }
        },
        "description": "This app detects quality score format used in input FASTQ file. FASTQ quality score is then converted to standard Sanger quality score if conversion is required. It is basically a compact merged version of \"SBG Fastq Quality Detector\" and \"SBG Fastq Quality Converter\", created to speed up the execution of pipelines. Supported source formats are: Solexa, Illumina 1.3, Illumina 1.5 and Illumina 1.8.",
        "y": 246.09373995040806,
        "sbg:modifiedOn": 1481448894,
        "sbg:categories": [
          "Converters",
          "FASTQ-Processing"
        ],
        "sbg:latestRevision": 11,
        "stdin": "",
        "sbg:toolkit": "SBGTools",
        "label": "SBG FASTQ Quality Adjuster",
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:revisionNotes": "fix",
        "sbg:modifiedBy": "bogdang",
        "sbg:image_url": null,
        "sbg:createdBy": "vladimirk",
        "sbg:revision": 11,
        "successCodes": [],
        "sbg:revisionsInfo": [
          {
            "sbg:revision": 0,
            "sbg:modifiedOn": 1470927070,
            "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/23",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 1,
            "sbg:modifiedOn": 1472559664,
            "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/24",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 2,
            "sbg:modifiedOn": 1474546255,
            "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/25",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 3,
            "sbg:modifiedOn": 1475084132,
            "sbg:revisionNotes": "'sanger': (33, 74) instead 'sanger': (33, 126)",
            "sbg:modifiedBy": "vladimirk"
          },
          {
            "sbg:revision": 4,
            "sbg:modifiedOn": 1475231421,
            "sbg:revisionNotes": "sanger 33:92",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 5,
            "sbg:modifiedOn": 1475234050,
            "sbg:revisionNotes": "seqtk for converting from illumina13-15",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 6,
            "sbg:modifiedOn": 1478274820,
            "sbg:revisionNotes": "fix for seqtk conversion from .gz files",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 7,
            "sbg:modifiedOn": 1478277013,
            "sbg:revisionNotes": "Without seqtk",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 8,
            "sbg:modifiedOn": 1478300733,
            "sbg:revisionNotes": "fix seqtk for .gz files",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 9,
            "sbg:modifiedOn": 1481123041,
            "sbg:revisionNotes": "Support for files named filename.fq.fastq",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 10,
            "sbg:modifiedOn": 1481290093,
            "sbg:revisionNotes": "No conversion if sanger or illumina18 quality scale set in metadata",
            "sbg:modifiedBy": "bogdang"
          },
          {
            "sbg:revision": 11,
            "sbg:modifiedOn": 1481448894,
            "sbg:revisionNotes": "fix",
            "sbg:modifiedBy": "bogdang"
          }
        ],
        "inputs": [
          {
            "description": "Used quality scale of FASTQ reads.",
            "sbg:category": "Input",
            "type": [
              "null",
              {
                "name": "used_quality_scale",
                "type": "enum",
                "symbols": [
                  "sanger",
                  "illumina18",
                  "illumina13",
                  "illumina15",
                  "solexa"
                ]
              }
            ],
            "id": "#used_quality_scale",
            "label": "Used quality scale"
          },
          {
            "description": "Total memory in GB.",
            "type": [
              "null",
              "int"
            ],
            "sbg:toolDefaultValue": "1",
            "label": "Total memory [GB]",
            "sbg:category": "Execution",
            "sbg:stageInput": null,
            "id": "#total_memory"
          },
          {
            "description": "Input FASTQ file.",
            "sbg:stageInput": "link",
            "type": [
              "File"
            ],
            "required": true,
            "label": "Fastq file",
            "sbg:category": "Input",
            "inputBinding": {
              "valueFrom": {
                "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" )   {\n    return \"\"\n  }\n  else\n  {\n    return \"--fastq \" + $job.inputs.fastq.path\n  }\n}",
                "engine": "#cwl-js-engine",
                "class": "Expression"
              },
              "sbg:cmdInclude": true,
              "position": 1,
              "separate": true
            },
            "sbg:fileTypes": "FASTQ,FASTQ.GZ,FQ,FQ.GZ",
            "id": "#fastq"
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-fastq-quality-adjuster/0",
        "cwlVersion": "sbg:draft-2"
      },
      "scatter": "#SBG_FASTQ_Quality_Adjuster.fastq",
      "outputs": [
        {
          "id": "#SBG_FASTQ_Quality_Adjuster.result"
        }
      ],
      "sbg:x": 363.33334823449474,
      "inputs": [
        {
          "id": "#SBG_FASTQ_Quality_Adjuster.used_quality_scale"
        },
        {
          "id": "#SBG_FASTQ_Quality_Adjuster.total_memory"
        },
        {
          "source": [
            "#fastq"
          ],
          "id": "#SBG_FASTQ_Quality_Adjuster.fastq"
        }
      ],
      "sbg:y": 246.09373995040806,
      "id": "#SBG_FASTQ_Quality_Adjuster"
    }
  ],
  "sbg:license": "Apache License 2.0",
  "class": "Workflow",
  "description": "WGS pipeline is used to study the complete DNA sequence of an organism (known as Genome). Although WGS generally has lower coverage than WES, this method can detect variants outside of protein-coding areas and can detect changes affecting regulatory regions and various controlling mechanisms. This characteristic allows for wider application of the pipeline, especially in cases when novel variants are expected. For example, WGS can be used when the phenotype or family history strongly implicates genetic etiology but the phenotype does not correspondent to any specific disorder for which a testing targeting a specific gene is clinically available, or in case when a genetic disorder demonstrates high degree of genetic heterogeneity (H L Rehm, S J Bale et al. ACMG clinical laboratory standards for next-generation sequencing, Genet Med. 2013 September ; 15(9): 733\u2013747. doi:10.1038/gim.2013.92.). \nThe pipeline is constructed following the Broad Institute best practice and utilizing Broad Institute's GATK tools. A separate step is undertaken to assess the quality of sequenced reads using Babraham Institute's tool FastQC. \nSequenced reads are aligned with the BWA tool after which duplicates are removed. The next step uses algorithms developed by the Broad Institute to improve alignment around indels followed by the re-evaluation of the qualities of sequenced bases. Generated SAM files are pooled together and variant calling is performed. Detected variants are subjected to additional analysis resulting in refined, high quality set of identified variants (for more information on how variant calling is performed, please refer to the [Broad Institute's web site](https://www.broadinstitute.org/gatk/guide/topic?name=methods)).\n\nIn order to obtain optimal usage of instance resources and avoid creating unnecessary processes (jobs) for every region in input targets BED file two paths in the pipeline are created. First, parallel path, (tools run in Scatter mode), uses BED file with regions from all chromosomes (autosomal, X and Y). Each of these regions will be processed in parallel in RealignerTargetCreator Scatter, IndelRealigner Scatter, PrintReads Scatter and UnifiedGenotyper Scatter). Second, sequential path uses BED file with much smaller regions containing GLs and mitochondrial chromosomes. Each of these regions will be processed sequentially in RealignerTargetCreator, IndelRealigner, PrintReads and UnifiedGenotyper).",
  "sbg:modifiedOn": 1494430929,
  "sbg:createdOn": 1494430929,
  "sbg:categories": [
    "WGS"
  ],
  "hints": [
    {
      "class": "sbg:AWSInstanceType",
      "value": "c3.8xlarge"
    },
    {
      "class": "sbg:GoogleInstanceType",
      "value": "n1-standard-32"
    },
    {
      "class": "sbg:useSbgFS",
      "value": "true"
    }
  ],
  "sbg:toolkit": "SBGTools",
  "sbg:canvas_x": -44,
  "sbg:revisionNotes": "Quality adjuster updated.",
  "sbg:modifiedBy": "admin",
  "sbg:toolAuthor": "Seven Bridges",
  "sbg:image_url": "https://brood-import-fix-vayu.sbgenomics.com:11180/static/admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/0.png",
  "sbg:canvas_zoom": 0.5999999999999996,
  "sbg:revision": 0,
  "sbg:appVersion": [
    "sbg:draft-2"
  ],
  "sbg:latestRevision": 0,
  "sbg:revisionsInfo": [
    {
      "sbg:revision": 0,
      "sbg:modifiedOn": 1494430929,
      "sbg:revisionNotes": "Quality adjuster updated.",
      "sbg:modifiedBy": "admin"
    }
  ],
  "inputs": [
    {
      "sbg:suggestedValue": {
        "name": "GRCh37.75.zip",
        "class": "File",
        "path": "5772b6be507c1752674486c6"
      },
      "type": [
        "File"
      ],
      "label": "SnpEff database",
      "sbg:x": 3039.9998648299047,
      "sbg:fileTypes": "ZIP",
      "id": "#database_1",
      "sbg:y": 356.6619691979336
    },
    {
      "batchType": "metadata.sample_id",
      "type": [
        {
          "type": "array",
          "items": "File"
        }
      ],
      "label": "FASTQ",
      "sbg:includeInPorts": true,
      "sbg:x": -43.333329757054656,
      "sbg:fileTypes": "FASTQ,FASTQ.GZ,FQ,FQ.GZ",
      "id": "#fastq",
      "sbg:y": 254.66667691866573
    },
    {
      "type": [
        "File"
      ],
      "label": "Reference or TAR with BWA reference indices",
      "sbg:y": 21.33333672417546,
      "sbg:includeInPorts": true,
      "sbg:x": -83.99998560216626,
      "sbg:suggestedValue": {
        "name": "human_g1k_v37_decoy.fasta.tar",
        "class": "File",
        "path": "5772b6d9507c1752674486e7"
      },
      "id": "#reference",
      "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR"
    },
    {
      "type": [
        "File"
      ],
      "label": "Target BED",
      "sbg:y": 1183.3286236522697,
      "sbg:includeInPorts": true,
      "sbg:x": 133.33333332008812,
      "sbg:suggestedValue": {
        "name": "human_g1k_v37_decoy.breakpoints.bed",
        "class": "File",
        "path": "5772b6d8507c1752674486e5"
      },
      "id": "#bed_file_1",
      "sbg:fileTypes": "BED"
    },
    {
      "type": [
        {
          "type": "array",
          "items": "File"
        }
      ],
      "label": "Known INDELs",
      "sbg:y": 548.3286820515789,
      "sbg:includeInPorts": true,
      "sbg:x": 711.6666337913925,
      "sbg:suggestedValue": [
        {
          "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf",
          "class": "File",
          "path": "5772b6c9507c1752674486d4"
        },
        {
          "name": "1000G_phase1.indels.b37.vcf",
          "class": "File",
          "path": "578cf947507c17681a3117ce"
        }
      ],
      "id": "#known_1",
      "sbg:fileTypes": "VCF"
    },
    {
      "type": [
        "File"
      ],
      "label": "Mills",
      "sbg:y": 391.6668539709586,
      "sbg:includeInPorts": true,
      "sbg:x": 2456.667814082613,
      "sbg:suggestedValue": {
        "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf",
        "class": "File",
        "path": "5772b6c9507c1752674486d4"
      },
      "id": "#input_vcf_3",
      "sbg:fileTypes": "VCF"
    },
    {
      "type": [
        "File"
      ],
      "label": "1000g phase1 snps",
      "sbg:y": -60.00001516607127,
      "sbg:includeInPorts": true,
      "sbg:x": 2038.3335770898473,
      "sbg:suggestedValue": {
        "name": "1000G_phase1.snps.high_confidence.b37.vcf",
        "class": "File",
        "path": "578cf947507c17681a3117d0"
      },
      "id": "#input_vcf_2",
      "sbg:fileTypes": "VCF"
    },
    {
      "type": [
        "File"
      ],
      "label": "HapMap",
      "sbg:y": -193.33337080478802,
      "sbg:includeInPorts": true,
      "sbg:x": 2068.3336599270615,
      "sbg:suggestedValue": {
        "name": "hapmap_3.3.b37.vcf",
        "class": "File",
        "path": "5772b6d3507c1752674486df"
      },
      "id": "#input_vcf_1",
      "sbg:fileTypes": "VCF"
    },
    {
      "type": [
        "File"
      ],
      "label": "1000g Omni",
      "sbg:y": -308.3333975738971,
      "sbg:includeInPorts": true,
      "sbg:x": 2093.333741572182,
      "sbg:suggestedValue": {
        "name": "1000G_omni2.5.b37.vcf",
        "class": "File",
        "path": "578cf946507c17681a3117cb"
      },
      "id": "#input_vcf",
      "sbg:fileTypes": "VCF"
    },
    {
      "type": [
        {
          "type": "array",
          "items": "File"
        }
      ],
      "label": "dbSNP",
      "sbg:y": 834.9953711163477,
      "sbg:includeInPorts": true,
      "sbg:x": 361.6667957968216,
      "sbg:suggestedValue": [
        {
          "name": "dbsnp_137.b37.vcf",
          "class": "File",
          "path": "5772b6cd507c1752674486d8"
        }
      ],
      "id": "#known_sites_1",
      "sbg:fileTypes": "VCF"
    },
    {
      "type": [
        "string"
      ],
      "label": "BQSR intervals optimal value is 20 or chr20",
      "sbg:x": 413.3332543108168,
      "sbg:y": 994.9941705862676,
      "id": "#intervals",
      "sbg:includeInPorts": true
    }
  ],
  "sbg:id": "admin/sbg-public-data/whole-genome-analysis-bwa-gatk-2-3-9-lite/0",
  "sbg:createdBy": "admin"
}
